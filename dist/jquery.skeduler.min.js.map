{"version":3,"sources":["node_modules/browser-pack/_prelude.js","jquery.skeduler.js","src/adapter.js","src/index.js","src/items/index.js","src/settings.js","src/skeduler.js","src/template/index.js","src/utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_interopRequireDefault","obj","__esModule","default","_skeduler","_skeduler2","$","fn","skeduler","options","$container","this","./skeduler","2","Object","defineProperty","value","_adapter","./adapter","3","_template","_utils","div","cssClass","addClass","getItemDivs","settings","$div","itemsOptions","itemCardCssClass","items","template","compileTemplate","itemCardTemplate","time","item","interval","start","end","map","clone","data","index","html","findStartTime","rowIndex","rowsPerHour","Math","max","hoursFromTop","toTime","parseTime","populateSkedulerItems","getItem","isAssigned","tasks","filter","$skedulerItemsEl","containerSelector","empty","itemsCssClass","$ownerDocument","ownerDocument","$shifts","availableIntervalPlaceholderCssClass","$skedulerItemsContainerEl","title","appendTo","$items","forEach","el","append","operation","conflictedTasks","mouseUp","event","_operation","$movingCard","$card","startTime","$siEl","highlightItemCss","parseInt","push","onItemWillBeUnassigned","detach","css","top","left","height","width","removeClass","on","mouseDown","remove","onItemDidUnassigned","column","lineHeight","parent","offsetInMinutes","availableIntervals","onItemWillBeAssigned","$el","offsetTop","clientHeight","task","find","onItemDidAssigned","show","p","console","log","hide","off","mouseMove","_operation2","offsetX","offsetY","newOffsetX","pageX","newOffsetY","pageY","_window","defaultView","x","y","scrollY","rowHeight","duration","each","$this","elementBounding","getBoundingClientRect","right","bottom","$shift","$matchingAreaEl","floor","_top","min","itemIndex","matchResult","matchFunc","color","match","taskStart","movingTaskStart","conflictedTaskPair","which","$skedulerWrapper","skedulerWrapperCssClass","currentTarget","preventDefault","../template","../utils","4","_arguments","arguments","defaultSettings","headers","notAllocatedLabel","cardTemplate","containerCssClass","headerContainerCssClass","schedulerContainerCssClass","taskPlaceholderCssClass","cellCssClass","resizableHandlerCssClass","resizableSliderCssClass","borderWidth","columnWidth","minColumnWidth","columnResizeEnabled","debug","enabled","5","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_settings","_items","_items2","Skeduler","extend","$headerContainer","$scheduleEl","resizeAllColumns","refresh","timeEnd","_this","assign","populate","_this2","getHeader","element","text","scheduleTimelineEl","scheduleBodyEl","gridColumnElement","j","timelineCell","toTimeString","availableIntervalsPlaceholder","intervals","appendAvailableInterval","prepend","updateColumnWidth","configureResizing","_this3","skedulerElResizableHandler","resizableSliderHeight","_","offsetLeft","clientWidth","onResizePointerDown","bind","placeholder","_this4","innerContent","getCardTopPosition","getCardHeight","skItemHightlightDiv","shiftDiv","attr","style","appendTasks","intervalStart","_this5","getItemDiv","op","difference","startX","columnNumber","toFixed","Resize","$currentGrip","gripIndex","$leftColumn","eq","leftWidth","onResizePointerMove","diff","replace","ceil","durationInMinutes","heightOfMinute","offsetTime","startTimeInt","./items","./settings","./template","./utils","6","funcs","result","regKeys","regFuncs","exec","hasOwnProperty","7","test","split"],"mappings":"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","file":"jquery.skeduler.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * jquery-skeduler - This is jQuery plugin which provider you simple scheduler with some items on OX and 24-hours timeline on OY.\n * @date Wed Aug 30 2017 00:17:47 GMT+1000 (+10)\n * @version v0.2.0-beta.0\n * @link \n * @license ISC\n */\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _skeduler = require('./skeduler');\n\nvar _skeduler2 = _interopRequireDefault(_skeduler);\n\n/**\n * Generate scheduler grid with task cards\n * options:\n * - headers: string[] - array of headers\n * - tasks: Task[] - array of tasks\n * - containerCssClass: string - css class of main container\n * - headerContainerCssClass: string - css class of header container\n * - schedulerContainerCssClass: string - css class of scheduler\n * - lineHeight - height of one half-hour cell in grid\n * - borderWidth - width of border of cell in grid\n */\n$.fn.skeduler = function (options) {\n  var $container = $(this);\n  var skeduler = new _skeduler2['default']($container, options);\n\n  return skeduler;\n};\n\n$.skeduler = _skeduler2['default'];\n\n},{\"./skeduler\":5}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _skeduler = require('./skeduler');\n\nvar _skeduler2 = _interopRequireDefault(_skeduler);\n\nvar _adapter = require('./adapter');\n\nvar _adapter2 = _interopRequireDefault(_adapter);\n\nexports['default'] = _skeduler2['default'];\nmodule.exports = exports['default'];\n\n},{\"./adapter\":1,\"./skeduler\":5}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _template = require('../template');\n\nvar _utils = require('../utils');\n\nvar div = function div(cssClass) {\n    return $('<div></div>').addClass(cssClass);\n};\n\nvar getItemDivs = function getItemDivs(settings) {\n    var $div = div(settings.itemsOptions.itemCardCssClass);\n    var items = settings.items;\n    var template = (0, _template.compileTemplate)(settings.itemsOptions.itemCardTemplate, {\n        time: function time(item) {\n            return item.interval ? item.interval.start + ' to ' + item.interval.end : '';\n        }\n    });\n\n    return items.map(function (item) {\n        return $div.clone().data('index', item.index).html(template(item));\n    });\n};\n\nvar findStartTime = function findStartTime(rowIndex, rowsPerHour, interval) {\n    rowIndex = Math.max(0, rowIndex);\n    var hoursFromTop = rowIndex / rowsPerHour;\n\n    return (0, _utils.toTime)(hoursFromTop + (0, _utils.parseTime)(interval.start));\n};\n\nvar populateSkedulerItems = function populateSkedulerItems(settings) {\n    var getItem = function getItem(index, isAssigned) {\n        return isAssigned ? settings.tasks.filter(function (t) {\n            return t.item.index === index;\n        })[0].item : settings.items.filter(function (i) {\n            return i.index === index;\n        })[0];\n    };\n\n    var $skedulerItemsEl = $(settings.itemsOptions.containerSelector).empty().addClass(settings.itemsOptions.itemsCssClass);\n    var $ownerDocument = $($skedulerItemsEl[0].ownerDocument);\n    var $shifts = $('.' + settings.availableIntervalPlaceholderCssClass + ' > div');\n\n    var $headerDiv = div().html('<h1 class=\"si-header\">' + settings.itemsOptions.title + '</h1>').appendTo($skedulerItemsEl);\n\n    var $skedulerItemsContainerEl = div('si-container');\n    var $items = getItemDivs(settings);\n    $items.forEach(function (el) {\n        $skedulerItemsContainerEl.append(el);\n    });\n    $skedulerItemsContainerEl.appendTo($skedulerItemsEl);\n\n    var operation = null;\n    var conflictedTasks = [];\n\n    var mouseUp = function mouseUp(event) {\n        if (operation == null) return;\n\n        var _operation = operation;\n        var $movingCard = _operation.$movingCard;\n        var $card = _operation.$card;\n        var startTime = _operation.startTime;\n\n        var $siEl = $('.' + settings.itemsOptions.highlightItemCss + ':visible'); // fixme\n\n        var index = parseInt($movingCard.data('index'));\n        var isAssigned = !!$movingCard.data('assigned');\n        var item = getItem(index, isAssigned);\n\n        if ($skedulerItemsContainerEl.data('selected') == 1) {\n            // Item need to be unassigned\n\n            if (isAssigned) {\n                settings.tasks = settings.tasks.filter(function (t) {\n                    return t.item.index != index;\n                });\n                settings.items.push(item);\n\n                settings.itemsOptions.onItemWillBeUnassigned && settings.itemsOptions.onItemWillBeUnassigned({ item: item });\n            }\n\n            $movingCard.detach().css({ top: 'auto', left: 'auto' }).height('auto').width('auto').data('assigned', 0).removeClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($skedulerItemsContainerEl);\n\n            $movingCard.on('mousedown', mouseDown);\n            $card.remove();\n\n            if (isAssigned) {\n                settings.itemsOptions.onItemDidUnassigned && settings.itemsOptions.onItemDidUnassigned({ item: item });\n            }\n        } else if ($siEl.length !== 0 && $siEl.data('match') == 1) {\n\n            // Item need to be assigned\n            var rowHeight = settings.lineHeight + 1;\n            var column = parseInt($siEl.parent().data('column'));\n            var offsetInMinutes = (0, _utils.parseTime)(startTime) * 60;\n\n            var interval = settings.data[column].availableIntervals[$siEl.parent().data('item-index')];\n\n            settings.itemsOptions.onItemWillBeAssigned && settings.itemsOptions.onItemWillBeAssigned({ item: item, interval: interval, offsetInMinutes: offsetInMinutes });\n            var $el = $movingCard.detach().css({ top: $siEl[0].offsetTop, left: 0 }).height($siEl[0].clientHeight).width('auto').data('assigned', 1).removeClass(settings.itemsOptions.itemCardCssClass + '-moving').addClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($siEl.parent());\n\n            $movingCard.on('mousedown', mouseDown);\n            $card.remove();\n\n            if (!isAssigned) {\n                settings.tasks.push({\n                    $el: $el,\n                    column: column,\n                    start: startTime,\n                    item: item\n                });\n            } else {\n                var task = settings.tasks.find(function (t) {\n                    return t.item.index === index;\n                });\n                task.start = startTime;\n                task.column = column;\n                task.$el = $el;\n            }\n\n            settings.itemsOptions.onItemDidAssigned && settings.itemsOptions.onItemDidAssigned({ item: item, interval: interval, offsetInMinutes: offsetInMinutes });\n        } else {\n            $movingCard.remove();\n            $card.show();\n\n            // Porcess conflictedTasks\n            $('.conflicted').removeClass('conflicted');\n            conflictedTasks = conflictedTasks.filter(function (p) {\n                return p.f != index && p.s != index;\n            });\n            conflictedTasks.forEach(function (p) {\n                var f = settings.tasks.find(function (t) {\n                    return t.item.index == p.f;\n                });\n                var s = settings.tasks.find(function (t) {\n                    return t.item.index == p.s;\n                });\n\n                if (f) {\n                    f.$el.addClass('conflicted');\n                }\n                if (s) {\n                    s.$el.addClass('conflicted');\n                }\n\n                console.log(index, p.f, p.s, f, s);\n\n                if (p.f == index || p.s == index) {\n                    $movingCard.addClass('conflicted');\n                }\n            });\n        }\n\n        $('.' + settings.itemsOptions.highlightItemCss).hide();\n        $skedulerItemsContainerEl.removeClass('highlighted');\n        $skedulerItemsContainerEl.data('selected', 0);\n\n        operation = null;\n        $ownerDocument.off('mousemove', mouseMove);\n        $ownerDocument.off('mouseup', mouseUp);\n    };\n\n    var mouseMove = function mouseMove(event) {\n        if (operation == null) return;\n\n        var _operation2 = operation;\n        var $movingCard = _operation2.$movingCard;\n        var offsetX = _operation2.offsetX;\n        var offsetY = _operation2.offsetY;\n\n        var newOffsetX = event.pageX - offsetX,\n            newOffsetY = event.pageY - offsetY;\n\n        $movingCard.css({\n            top: newOffsetY + 'px',\n            left: newOffsetX + 'px'\n        });\n\n        // Higlight shifts\n        var _window = $ownerDocument[0].defaultView;\n        var x = event.pageX;\n        var y = event.pageY - _window.scrollY;\n\n        var rowHeight = settings.lineHeight + 1;\n        var rowsPerHour = settings.rowsPerHour;\n\n        var index = parseInt($movingCard.data('index'));\n        var isAssigned = !!$movingCard.data('assigned');\n        var item = getItem(index, isAssigned);\n        var duration = item.duration;\n        var height = duration * (rowHeight * rowsPerHour / 60);\n\n        $skedulerItemsContainerEl.each(function () {\n            var $this = $(this);\n            var elementBounding = this.getBoundingClientRect();\n\n            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {\n                $this.addClass('highlighted');\n                $skedulerItemsContainerEl.data('selected', 1);\n            } else {\n                $this.removeClass('highlighted');\n                $skedulerItemsContainerEl.data('selected', 0);\n            }\n        });\n\n        $shifts.each(function () {\n            var $shift = $(this);\n            var elementBounding = this.getBoundingClientRect();\n            var $matchingAreaEl = $shift.find('.' + settings.itemsOptions.highlightItemCss);\n\n            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {\n\n                var offsetTop = y - elementBounding.top;\n                var rowIndex = Math.floor(offsetTop / rowHeight) - 1;\n                var _top = Math.min(Math.max(0, rowIndex * rowHeight), this.clientHeight - height);\n\n                var column = +$shift.data('column');\n                var itemIndex = +$shift.data('item-index');\n                var offsetInMinutes = 60 / settings.rowsPerHour * (_top / rowHeight); // <<== FIXME\n                var interval = settings.data[column].availableIntervals[itemIndex];\n                var matchResult = settings.itemsOptions.matchFunc(item, interval, offsetInMinutes);\n\n                operation.startTime = findStartTime(rowIndex, rowsPerHour, interval);\n\n                $matchingAreaEl.css({ top: _top }).css('background-color', matchResult.color).height(height).show();\n\n                $matchingAreaEl.data('match', +matchResult.match);\n            } else {\n                $matchingAreaEl.data('match', 0);\n                $matchingAreaEl.hide();\n            }\n        });\n\n        settings.tasks.filter(function (t) {\n            return t.item.index != index;\n        }).forEach(function (t) {\n            var taskStart = (0, _utils.parseTime)(t.start);\n            var movingTaskStart = (0, _utils.parseTime)(operation.startTime);\n            var $cardByIndex = t.$el;\n\n            // TODO: check column\n\n            // if moving card are conflict with some assigned card in the current shift\n            var conflictedTaskPair = conflictedTasks.find(function (p) {\n                return p.f == index && p.s == t.item.index || p.s == index && p.f == t.item.index;\n            });\n            if (!(taskStart >= movingTaskStart + item.duration / 60) && !(taskStart + t.item.duration / 60 <= movingTaskStart)) {\n\n                if (!conflictedTaskPair) {\n                    conflictedTasks.push({ f: index, s: t.item.index });\n                }\n            } else {\n                if (conflictedTaskPair) {\n                    conflictedTasks = conflictedTasks.filter(function (p) {\n                        return p.f != conflictedTaskPair.f && p.s != conflictedTaskPair.s;\n                    });\n                }\n            }\n        });\n\n        // Porcess conflictedTasks\n        $('.conflicted').removeClass('conflicted');\n        conflictedTasks.forEach(function (p) {\n            var f = settings.tasks.find(function (t) {\n                return t.item.index == p.f;\n            });\n            var s = settings.tasks.find(function (t) {\n                return t.item.index == p.s;\n            });\n\n            if (f) {\n                f.$el.addClass('conflicted');\n            }\n            if (s) {\n                s.$el.addClass('conflicted');\n            }\n\n            console.log(index, p.f, p.s, f, s);\n\n            if (p.f == index || p.s == index) {\n                $movingCard.addClass('conflicted');\n            }\n        });\n    };\n\n    var mouseDown = function mouseDown(event /*: MouseEvent */) {\n        if (event.which !== 1) {\n            return;\n        }\n\n        var $skedulerWrapper = $('.' + settings.skedulerWrapperCssClass);\n        var $card = $(event.currentTarget);\n\n        var $movingCard = $card.clone().data('index', $card.data('index')).data('assigned', $card.data('assigned')).addClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').width($card.width()).appendTo($skedulerWrapper);\n\n        //var bounce = $card[0].getBoundingClientRect();\n        // fixme ^^^\n        var offsetX = event.pageX - event.offsetX,\n            offsetY = event.pageY - event.offsetY;\n\n        $movingCard.css({\n            top: offsetY + 'px',\n            left: offsetX + 'px'\n        });\n\n        operation = {\n            $card: $card,\n            $movingCard: $movingCard,\n            offsetX: event.offsetX,\n            offsetY: event.offsetY\n        };\n\n        var index = parseInt($card.data('index'));\n        var isAssigned = !!$movingCard.data('assigned');\n        var item = getItem(index, isAssigned);\n\n        $card.hide();\n\n        $ownerDocument.on('mousemove', mouseMove);\n        $ownerDocument.on('mouseup', mouseUp);\n\n        event.preventDefault();\n    };\n\n    $('.' + settings.itemsOptions.itemCardCssClass).on('mousedown', mouseDown);\n};\n\nexports['default'] = populateSkedulerItems;\nmodule.exports = exports['default'];\n\n},{\"../template\":6,\"../utils\":7}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nvar _arguments = arguments;\nvar defaultSettings = {\n    // Data attributes\n    headers: null, // string[] - Array of column headers\n    tasks: [], // Task[] - Array of tasks. Required fields:\n    // id: number, startTime: number, duration: number, column: number\n\n    items: [], // Item[] - Array of not-assingned tasks\n\n    notAllocatedLabel: 'Not allocated',\n\n    // Card template - Inner content of task card.\n    // You're able to use ${key} inside template, where key is any property from task.\n    cardTemplate: '<div>${id}</div>',\n\n    // Css classes\n    skedulerWrapperCssClass: 'skeduler-wrapper',\n    containerCssClass: 'skeduler-container',\n    headerContainerCssClass: 'skeduler-headers',\n    schedulerContainerCssClass: 'skeduler-main',\n    taskPlaceholderCssClass: 'skeduler-task-placeholder',\n    availableIntervalPlaceholderCssClass: 'skeduler-interval-placeholder',\n    cellCssClass: 'skeduler-cell',\n    resizableHandlerCssClass: 'resizable-handler',\n    resizableSliderCssClass: 'resizable-slider',\n\n    lineHeight: 30, // height of one line in grid\n    borderWidth: 1, // width of board of grid cell\n    columnWidth: 200,\n    minColumnWidth: 100,\n\n    rowsPerHour: 2, // count of rows for one hour\n\n    columnResizeEnabled: true, // is columns resizable\n\n    debug: false,\n\n    itemsOptions: {\n        enabled: false,\n        itemsCssClass: 'skeduler-items',\n        highlightItemCss: 'si-highlight-item',\n        containerSelector: \"#skeduler-items\",\n        itemCardCssClass: 'si-card',\n        itemCardTemplate: '<div>${duration}</div>',\n        title: 'Items',\n        onItemWillBeAssigned: function onItemWillBeAssigned() {\n            console.log(_arguments);\n        },\n        onItemDidAssigned: function onItemDidAssigned() {\n            console.log(_arguments);\n        },\n        onItemWillBeUnassigned: function onItemWillBeUnassigned() {\n            console.log(_arguments);\n        },\n        onItemDidUnassigned: function onItemDidUnassigned() {\n            console.log(_arguments);\n        },\n        matchFunc: function matchFunc() {\n            return { match: true };\n        }\n    }\n};\n\nexports.defaultSettings = defaultSettings;\n\n},{}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _settings = require('./settings');\n\nvar _items = require('./items');\n\nvar _items2 = _interopRequireDefault(_items);\n\nvar _template = require('./template');\n\nvar _utils = require('./utils');\n\nvar div = function div(cssClass) {\n    return $('<div></div>').addClass(cssClass);\n};\n\nvar Skeduler = (function () {\n    function Skeduler($container, options) {\n        _classCallCheck(this, Skeduler);\n\n        this.settings = $.extend(true, _settings.defaultSettings, options);\n        this.$container = $container;\n        this.$ownerDocument = $($container[0].ownerDocument);\n        this.$headerContainer = null;\n        this.$scheduleEl = null;\n        this.operation = null;\n        this.resizeAllColumns = true;\n\n        if (this.settings.debug) {\n            console.time('skeduler');\n        }\n\n        this.refresh();\n\n        if (this.settings.debug) {\n            console.timeEnd('skeduler');\n        }\n    }\n\n    _createClass(Skeduler, [{\n        key: 'setRowsPerHour',\n        value: function setRowsPerHour(rowsPerHour) {\n            this.settings.rowsPerHour = rowsPerHour;\n            this.refresh();\n        }\n    }, {\n        key: 'setResizeAllColumns',\n        value: function setResizeAllColumns(resizeAllColumns) {\n            this.resizeAllColumns = resizeAllColumns;\n        }\n    }, {\n        key: 'refresh',\n        value: function refresh() {\n            var _this = this;\n\n            this.settings.items = this.settings.items && this.settings.items.map(function (item, index) {\n                return Object.assign({}, { index: index }, item);\n            }) || [];\n            this.settings.tasks = this.settings.tasks && this.settings.tasks.map(function (task, index) {\n                task.item = Object.assign({}, { index: index + _this.settings.items.length }, task.item);\n                return task;\n            }) || [];\n\n            this.populate();\n            if (this.settings.itemsOptions.enabled) {\n                (0, _items2['default'])(this.settings);\n            }\n        }\n    }, {\n        key: 'populate',\n        value: function populate() {\n            var _this2 = this;\n\n            this.$container.empty();\n            this.$container.addClass(this.settings.containerCssClass);\n\n            var headers = this.settings.headers ? this.settings.headers : this.settings.data.map(this.settings.getHeader);\n\n            // Add headers\n            this.$headerContainer = div(this.settings.headerContainerCssClass);\n            headers.forEach(function (element) {\n                div().text(element).appendTo(_this2.$headerContainer);\n            }, this);\n            this.$container.append(this.$headerContainer);\n\n            // Add scheduler\n            this.$scheduleEl = div(this.settings.schedulerContainerCssClass);\n            var scheduleTimelineEl = div(this.settings.schedulerContainerCssClass + '-timeline');\n            var scheduleBodyEl = div(this.settings.schedulerContainerCssClass + '-body');\n\n            var gridColumnElement = div();\n\n            for (var i = 0; i < 24; i++) {\n                // Populate timeline\n                for (var j = 0; j < this.settings.rowsPerHour; j++) {\n                    var timelineCell = div().height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? \"last\" : \"\");\n\n                    if (j == 0) {\n                        timelineCell = timelineCell.css(\"line-height\", this.settings.lineHeight + 'px').text(j == 0 ? this.toTimeString(i) : \"\");\n                    }\n                    timelineCell.appendTo(scheduleTimelineEl);\n\n                    div(this.settings.cellCssClass).height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? \"last\" : \"\").appendTo(gridColumnElement);\n                }\n            }\n\n            // Populate grid\n            for (var j = 0; j < headers.length; j++) {\n                var el = gridColumnElement.clone();\n\n                // fixme [availableIntervals must not use index]\n                var availableIntervalsPlaceholder = div(this.settings.availableIntervalPlaceholderCssClass);\n                var intervals = this.settings.data[j].availableIntervals;\n                this.appendAvailableInterval(availableIntervalsPlaceholder, intervals, j);\n\n                el.prepend(availableIntervalsPlaceholder);\n                el.appendTo(scheduleBodyEl);\n\n                this.updateColumnWidth(j, this.settings.columnWidth);\n            }\n\n            this.$scheduleEl.append(scheduleTimelineEl);\n            this.$scheduleEl.append(scheduleBodyEl);\n\n            this.$container.append(this.$scheduleEl);\n\n            // Set default width for columns\n            for (var j = 0; j < headers.length; j++) {\n                this.updateColumnWidth(j, this.settings.columnWidth);\n            }\n\n            // Configure resizing\n            if (this.settings.columnResizeEnabled) {\n                this.configureResizing();\n            }\n        }\n    }, {\n        key: 'tasks',\n        value: function tasks() {\n            return this.settings.tasks;\n        }\n    }, {\n        key: 'configureResizing',\n        value: function configureResizing() {\n            var _this3 = this;\n\n            var skedulerElResizableHandler = div(this.settings.resizableHandlerCssClass);\n\n            this.$container.prepend(skedulerElResizableHandler);\n\n            skedulerElResizableHandler.width(this.$container.width());\n\n            var resizableSliderHeight = this.$scheduleEl.height() + this.$headerContainer.height();\n            var index = 0;\n            this.$headerContainer.find('div').each(function (_, el) {\n                div(_this3.settings.resizableSliderCssClass).css('left', el.offsetLeft + el.clientWidth).height(resizableSliderHeight).data('column-id', index++).appendTo(skedulerElResizableHandler);\n            });\n\n            skedulerElResizableHandler.on('mousedown', '.' + this.settings.resizableSliderCssClass, this.onResizePointerDown.bind(this));\n        }\n    }, {\n        key: 'appendAvailableInterval',\n        value: function appendAvailableInterval(placeholder, intervals, column) {\n            var _this4 = this;\n\n            intervals.forEach(function (interval, index) {\n                var innerContent = div().text(_this4.settings.notAllocatedLabel);\n                var top = _this4.getCardTopPosition(interval.start) + 2;\n                var duration = (0, _utils.parseTime)(interval.end) - (0, _utils.parseTime)(interval.start);\n                var height = _this4.getCardHeight(duration) - 5;\n\n                var skItemHightlightDiv = div(_this4.settings.itemsOptions.highlightItemCss).hide();\n\n                var shiftDiv = div().attr({\n                    style: 'top: ' + top + 'px; height: ' + height + 'px'\n                });\n\n                shiftDiv.data('column', column).data('item-index', index).append(innerContent).append(skItemHightlightDiv).appendTo(placeholder);\n\n                _this4.appendTasks(shiftDiv, interval.start, _this4.settings.tasks.filter(function (t) {\n                    return t.column == column;\n                }));\n                // TODO: ^^^ filter by shift interval too\n            }, this);\n        }\n\n        /** \n         * Generate task cards\n         */\n    }, {\n        key: 'appendTasks',\n        value: function appendTasks(placeholder, intervalStart, tasks) {\n            var _this5 = this;\n\n            tasks.forEach(function (task) {\n                var top = _this5.getCardTopPosition(task.start, intervalStart);\n                var height = _this5.getCardHeight(task.item.duration / 60);\n\n                task.$el = _this5.getItemDiv(task.item).attr({\n                    style: 'top: ' + top + 'px; height: ' + height + 'px'\n                }).addClass('' + _this5.settings.itemsOptions.itemCardCssClass).addClass(_this5.settings.itemsOptions.itemCardCssClass + '-pinned').width('auto').data('index', task.item.index).data('assigned', 1).appendTo(placeholder);\n            }, this);\n        }\n    }, {\n        key: 'onResizePointerUp',\n        value: function onResizePointerUp(event) {\n            var op = this.operation;\n            if (!this.operation) {\n                return;\n            }\n\n            this.$ownerDocument.off('mouseup');\n            this.$ownerDocument.off('mousemove');\n\n            this.operation = null;\n        }\n    }, {\n        key: 'onResizePointerMove',\n        value: function onResizePointerMove(event) {\n            var op = this.operation;\n            if (!this.operation) {\n                return;\n            }\n\n            // Determine the delta change between start and new mouse position, as a percentage of the table width\n            var difference = event.pageX - op.startX; // / this.$scheduleEl.width() * 100;\n            if (difference === 0) {\n                return;\n            }\n\n            var columnNumber = op.columnNumber;\n            var width = op.width + difference;\n            if (this.resizeAllColumns) {\n                for (var i = 0; i < this.settings.data.length; i++) {\n                    this.updateColumnWidth(i, width.toFixed(2));\n                }\n            } else {\n                this.updateColumnWidth(columnNumber, width.toFixed(2));\n            }\n        }\n    }, {\n        key: 'onResizePointerDown',\n        value: function onResizePointerDown(event) {\n            // Only applies to left-click dragging\n            if (event.which !== 1) {\n                return;\n            }\n\n            // If a previous this.operation is defined, we missed the last mouseup.\n            // Probably gobbled up by user mousing out the window then releasing.\n            // We'll simulate a pointerup here prior to it\n            if (this.operation) {\n                this.Resize(event);\n            }\n\n            var $currentGrip = $(event.currentTarget);\n            var columnNumber = $currentGrip.data('column-id');\n\n            var gripIndex = $currentGrip.index();\n            var $leftColumn = this.$headerContainer.find('div').eq(gripIndex);\n\n            var leftWidth = $leftColumn[0].clientWidth;\n\n            this.operation = {\n                columnNumber: columnNumber,\n                startX: event.pageX,\n                width: leftWidth\n            };\n\n            this.$ownerDocument.on('mousemove', this.onResizePointerMove.bind(this));\n            this.$ownerDocument.on('mouseup', this.Resize.bind(this));\n\n            event.preventDefault();\n        }\n    }, {\n        key: 'updateColumnWidth',\n        value: function updateColumnWidth(columnNumber, width) {\n            width = Math.max(width, this.settings.minColumnWidth);\n            $('.' + this.settings.headerContainerCssClass + ' > div:eq(' + columnNumber + ')').css('flex-basis', width + 'px');\n\n            var column = $('.' + this.settings.schedulerContainerCssClass + '-body > div:eq(' + columnNumber + ') > .' + this.settings.cellCssClass);\n            var diff = column.width() - width;\n            column.width(width);\n\n            $('.' + this.settings.resizableHandlerCssClass + ' > div').each(function (index, el) {\n                if (index >= columnNumber) {\n                    var $el = $(el);\n                    var left = parseInt($el.css('left').replace('px', ''));\n                    $el.css('left', left - diff);\n                }\n            });\n        }\n    }, {\n        key: 'getItemDiv',\n        value: function getItemDiv(item) {\n            var $div = div(this.settings.itemsOptions.itemCardCssClass);\n            var template = (0, _template.compileTemplate)(this.settings.itemsOptions.itemCardTemplate, {\n                time: function time(item) {\n                    return item.interval ? item.interval.start + ' to ' + item.interval.end : '';\n                }\n            });\n\n            return div().html(template(item));\n        }\n\n        /**\n        * Convert double value of hours to zero-preposited string with 30 or 00 value of minutes\n        */\n    }, {\n        key: 'toTimeString',\n        value: function toTimeString(value) {\n            return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');\n        }\n\n        /**\n         * Return height of task card based on duration of the task\n         * duration - in hours\n         */\n    }, {\n        key: 'getCardHeight',\n        value: function getCardHeight(duration) {\n            var durationInMinutes = duration * 60;\n            var heightOfMinute = (this.settings.lineHeight + this.settings.borderWidth) * this.settings.rowsPerHour / 60;\n            return Math.ceil(durationInMinutes * heightOfMinute);\n        }\n\n        /**\n         * Return top offset of task card based on start time of the task\n         * startTime - in hours\n         */\n    }, {\n        key: 'getCardTopPosition',\n        value: function getCardTopPosition(startTime, offsetTime) {\n            var startTimeInt = (0, _utils.parseTime)(startTime);\n            if (offsetTime) {\n                startTimeInt -= (0, _utils.parseTime)(offsetTime);\n            }\n            return (this.settings.lineHeight + this.settings.borderWidth) * (startTimeInt * this.settings.rowsPerHour);\n        }\n    }]);\n\n    return Skeduler;\n})();\n\nexports['default'] = Skeduler;\nmodule.exports = exports['default'];\n\n},{\"./items\":3,\"./settings\":4,\"./template\":6,\"./utils\":7}],6:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar compileTemplate = function compileTemplate(template, funcs) {\n    return function (item) {\n        var result = template;\n        var regKeys = /\\$\\{(\\w+)\\}/g;\n        var regFuncs = /\\$\\{(\\w+)\\(\\)\\}/g;\n\n        var match = 1;\n        while (true) {\n            match = regKeys.exec(template);\n            if (!match) break;\n\n            var key = match[1];\n            if (item.hasOwnProperty(key)) {\n                result = result.replace(match[0], item[key]);\n            }\n        }\n\n        while (funcs) {\n            match = regFuncs.exec(template);\n            if (!match) break;\n\n            var key = match[1];\n            if (funcs.hasOwnProperty(key)) {\n                result = result.replace(match[0], funcs[key](item));\n            }\n        }\n\n        return result;\n    };\n};\n\nexports[\"default\"] = { compileTemplate: compileTemplate };\nmodule.exports = exports[\"default\"];\n\n},{}],7:[function(require,module,exports){\n/**\n * Parse time string and present it in hours (ex. '13:30' => 13.5)\n * @param {*string} time - time in format like '13:50', '11:00', '14'\n */\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n    value: true\n});\nexports.parseTime = parseTime;\nexports.toTime = toTime;\n\nfunction parseTime(time) {\n    return (/\\d{1,2}\\:\\d{2}/.test(time) ? parseInt(time.split(':')[0]) + parseInt(time.split(':')[1]) / 60 : parseInt(time)\n    );\n}\n\nfunction toTime(value) {\n    // TODO: vvv fix me\n    return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');\n}\n\n},{}]},{},[2])\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import Skeduler from './skeduler';\n\n/**\n * Generate scheduler grid with task cards\n * options:\n * - headers: string[] - array of headers\n * - tasks: Task[] - array of tasks\n * - containerCssClass: string - css class of main container\n * - headerContainerCssClass: string - css class of header container\n * - schedulerContainerCssClass: string - css class of scheduler\n * - lineHeight - height of one half-hour cell in grid\n * - borderWidth - width of border of cell in grid\n */\n$.fn.skeduler = function(options) {\n    let $container = $(this);\n    var skeduler = new Skeduler($container, options);\n\n    return skeduler;\n};\n\n$.skeduler = Skeduler;","import Skeduler from './skeduler';\nimport adapter from './adapter';\n\nexport default Skeduler;","import { compileTemplate } from '../template';\nimport { parseTime, toTime } from '../utils';\n\nconst div = (cssClass) => $('<div></div>').addClass(cssClass);\n\nconst getItemDivs = (settings) => {\n    const $div = div(settings.itemsOptions.itemCardCssClass);\n    const items = settings.items;\n    const template = compileTemplate(settings.itemsOptions.itemCardTemplate, {\n        time: (item) => item.interval ? `${item.interval.start} to ${item.interval.end}` : ''\n    });\n\n    return items.map((item) => $div.clone()\n        .data('index', item.index)\n        .html(template(item))\n    );\n}\n\nconst findStartTime = (rowIndex, rowsPerHour, interval) => {\n    rowIndex = Math.max(0, rowIndex);\n    const hoursFromTop = rowIndex / rowsPerHour;\n\n    return toTime(hoursFromTop + parseTime(interval.start));\n}\n\nconst populateSkedulerItems = (settings) => {\n    const getItem = (index, isAssigned) => {\n        return isAssigned\n            ? settings.tasks.filter(t => t.item.index === index)[0].item\n            : settings.items.filter(i => i.index === index)[0];\n    }\n\n    const $skedulerItemsEl = $(settings.itemsOptions.containerSelector)\n        .empty()\n        .addClass(settings.itemsOptions.itemsCssClass);\n    const $ownerDocument = $($skedulerItemsEl[0].ownerDocument);\n    const $shifts = $('.' + settings.availableIntervalPlaceholderCssClass + ' > div');\n\n    const $headerDiv = div()\n        .html('<h1 class=\"si-header\">' + settings.itemsOptions.title + '</h1>')\n        .appendTo($skedulerItemsEl);\n\n    const $skedulerItemsContainerEl = div('si-container');\n    var $items = getItemDivs(settings);\n    $items.forEach(el => {\n        $skedulerItemsContainerEl.append(el);\n    });\n    $skedulerItemsContainerEl.appendTo($skedulerItemsEl);\n\n    let operation = null;\n    let conflictedTasks = [];\n\n    const mouseUp = (event) => {\n        if (operation == null) return;\n\n        const { $movingCard, $card, startTime } = operation;\n\n        const $siEl = $('.' + settings.itemsOptions.highlightItemCss + ':visible'); // fixme\n\n        const index = parseInt($movingCard.data('index'));\n        const isAssigned = !!$movingCard.data('assigned');\n        const item = getItem(index, isAssigned);\n\n        if ($skedulerItemsContainerEl.data('selected') == 1) {\n            // Item need to be unassigned\n\n            if (isAssigned) {\n                settings.tasks = settings.tasks.filter(t => t.item.index != index);\n                settings.items.push(item);\n\n                settings.itemsOptions.onItemWillBeUnassigned && settings.itemsOptions.onItemWillBeUnassigned({ item });\n            }\n\n            $movingCard\n                .detach()\n                .css({ top: 'auto', left: 'auto' })\n                .height('auto')\n                .width('auto')\n                .data('assigned', 0)\n                .removeClass(`${settings.itemsOptions.itemCardCssClass}-moving`)\n                .removeClass(`${settings.itemsOptions.itemCardCssClass}-pinned`)\n                .appendTo($skedulerItemsContainerEl);\n\n            $movingCard.on('mousedown', mouseDown);\n            $card.remove();\n\n            if (isAssigned) {\n                settings.itemsOptions.onItemDidUnassigned && settings.itemsOptions.onItemDidUnassigned({ item });\n            }\n        } else if ($siEl.length !== 0 && $siEl.data('match') == 1) {\n\n            // Item need to be assigned\n            const rowHeight = settings.lineHeight + 1;\n            const column = parseInt($siEl.parent().data('column'));\n            let offsetInMinutes = parseTime(startTime) * 60;\n\n            const interval = settings.data[column].availableIntervals[$siEl.parent().data('item-index')];\n\n            settings.itemsOptions.onItemWillBeAssigned && settings.itemsOptions.onItemWillBeAssigned({ item, interval, offsetInMinutes });\n            const $el = $movingCard\n                .detach()\n                .css({ top: $siEl[0].offsetTop, left: 0 })\n                .height($siEl[0].clientHeight)\n                .width('auto')\n                .data('assigned', 1)\n                .removeClass(`${settings.itemsOptions.itemCardCssClass}-moving`)\n                .addClass(`${settings.itemsOptions.itemCardCssClass}-pinned`)\n                .appendTo($siEl.parent());\n\n            $movingCard.on('mousedown', mouseDown);\n            $card.remove();\n\n            if (!isAssigned) {\n                settings.tasks.push({\n                    $el,\n                    column,\n                    start: startTime,\n                    item\n                });\n            } else {\n                let task = settings.tasks.find(t => t.item.index === index);\n                task.start = startTime;\n                task.column = column;\n                task.$el = $el;\n            }\n\n            settings.itemsOptions.onItemDidAssigned && settings.itemsOptions.onItemDidAssigned({ item, interval, offsetInMinutes });\n        } else {\n            $movingCard.remove();\n            $card.show();\n\n            // Porcess conflictedTasks\n            $('.conflicted').removeClass('conflicted');\n            conflictedTasks = conflictedTasks.filter(p => p.f != index && p.s != index);\n            conflictedTasks.forEach(p => {\n                let f = settings.tasks.find(t => t.item.index == p.f);\n                let s = settings.tasks.find(t => t.item.index == p.s);\n\n                if (f) {\n                    f.$el.addClass('conflicted');\n                }\n                if (s) {\n                    s.$el.addClass('conflicted');\n                }\n\n                console.log(index, p.f, p.s, f, s);\n\n                if (p.f == index || p.s == index) {\n                    $movingCard.addClass('conflicted');\n                }\n            });\n        }\n\n        $('.' + settings.itemsOptions.highlightItemCss).hide();\n        $skedulerItemsContainerEl.removeClass('highlighted');\n        $skedulerItemsContainerEl.data('selected', 0);\n\n        operation = null;\n        $ownerDocument.off('mousemove', mouseMove);\n        $ownerDocument.off('mouseup', mouseUp);\n    };\n\n    const mouseMove = (event) => {\n        if (operation == null) return;\n\n        const { $movingCard, offsetX, offsetY } = operation;\n\n        const newOffsetX = event.pageX - offsetX,\n            newOffsetY = event.pageY - offsetY;\n\n        $movingCard.css({\n            top: newOffsetY + 'px',\n            left: newOffsetX + 'px'\n        });\n\n        // Higlight shifts\n        const _window = $ownerDocument[0].defaultView;\n        const x = event.pageX;\n        const y = event.pageY - _window.scrollY;\n\n        const rowHeight = settings.lineHeight + 1;\n        const rowsPerHour = settings.rowsPerHour;\n\n        const index = parseInt($movingCard.data('index'));\n        const isAssigned = !!$movingCard.data('assigned');\n        const item = getItem(index, isAssigned);\n        const duration = item.duration;\n        const height = duration * (rowHeight * rowsPerHour / 60);\n\n        $skedulerItemsContainerEl.each(function () {\n            const $this = $(this);\n            const elementBounding = this.getBoundingClientRect();\n\n            if (x > elementBounding.left && x < elementBounding.right &&\n                y > elementBounding.top && y < elementBounding.bottom) {\n                $this.addClass('highlighted');\n                $skedulerItemsContainerEl.data('selected', 1);\n            } else {\n                $this.removeClass('highlighted');\n                $skedulerItemsContainerEl.data('selected', 0);\n            }\n        });\n\n        $shifts.each(function () {\n            const $shift = $(this);\n            const elementBounding = this.getBoundingClientRect();\n            const $matchingAreaEl = $shift.find('.' + settings.itemsOptions.highlightItemCss);\n\n            if (x > elementBounding.left && x < elementBounding.right &&\n                y > elementBounding.top && y < elementBounding.bottom) {\n\n                const offsetTop = y - elementBounding.top;\n                const rowIndex = (Math.floor(offsetTop / rowHeight) - 1);\n                const top = Math.min(\n                    Math.max(0, rowIndex * rowHeight),\n                    this.clientHeight - height\n                );\n\n                const column = +$shift.data('column');\n                const itemIndex = +$shift.data('item-index');\n                const offsetInMinutes = 60 / settings.rowsPerHour * (top / rowHeight); // <<== FIXME\n                const interval = settings.data[column].availableIntervals[itemIndex];\n                const matchResult = settings.itemsOptions.matchFunc(item, interval, offsetInMinutes);\n\n                operation.startTime = findStartTime(rowIndex, rowsPerHour, interval);\n\n                $matchingAreaEl.css({ top: top })\n                    .css('background-color', matchResult.color)\n                    .height(height)\n                    .show();\n\n                $matchingAreaEl.data('match', +matchResult.match);\n            } else {\n                $matchingAreaEl.data('match', 0);\n                $matchingAreaEl.hide();\n            }\n        });\n\n        settings.tasks.filter(t => t.item.index != index).forEach(t => {\n            const taskStart = parseTime(t.start);\n            const movingTaskStart = parseTime(operation.startTime);\n            const $cardByIndex = t.$el;\n\n            // TODO: check column\n\n            // if moving card are conflict with some assigned card in the current shift\n            let conflictedTaskPair = conflictedTasks.find(p =>\n                p.f == index && p.s == t.item.index || p.s == index && p.f == t.item.index);\n            if (!(taskStart >= movingTaskStart + item.duration / 60)\n                && !(taskStart + t.item.duration / 60 <= movingTaskStart)) {\n\n                if (!conflictedTaskPair) {\n                    conflictedTasks.push({ f: index, s: t.item.index });\n                }\n            } else {\n                if (conflictedTaskPair) {\n                    conflictedTasks = conflictedTasks.filter(p => p.f != conflictedTaskPair.f && p.s != conflictedTaskPair.s);\n                }\n            }\n        });\n\n        // Porcess conflictedTasks\n        $('.conflicted').removeClass('conflicted');\n        conflictedTasks.forEach(p => {\n            let f = settings.tasks.find(t => t.item.index == p.f);\n            let s = settings.tasks.find(t => t.item.index == p.s);\n\n            if (f) {\n                f.$el.addClass('conflicted');\n            }\n            if (s) {\n                s.$el.addClass('conflicted');\n            }\n\n            console.log(index, p.f, p.s, f, s);\n\n            if (p.f == index || p.s == index) {\n                $movingCard.addClass('conflicted');\n            }\n        });\n    };\n\n    const mouseDown = (event /*: MouseEvent */) => {\n        if (event.which !== 1) { return; }\n\n        const $skedulerWrapper = $(`.${settings.skedulerWrapperCssClass}`);\n        const $card = $(event.currentTarget);\n\n        const $movingCard =\n            $card.clone()\n                .data('index', $card.data('index'))\n                .data('assigned', $card.data('assigned'))\n                .addClass(`${settings.itemsOptions.itemCardCssClass}-moving`)\n                .removeClass(`${settings.itemsOptions.itemCardCssClass}-pinned`)\n                .width($card.width())\n                .appendTo($skedulerWrapper);\n\n        //var bounce = $card[0].getBoundingClientRect();\n        // fixme ^^^\n        const offsetX = event.pageX - event.offsetX,\n            offsetY = event.pageY - event.offsetY;\n\n        $movingCard.css({\n            top: offsetY + 'px',\n            left: offsetX + 'px'\n        });\n\n        operation = {\n            $card,\n            $movingCard,\n            offsetX: event.offsetX,\n            offsetY: event.offsetY\n        };\n\n        const index = parseInt($card.data('index'));\n        const isAssigned = !!$movingCard.data('assigned');\n        const item = getItem(index, isAssigned);\n\n        $card.hide();\n\n        $ownerDocument.on('mousemove', mouseMove);\n        $ownerDocument.on('mouseup', mouseUp);\n\n        event.preventDefault();\n    };\n\n    $('.' + settings.itemsOptions.itemCardCssClass).on('mousedown', mouseDown);\n}\n\nexport default populateSkedulerItems;","const defaultSettings = {\n    // Data attributes\n    headers: null,  // string[] - Array of column headers\n    tasks: [],      // Task[] - Array of tasks. Required fields: \n                    // id: number, startTime: number, duration: number, column: number\n\n    items: [],      // Item[] - Array of not-assingned tasks\n\n    notAllocatedLabel: 'Not allocated',\n\n    // Card template - Inner content of task card. \n    // You're able to use ${key} inside template, where key is any property from task.\n    cardTemplate: '<div>${id}</div>',\n\n    // Css classes\n    skedulerWrapperCssClass: 'skeduler-wrapper',\n    containerCssClass: 'skeduler-container',\n    headerContainerCssClass: 'skeduler-headers',\n    schedulerContainerCssClass: 'skeduler-main',\n    taskPlaceholderCssClass: 'skeduler-task-placeholder',\n    availableIntervalPlaceholderCssClass: 'skeduler-interval-placeholder',\n    cellCssClass: 'skeduler-cell',\n    resizableHandlerCssClass: 'resizable-handler',\n    resizableSliderCssClass: 'resizable-slider',\n\n    lineHeight: 30,         // height of one line in grid\n    borderWidth: 1,         // width of board of grid cell\n    columnWidth: 200,\n    minColumnWidth: 100,\n\n    rowsPerHour: 2,         // count of rows for one hour\n\n    columnResizeEnabled: true, // is columns resizable\n\n    debug: false,\n\n    itemsOptions: {\n        enabled: false,\n        itemsCssClass: 'skeduler-items',\n        highlightItemCss: 'si-highlight-item',\n        containerSelector: \"#skeduler-items\",\n        itemCardCssClass: 'si-card',\n        itemCardTemplate: '<div>${duration}</div>',\n        title: 'Items',\n        onItemWillBeAssigned: () => { console.log(arguments); },\n        onItemDidAssigned: () => { console.log(arguments); },\n        onItemWillBeUnassigned: () => { console.log(arguments); },\n        onItemDidUnassigned: () => { console.log(arguments); },\n        matchFunc: () => { return { match: true } }\n    }\n};\n\nexport { defaultSettings };","import { defaultSettings } from './settings';\nimport populateSkedulerItems from './items';\nimport { compileTemplate } from './template';\nimport { parseTime } from './utils';\n\nconst div = (cssClass) => $('<div></div>').addClass(cssClass);\n\nclass Skeduler {\n    constructor($container, options) {\n        this.settings = $.extend(true, defaultSettings, options);\n        this.$container = $container;\n        this.$ownerDocument = $($container[0].ownerDocument);\n        this.$headerContainer = null;\n        this.$scheduleEl = null\n        this.operation = null;\n        this.resizeAllColumns = true;\n\n        if (this.settings.debug) {\n            console.time('skeduler');\n        }\n\n        this.refresh();\n\n        if (this.settings.debug) {\n            console.timeEnd('skeduler');\n        }\n    }\n\n    setRowsPerHour(rowsPerHour) {\n        this.settings.rowsPerHour = rowsPerHour;\n        this.refresh();\n    }\n\n    setResizeAllColumns(resizeAllColumns) {\n        this.resizeAllColumns = resizeAllColumns;\n    }\n\n    refresh() {\n        this.settings.items = this.settings.items && this.settings.items.map(\n            (item, index) => Object.assign({}, {index}, item)\n        ) || [];\n        this.settings.tasks = this.settings.tasks && this.settings.tasks.map(\n            (task, index) => {\n                task.item = Object.assign({}, {index: index + this.settings.items.length}, task.item);\n                return task;\n            }\n        ) || [];\n\n        this.populate();\n        if (this.settings.itemsOptions.enabled) {\n            populateSkedulerItems(this.settings);\n        }\n    }\n\n    populate() {\n        this.$container.empty();\n        this.$container.addClass(this.settings.containerCssClass);\n\n        const headers = this.settings.headers ?\n            this.settings.headers :\n            this.settings.data.map(this.settings.getHeader);\n\n        // Add headers\n        this.$headerContainer = div(this.settings.headerContainerCssClass);\n        headers.forEach((element) => {\n            div().text(element)\n                .appendTo(this.$headerContainer);\n        }, this);\n        this.$container.append(this.$headerContainer);\n\n        // Add scheduler\n        this.$scheduleEl = div(this.settings.schedulerContainerCssClass);\n        const scheduleTimelineEl = div(this.settings.schedulerContainerCssClass + '-timeline');\n        const scheduleBodyEl = div(this.settings.schedulerContainerCssClass + '-body');\n\n        const gridColumnElement = div();\n\n        for (let i = 0; i < 24; i++) {\n            // Populate timeline\n            for (let j = 0; j < this.settings.rowsPerHour; j++) {\n                let timelineCell = div()\n                    .height(this.settings.lineHeight)\n                    .addClass(j == this.settings.rowsPerHour - 1 ? \"last\" : \"\");\n\n                if (j == 0) {\n                    timelineCell = timelineCell\n                        .css(\"line-height\", this.settings.lineHeight + 'px')\n                        .text(j == 0 ? this.toTimeString(i) : \"\");\n                }\n                timelineCell.appendTo(scheduleTimelineEl);\n\n                div(this.settings.cellCssClass)\n                    .height(this.settings.lineHeight)\n                    .addClass(j == this.settings.rowsPerHour - 1 ? \"last\" : \"\")\n                    .appendTo(gridColumnElement);\n            }\n        }\n\n        // Populate grid\n        for (let j = 0; j < headers.length; j++) {\n            const el = gridColumnElement.clone();\n\n            // fixme [availableIntervals must not use index]\n            const availableIntervalsPlaceholder = div(this.settings.availableIntervalPlaceholderCssClass);\n            const intervals = this.settings.data[j].availableIntervals;\n            this.appendAvailableInterval(availableIntervalsPlaceholder, intervals, j);\n\n            el.prepend(availableIntervalsPlaceholder);\n            el.appendTo(scheduleBodyEl);\n\n            this.updateColumnWidth(j, this.settings.columnWidth);\n        }\n\n        this.$scheduleEl.append(scheduleTimelineEl);\n        this.$scheduleEl.append(scheduleBodyEl);\n\n        this.$container.append(this.$scheduleEl);\n\n        // Set default width for columns\n        for (let j = 0; j < headers.length; j++) {\n            this.updateColumnWidth(j, this.settings.columnWidth);\n        }\n\n        // Configure resizing\n        if (this.settings.columnResizeEnabled) {\n            this.configureResizing();\n        }\n    }\n\n    tasks() {\n        return this.settings.tasks;\n    }\n\n    configureResizing() {\n        const skedulerElResizableHandler = div(this.settings.resizableHandlerCssClass);\n\n        this.$container.prepend(skedulerElResizableHandler);\n\n        skedulerElResizableHandler.width(this.$container.width());\n\n        const resizableSliderHeight = this.$scheduleEl.height() + this.$headerContainer.height();\n        let index = 0;\n        this.$headerContainer.find('div').each((_, el) => {\n            div(this.settings.resizableSliderCssClass)\n                .css('left', el.offsetLeft + el.clientWidth)\n                .height(resizableSliderHeight)\n                .data('column-id', index++)\n                .appendTo(skedulerElResizableHandler)\n        });\n\n        skedulerElResizableHandler.on('mousedown', '.' + this.settings.resizableSliderCssClass, this.onResizePointerDown.bind(this));\n    }\n\n    appendAvailableInterval(placeholder, intervals, column) {\n        intervals.forEach((interval, index) => {\n            const innerContent = div().text(this.settings.notAllocatedLabel);\n            const top = this.getCardTopPosition(interval.start) + 2;\n            const duration = parseTime(interval.end) - parseTime(interval.start);\n            const height = this.getCardHeight(duration) - 5;\n\n            const skItemHightlightDiv = div(this.settings.itemsOptions.highlightItemCss).hide();\n\n            const shiftDiv = div()\n                .attr({\n                    style: 'top: ' + top + 'px; height: ' + height + 'px'\n                });\n\n            shiftDiv\n                .data('column', column)\n                .data('item-index', index)\n                .append(innerContent)\n                .append(skItemHightlightDiv)\n                .appendTo(placeholder);\n\n            this.appendTasks(\n                shiftDiv,\n                interval.start,\n                this.settings.tasks.filter(t => t.column == column));\n            // TODO: ^^^ filter by shift interval too\n\n        }, this);\n    }\n\n    /** \n     * Generate task cards\n     */\n    appendTasks(placeholder, intervalStart, tasks) {\n        tasks.forEach((task) => {\n            let top = this.getCardTopPosition(task.start, intervalStart);\n            let height = this.getCardHeight(task.item.duration / 60);\n\n            task.$el = this.getItemDiv(task.item)\n                .attr({\n                    style: 'top: ' + top + 'px; height: ' + height + 'px'\n                })\n                .addClass(`${this.settings.itemsOptions.itemCardCssClass}`)\n                .addClass(`${this.settings.itemsOptions.itemCardCssClass}-pinned`)\n                .width('auto')\n                .data('index', task.item.index)\n                .data('assigned', 1)\n                .appendTo(placeholder);\n        }, this);\n    }\n\n    onResizePointerUp(event) {\n        let op = this.operation;\n        if (!this.operation) { return; }\n\n        this.$ownerDocument.off('mouseup');\n        this.$ownerDocument.off('mousemove');\n\n        this.operation = null;\n    }\n\n    onResizePointerMove(event) {\n        let op = this.operation;\n        if (!this.operation) { return; }\n\n        // Determine the delta change between start and new mouse position, as a percentage of the table width\n        let difference = (event.pageX - op.startX); // / this.$scheduleEl.width() * 100;\n        if (difference === 0) {\n            return;\n        }\n\n        let columnNumber = op.columnNumber;\n        let width = op.width + difference;\n        if (this.resizeAllColumns) {\n            for (let i = 0; i < this.settings.data.length; i++) {\n                this.updateColumnWidth(i, width.toFixed(2));\n            }\n        } else {\n            this.updateColumnWidth(columnNumber, width.toFixed(2));\n        }\n    }\n\n    onResizePointerDown(event) {\n        // Only applies to left-click dragging\n        if (event.which !== 1) { return; }\n\n        // If a previous this.operation is defined, we missed the last mouseup.\n        // Probably gobbled up by user mousing out the window then releasing.\n        // We'll simulate a pointerup here prior to it\n        if (this.operation) {\n            this.Resize(event);\n        }\n\n        let $currentGrip = $(event.currentTarget);\n        let columnNumber = $currentGrip.data('column-id');\n\n        let gripIndex = $currentGrip.index();\n        let $leftColumn = this.$headerContainer.find('div').eq(gripIndex);\n\n        let leftWidth = $leftColumn[0].clientWidth;\n\n        this.operation = {\n            columnNumber,\n            startX: event.pageX,\n            width: leftWidth\n        };\n\n        this.$ownerDocument.on('mousemove', this.onResizePointerMove.bind(this));\n        this.$ownerDocument.on('mouseup', this.Resize.bind(this));\n\n        event.preventDefault();\n    }\n\n    updateColumnWidth(columnNumber, width) {\n        width = Math.max(width, this.settings.minColumnWidth);\n        $('.' + this.settings.headerContainerCssClass + ' > div:eq(' + columnNumber + ')')\n            .css('flex-basis', width + 'px');\n\n        let column = $('.' + this.settings.schedulerContainerCssClass + '-body > div:eq(' + columnNumber + ') > .' + this.settings.cellCssClass);\n        var diff = column.width() - width;\n        column.width(width);\n\n        $('.' + this.settings.resizableHandlerCssClass + ' > div').each((index, el) => {\n            if (index >= columnNumber) {\n                let $el = $(el);\n                let left = parseInt($el.css('left').replace('px', ''));\n                $el.css('left', left - diff);\n            }\n        });\n    }\n\n    getItemDiv(item) {\n        const $div = div(this.settings.itemsOptions.itemCardCssClass);\n        const template = compileTemplate(this.settings.itemsOptions.itemCardTemplate, {\n            time: (item) => item.interval ? `${item.interval.start} to ${item.interval.end}` : ''\n        });\n\n        return div().html(template(item));\n    }\n\n    /**\n    * Convert double value of hours to zero-preposited string with 30 or 00 value of minutes\n    */\n    toTimeString(value) {\n        return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');\n    }\n\n    /**\n     * Return height of task card based on duration of the task\n     * duration - in hours\n     */\n    getCardHeight(duration) {\n        const durationInMinutes = duration * 60;\n        const heightOfMinute = (this.settings.lineHeight + this.settings.borderWidth) * this.settings.rowsPerHour / 60;\n        return Math.ceil(durationInMinutes * heightOfMinute);\n    }\n\n    /**\n     * Return top offset of task card based on start time of the task\n     * startTime - in hours\n     */\n    getCardTopPosition(startTime, offsetTime) {\n        let startTimeInt = parseTime(startTime);\n        if (offsetTime) {\n            startTimeInt -= parseTime(offsetTime);\n        }\n        return (this.settings.lineHeight + this.settings.borderWidth) * (startTimeInt * this.settings.rowsPerHour);\n    }\n}\n\nexport default Skeduler;","const compileTemplate = (template, funcs) => item => {\n    let result = template;\n    const regKeys = /\\$\\{(\\w+)\\}/g;\n    const regFuncs = /\\$\\{(\\w+)\\(\\)\\}/g;\n\n    let match = 1;\n    while (true) {\n        match = regKeys.exec(template);\n        if (!match) break;\n\n        let key = match[1];\n        if (item.hasOwnProperty(key)) {\n            result = result.replace(match[0], item[key]);\n        }\n    }\n\n    while (funcs) {\n        match = regFuncs.exec(template);\n        if (!match) break;\n\n        let key = match[1];\n        if (funcs.hasOwnProperty(key)) {\n            result = result.replace(match[0], funcs[key](item));\n        }\n    }\n\n    return result;\n}\n\nexport default { compileTemplate };","/**\n * Parse time string and present it in hours (ex. '13:30' => 13.5)\n * @param {*string} time - time in format like '13:50', '11:00', '14'\n */\nexport function parseTime(time) {\n    return /\\d{1,2}\\:\\d{2}/.test(time) ?\n        parseInt(time.split(':')[0]) + parseInt(time.split(':')[1]) / 60 :\n        parseInt(time);\n}\n\nexport function toTime(value) {\n    // TODO: vvv fix me\n    return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');\n}"]}
/**
 * jquery-skeduler - This is jQuery plugin which provider you simple scheduler with some items on OX and 24-hours timeline on OY.
 * @date Mon Jul 10 2017 16:17:19 GMT+1000 (Russia TZ 9 Standard Time)
 * @version v0.1.0-beta.0
 * @link 
 * @license ISC
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

// export type Task = {
//     id: number;
//     startTime: number;
//     duration: number;
//     column: number
// }

// export type Options = {
//     headers: string[];
//     tasks: Task[];
//     containerCssClass: string;
//     headerContainerCssClass: string;
//     schedulerContainerCssClass: string;
//     lineHeight: number;
//     borderWidth: number;
// }

/**
* Generate scheduler grid with task cards
* options:
* - headers: string[] - array of headers
* - tasks: Task[] - array of tasks
* - containerCssClass: string - css class of main container
* - headerContainerCssClass: string - css class of header container
* - schedulerContainerCssClass: string - css class of scheduler
* - lineHeight - height of one half-hour cell in grid
* - borderWidth - width of border of cell in grid
*/
$.fn.skeduler = function (options) {
    return this.each(function () {
        var $container = $(this);

        var skeduler = new _skeduler2['default']($container, options);
    });
};

$.skeduler = _skeduler2['default'];

},{"./skeduler":5}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

var _adapter = require('./adapter');

var _adapter2 = _interopRequireDefault(_adapter);

exports['default'] = _skeduler2['default'];
module.exports = exports['default'];

},{"./adapter":1,"./skeduler":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _template = require('../template');

var div = function div(cssClass) {
    return $('<div></div>').addClass(cssClass);
};

var getItemDivs = function getItemDivs(settings) {
    var $div = div(settings.itemsOptions.itemCardCssClass);
    var items = settings.itemsOptions.items;
    var template = (0, _template.compileTemplate)(settings.itemsOptions.itemCardTemplate, {
        time: function time(item) {
            return item.interval ? item.interval.start + ' to ' + item.interval.end : '';
        }
    });

    return items.map(function (item, index) {
        return $div.clone().data('index', index).html(template(item));
    });
};

var populateSkedulerItems = function populateSkedulerItems(settings) {
    var $skedulerItemsEl = $(settings.itemsOptions.containerSelector).empty().addClass(settings.itemsOptions.itemsCssClass);
    var $ownerDocument = $($skedulerItemsEl[0].ownerDocument);
    var $shifts = $('.' + settings.workingIntervalPlaceholderCssClass + ' > div');

    // TODO: Generate item's divs
    var $headerDiv = div().html('<h1 class="si-header">Items</h1>').appendTo($skedulerItemsEl);

    var $skedulerItemsContainerEl = div('si-container');
    var $items = getItemDivs(settings);
    $items.forEach(function (el) {
        $skedulerItemsContainerEl.append(el);
    });
    $skedulerItemsContainerEl.appendTo($skedulerItemsEl);

    var operation = null;

    var mouseUp = function mouseUp(event) {
        if (operation == null) return;

        var _operation = operation;
        var $movingCard = _operation.$movingCard;
        var $card = _operation.$card;

        var $siEl = $('.' + settings.itemsOptions.highlightItemCss + ':visible'); // fixme

        if ($siEl.length !== 0 && $siEl.data('match') == 1) {
            $movingCard.detach().css({ top: $siEl[0].offsetTop, left: 0 }).height($siEl[0].clientHeight).width('auto').removeClass(settings.itemsOptions.itemCardCssClass + '-moving').addClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($siEl.parent());

            $movingCard.on('mousedown', mouseDownOnCard);
        } else {
            $movingCard.remove();
            $card.show();
        }

        $('.' + settings.itemsOptions.highlightItemCss).hide();

        operation = null;
        $ownerDocument.off('mousemove', mouseMove);
        $ownerDocument.off('mouseup', mouseUp);
    };

    var mouseMove = function mouseMove(event) {
        if (operation == null) return;

        var _operation2 = operation;
        var $movingCard = _operation2.$movingCard;
        var offsetX = _operation2.offsetX;
        var offsetY = _operation2.offsetY;

        var newOffsetX = event.pageX - offsetX,
            newOffsetY = event.pageY - offsetY;

        $movingCard.css({
            top: newOffsetY + 'px',
            left: newOffsetX + 'px'
        });

        // Higlight shifts
        var _window = $ownerDocument[0].defaultView;
        var x = event.pageX;
        var y = event.pageY - _window.scrollY;

        var rowHeight = settings.lineHeight + 1;
        var rowsPerHour = settings.rowsPerHour;

        var index = parseInt($movingCard.data('index'));
        var item = settings.itemsOptions.items[index];
        var duration = item.duration;
        var height = duration * (rowHeight * rowsPerHour / 60);

        $shifts.each(function () {
            var $this = $(this);
            var elementBounding = this.getBoundingClientRect();
            var $el = $this.find('.' + settings.itemsOptions.highlightItemCss);

            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {

                var offsetTop = y - elementBounding.top;
                var rowCount = Math.floor(offsetTop / rowHeight) - 1;
                var _top = Math.min(Math.max(0, rowCount * rowHeight), this.clientHeight - height);

                var offsetInMinutes = 60 / settings.rowsPerHour * (_top / rowHeight); // <<== FIXME
                console.log($this.data('item-index'));
                var interval = settings.data[$this.data('column')].workingTimeIntervals[$this.data('item-index')];
                var matchResult = settings.itemsOptions.matchFunc(item, interval, offsetInMinutes);

                $el.css({ top: _top }).css('background-color', matchResult.color).height(height).show();

                $el.data('match', +matchResult.match);
            } else {
                $el.data('match', 0);
                $el.hide();
            }
        });
    };

    var mouseDownOnCard = function mouseDownOnCard(event /*: MouseEvent */) {
        if (event.which !== 1) {
            return;
        }

        var $skedulerWrapper = $('.' + settings.skedulerWrapperCssClass);
        var $card = $(event.currentTarget);

        var $movingCard = $card.clone().data('index', $card.data('index')).addClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').width($card.width()).appendTo($skedulerWrapper);

        //var bounce = $card[0].getBoundingClientRect();
        // fixme ^^^
        var offsetX = event.pageX - event.offsetX,
            offsetY = event.pageY - event.offsetY;

        $movingCard.css({
            top: offsetY + 'px',
            left: offsetX + 'px'
        });

        operation = {
            $card: $card, $movingCard: $movingCard,
            offsetX: event.offsetX, offsetY: event.offsetY
        };

        $card.hide();

        $ownerDocument.on('mousemove', mouseMove);
        $ownerDocument.on('mouseup', mouseUp);

        event.preventDefault();
    };

    $skedulerItemsEl.find('.' + settings.itemsOptions.itemCardCssClass).on('mousedown', mouseDownOnCard);
};

exports['default'] = populateSkedulerItems;
module.exports = exports['default'];

},{"../template":6}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var defaultSettings = {
    // Data attributes
    headers: null, // string[] - Array of column headers
    tasks: [], // Task[] - Array of tasks. Required fields:
    // id: number, startTime: number, duration: number, column: number

    notAllocatedLabel: 'Not allocated',

    // Card template - Inner content of task card.
    // You're able to use ${key} inside template, where key is any property from task.
    cardTemplate: '<div>${id}</div>',

    // OnClick event handler
    onClick: function onClick(e, task) {},

    // Css classes
    skedulerWrapperCssClass: 'skeduler-wrapper',
    containerCssClass: 'skeduler-container',
    headerContainerCssClass: 'skeduler-headers',
    schedulerContainerCssClass: 'skeduler-main',
    taskPlaceholderCssClass: 'skeduler-task-placeholder',
    workingIntervalPlaceholderCssClass: 'skeduler-interval-placeholder',
    cellCssClass: 'skeduler-cell',
    resizableHandlerCssClass: 'resizable-handler',
    resizableSliderCssClass: 'resizable-slider',

    lineHeight: 30, // height of one line in grid
    borderWidth: 1, // width of board of grid cell
    columnWidth: 200,
    minColumnWidth: 100,

    rowsPerHour: 2, // count of rows for one hour

    columnResizeEnabled: true, // is columns resizable

    debug: true,

    itemsOptions: {
        enabled: false,
        itemsCssClass: 'skeduler-items',
        highlightItemCss: 'si-highlight-item',
        containerSelector: "#skeduler-items",
        itemCardCssClass: 'si-card',
        itemCardTemplate: '<div>${duration}</div>',
        items: [],
        matchFunc: function matchFunc() {
            return { match: true };
        }
    }
};

exports.defaultSettings = defaultSettings;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _settings = require('./settings');

var _items = require('./items');

var _items2 = _interopRequireDefault(_items);

var _template = require('./template');

var Skeduler = (function () {
    function Skeduler($container, options) {
        _classCallCheck(this, Skeduler);

        this.settings = $.extend(true, _settings.defaultSettings, options);
        this.$container = $container;
        this.$ownerDocument = $($container[0].ownerDocument);
        this.$headerContainer = null;
        this.$scheduleEl = null;
        this.operation = null;

        if (this.settings.debug) {
            console.time('skeduler');
        }

        this.populate();
        if (this.settings.itemsOptions.enabled) {
            (0, _items2['default'])(this.settings);
        }

        if (this.settings.debug) {
            console.timeEnd('skeduler');
        }
    }

    _createClass(Skeduler, [{
        key: 'populate',
        value: function populate() {
            var _this = this;

            this.$container.empty();
            this.$container.addClass(this.settings.containerCssClass);

            var headers = this.settings.headers ? this.settings.headers : this.settings.data.map(this.settings.getHeader);

            var div = $('<div></div>');

            // Add headers
            this.$headerContainer = div.clone().addClass(this.settings.headerContainerCssClass);
            headers.forEach(function (element) {
                div.clone().text(element).appendTo(_this.$headerContainer);
            }, this);
            this.$container.append(this.$headerContainer);

            // Add scheduler
            this.$scheduleEl = div.clone().addClass(this.settings.schedulerContainerCssClass);
            var scheduleTimelineEl = div.clone().addClass(this.settings.schedulerContainerCssClass + '-timeline');
            var scheduleBodyEl = div.clone().addClass(this.settings.schedulerContainerCssClass + '-body');

            var gridColumnElement = div.clone();

            for (var i = 0; i < 24; i++) {
                // Populate timeline
                for (var j = 0; j < this.settings.rowsPerHour; j++) {
                    var timelineCell = div.clone().height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "");

                    if (j == 0) {
                        timelineCell = timelineCell.css("line-height", this.settings.lineHeight + 'px').text(j == 0 ? this.toTimeString(i) : "");
                    }
                    timelineCell.appendTo(scheduleTimelineEl);

                    div.clone().addClass(this.settings.cellCssClass).height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "").appendTo(gridColumnElement);
                }
            }

            // Populate grid

            var _loop = function (j) {
                var el = gridColumnElement.clone();

                var tasksPlaceholder = div.clone().addClass(_this.settings.taskPlaceholderCssClass);
                _this.appendTasks(tasksPlaceholder, _this.settings.tasks.filter(function (t) {
                    return t.column == j;
                }));

                // fixme [workingTimeIntervals must not use index]
                var workingIntervalsPlaceholder = div.clone().addClass(_this.settings.workingIntervalPlaceholderCssClass);
                var intervals = _this.settings.data[j].workingTimeIntervals;
                _this.appendAvailableInterval(workingIntervalsPlaceholder, intervals, j);

                el.prepend(tasksPlaceholder);
                el.prepend(workingIntervalsPlaceholder);
                el.appendTo(scheduleBodyEl);

                _this.updateColumnWidth(j, _this.settings.columnWidth);
            };

            for (var j = 0; j < headers.length; j++) {
                _loop(j);
            }

            this.$scheduleEl.append(scheduleTimelineEl);
            this.$scheduleEl.append(scheduleBodyEl);

            this.$container.append(this.$scheduleEl);

            // Set default width for columns
            for (var j = 0; j < headers.length; j++) {
                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            // Configure resizing
            if (this.settings.columnResizeEnabled) {
                this.configureResizing();
            }
        }
    }, {
        key: 'configureResizing',
        value: function configureResizing() {
            var _this2 = this;

            var div = $('<div></div>');

            var skedulerElResizableHandler = div.clone().addClass(this.settings.resizableHandlerCssClass);

            this.$container.prepend(skedulerElResizableHandler);

            skedulerElResizableHandler.width(this.$container.width());

            var resizableSliderHeight = this.$scheduleEl.height() + this.$headerContainer.height();
            var index = 0;
            this.$headerContainer.find('div').each(function (_, el) {
                div.clone().addClass(_this2.settings.resizableSliderCssClass).css('left', el.offsetLeft + el.clientWidth).height(resizableSliderHeight).data('column-id', index++).appendTo(skedulerElResizableHandler);
            });

            skedulerElResizableHandler.on('mousedown', '.' + this.settings.resizableSliderCssClass, this.onPointerDown.bind(this));
        }

        /**
           * Convert double value of hours to zero-preposited string with 30 or 00 value of minutes
           */
    }, {
        key: 'toTimeString',
        value: function toTimeString(value) {
            return (value < 10 ? '0' : '') + Math.ceil(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');
        }

        /**
         * Return height of task card based on duration of the task
         * duration - in hours
         */
    }, {
        key: 'getCardHeight',
        value: function getCardHeight(duration) {
            var durationInMinutes = duration * 60;
            var heightOfMinute = (this.settings.lineHeight + this.settings.borderWidth) * this.settings.rowsPerHour / 60;
            return Math.ceil(durationInMinutes * heightOfMinute);
        }

        /**
         * Return top offset of task card based on start time of the task
         * startTime - in hours
         */
    }, {
        key: 'getCardTopPosition',
        value: function getCardTopPosition(startTime) {
            var startTimeInt = this.parseTime(startTime);
            return (this.settings.lineHeight + this.settings.borderWidth) * (startTimeInt * this.settings.rowsPerHour);
        }

        /**
         * Parse time string and present it in hours (ex. '13:30' => 13.5)
         * @param {*string} time - time in format like '13:50', '11:00', '14'
         */
    }, {
        key: 'parseTime',
        value: function parseTime(time) {
            return (/\d{2}\:\d{2}/.test(time) ? parseInt(time.split(':')[0]) + parseInt(time.split(':')[1]) / 60 : parseInt(time)
            );
        }

        /**
        * Render card template
        */
    }, {
        key: 'renderInnerCardContent',
        value: function renderInnerCardContent(task) {
            var template = this.settings.cardTemplate;
            var result = (0, _template.compileTemplate)(template)(task);

            return $(result);
        }

        /** 
         * Generate task cards
         */
    }, {
        key: 'appendTasks',
        value: function appendTasks(placeholder, tasks) {
            var _this3 = this;

            tasks.forEach(function (task) {
                var innerContent = _this3.renderInnerCardContent(task);
                var top = _this3.getCardTopPosition(task.startTime);
                var height = _this3.getCardHeight(task.duration);

                var card = $('<div></div>').attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px',
                    title: _this3.toTimeString(task.startTime) + ' - ' + _this3.toTimeString(task.startTime + task.duration)
                });
                card.on('click', function (e) {
                    _this3.settings.onClick && _this3.settings.onClick(e, task);
                });
                card.append(innerContent).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'appendAvailableInterval',
        value: function appendAvailableInterval(placeholder, intervals, column) {
            var _this4 = this;

            var div = $('<div></div>');
            intervals.forEach(function (interval, index) {
                var innerContent = div.clone().text(_this4.settings.notAllocatedLabel);
                var top = _this4.getCardTopPosition(interval.start) + 2;
                var duration = _this4.parseTime(interval.end) - _this4.parseTime(interval.start);
                var height = _this4.getCardHeight(duration) - 5;

                var skItemHightlightDiv = div.clone().addClass('si-highlight-item').hide();

                var card = div.clone().attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px'
                });

                card.data('column', column).data('item-index', index).append(innerContent).append(skItemHightlightDiv).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'onPointerUp',
        value: function onPointerUp(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            this.$ownerDocument.off('mouseup');
            this.$ownerDocument.off('mousemove');

            this.operation = null;
        }
    }, {
        key: 'onPointerMove',
        value: function onPointerMove(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            // Determine the delta change between start and new mouse position, as a percentage of the table width
            var difference = event.pageX - op.startX; // / this.$scheduleEl.width() * 100;
            if (difference === 0) {
                return;
            }

            var columnNumber = op.columnNumber;
            var width = op.width + difference;
            this.updateColumnWidth(columnNumber, width.toFixed(2));
        }
    }, {
        key: 'onPointerDown',
        value: function onPointerDown(event) {
            // Only applies to left-click dragging
            if (event.which !== 1) {
                return;
            }

            // If a previous this.operation is defined, we missed the last mouseup.
            // Probably gobbled up by user mousing out the window then releasing.
            // We'll simulate a pointerup here prior to it
            if (this.operation) {
                this.onPointerUp(event);
            }

            var $currentGrip = $(event.currentTarget);
            var columnNumber = $currentGrip.data('column-id');

            var gripIndex = $currentGrip.index();
            var $leftColumn = this.$headerContainer.find('div').eq(gripIndex);

            var leftWidth = $leftColumn[0].clientWidth;

            this.operation = {
                columnNumber: columnNumber,
                startX: event.pageX,
                width: leftWidth
            };

            this.$ownerDocument.on('mousemove', this.onPointerMove.bind(this));
            this.$ownerDocument.on('mouseup', this.onPointerUp.bind(this));

            event.preventDefault();
        }
    }, {
        key: 'updateColumnWidth',
        value: function updateColumnWidth(columnNumber, width) {
            width = Math.max(width, this.settings.minColumnWidth);
            $('.' + this.settings.headerContainerCssClass + ' > div:eq(' + columnNumber + ')').css('flex-basis', width + 'px');

            var column = $('.' + this.settings.schedulerContainerCssClass + '-body > div:eq(' + columnNumber + ') > .' + this.settings.cellCssClass);
            var diff = column.width() - width;
            column.width(width);

            $('.' + this.settings.resizableHandlerCssClass + ' > div').each(function (index, el) {
                if (index >= columnNumber) {
                    var $el = $(el);
                    var left = parseInt($el.css('left').replace('px', ''));
                    $el.css('left', left - diff);
                }
            });
        }
    }]);

    return Skeduler;
})();

exports['default'] = Skeduler;
module.exports = exports['default'];

},{"./items":3,"./settings":4,"./template":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var compileTemplate = function compileTemplate(template, funcs) {
    return function (item) {
        var result = template;
        var regKeys = /\$\{(\w+)\}/g;
        var regFuncs = /\$\{(\w+)\(\)\}/g;

        var match = 1;
        while (true) {
            match = regKeys.exec(template);
            if (!match) break;

            var key = match[1];
            if (item.hasOwnProperty(key)) {
                result = result.replace(match[0], item[key]);
            }
        }

        while (funcs) {
            match = regFuncs.exec(template);
            if (!match) break;

            var key = match[1];
            if (funcs.hasOwnProperty(key)) {
                result = result.replace(match[0], funcs[key](item));
            }
        }

        return result;
    };
};

exports["default"] = { compileTemplate: compileTemplate };
module.exports = exports["default"];

},{}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,

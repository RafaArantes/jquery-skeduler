/**
 * jquery-skeduler - This is jQuery plugin which provider you simple scheduler with some items on OX and 24-hours timeline on OY.
 * @date Sun Aug 20 2017 16:02:11 GMT+1000 (+10)
 * @version v0.2.0-beta.0
 * @link 
 * @license ISC
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

/**
 * Generate scheduler grid with task cards
 * options:
 * - headers: string[] - array of headers
 * - tasks: Task[] - array of tasks
 * - containerCssClass: string - css class of main container
 * - headerContainerCssClass: string - css class of header container
 * - schedulerContainerCssClass: string - css class of scheduler
 * - lineHeight - height of one half-hour cell in grid
 * - borderWidth - width of border of cell in grid
 */
$.fn.skeduler = function (options) {
  var $container = $(this);
  var skeduler = new _skeduler2['default']($container, options);

  return skeduler;
};

$.skeduler = _skeduler2['default'];

},{"./skeduler":5}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

var _adapter = require('./adapter');

var _adapter2 = _interopRequireDefault(_adapter);

exports['default'] = _skeduler2['default'];
module.exports = exports['default'];

},{"./adapter":1,"./skeduler":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _template = require('../template');

var _utils = require('../utils');

var div = function div(cssClass) {
    return $('<div></div>').addClass(cssClass);
};

var getItemDivs = function getItemDivs(settings) {
    var $div = div(settings.itemsOptions.itemCardCssClass);
    var items = settings.items;
    var template = (0, _template.compileTemplate)(settings.itemsOptions.itemCardTemplate, {
        time: function time(item) {
            return item.interval ? item.interval.start + ' to ' + item.interval.end : '';
        }
    });

    return items.map(function (item) {
        return $div.clone().data('index', item.index).html(template(item));
    });
};

var findStartTime = function findStartTime(rowIndex, rowsPerHour, interval) {
    rowIndex = Math.max(0, rowIndex);
    var hoursFromTop = rowIndex / rowsPerHour;

    return (0, _utils.toTime)(hoursFromTop + (0, _utils.parseTime)(interval.start));
};

var populateSkedulerItems = function populateSkedulerItems(settings) {
    var getItem = function getItem(index, isAssigned) {
        return isAssigned ? settings.tasks.filter(function (t) {
            return t.item.index === index;
        })[0].item : settings.items.filter(function (i) {
            return i.index === index;
        })[0];
    };

    var $skedulerItemsEl = $(settings.itemsOptions.containerSelector).empty().addClass(settings.itemsOptions.itemsCssClass);
    var $ownerDocument = $($skedulerItemsEl[0].ownerDocument);
    var $shifts = $('.' + settings.availableIntervalPlaceholderCssClass + ' > div');

    var $headerDiv = div().html('<h1 class="si-header">' + settings.itemsOptions.title + '</h1>').appendTo($skedulerItemsEl);

    var $skedulerItemsContainerEl = div('si-container');
    var $items = getItemDivs(settings);
    $items.forEach(function (el) {
        $skedulerItemsContainerEl.append(el);
    });
    $skedulerItemsContainerEl.appendTo($skedulerItemsEl);

    var operation = null;

    var mouseUp = function mouseUp(event) {
        if (operation == null) return;

        var _operation = operation;
        var $movingCard = _operation.$movingCard;
        var $card = _operation.$card;
        var startTime = _operation.startTime;

        var $siEl = $('.' + settings.itemsOptions.highlightItemCss + ':visible'); // fixme

        var index = parseInt($movingCard.data('index'));
        var isAssigned = !!$movingCard.data('assigned');
        var item = getItem(index, isAssigned);

        if ($skedulerItemsContainerEl.data('selected') == 1) {
            if (isAssigned) {
                settings.tasks = settings.tasks.filter(function (t) {
                    return t.item.index != index;
                });
                settings.items.push(item);
            }

            $movingCard.detach().css({ top: 'auto', left: 'auto' }).height('auto').width('auto').data('assigned', 0).removeClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($skedulerItemsContainerEl);

            $movingCard.on('mousedown', mouseDown);
            $card.remove();
        } else if ($siEl.length !== 0 && $siEl.data('match') == 1) {
            var rowHeight = settings.lineHeight + 1;
            var column = parseInt($siEl.parent().data('column'));
            var offsetInMinutes = (0, _utils.parseTime)(startTime) * 60;

            var interval = settings.data[column].availableIntervals[$siEl.parent().data('item-index')];

            settings.itemsOptions.onItemWillBeAssigned && settings.itemsOptions.onItemWillBeAssigned({ item: item, interval: interval, offsetInMinutes: offsetInMinutes });

            $movingCard.detach().css({ top: $siEl[0].offsetTop, left: 0 }).height($siEl[0].clientHeight).width('auto').data('assigned', 1).removeClass(settings.itemsOptions.itemCardCssClass + '-moving').addClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($siEl.parent());

            $movingCard.on('mousedown', mouseDown);
            $card.remove();

            if (!isAssigned) {
                settings.tasks.push({
                    column: column,
                    start: startTime,
                    item: item
                });
            } else {
                var task = settings.tasks.find(function (t) {
                    return t.item.index === index;
                });
                task.start = startTime, task.column = column;
            }

            settings.itemsOptions.onItemDidAssigned && settings.itemsOptions.onItemDidAssigned({ item: item, interval: interval, offsetInMinutes: offsetInMinutes });
        } else {
            $movingCard.remove();
            $card.show();
        }

        $('.' + settings.itemsOptions.highlightItemCss).hide();
        $skedulerItemsContainerEl.removeClass('highlighted');
        $skedulerItemsContainerEl.data('selected', 0);

        operation = null;
        $ownerDocument.off('mousemove', mouseMove);
        $ownerDocument.off('mouseup', mouseUp);
    };

    var mouseMove = function mouseMove(event) {
        if (operation == null) return;

        var _operation2 = operation;
        var $movingCard = _operation2.$movingCard;
        var offsetX = _operation2.offsetX;
        var offsetY = _operation2.offsetY;

        var newOffsetX = event.pageX - offsetX,
            newOffsetY = event.pageY - offsetY;

        $movingCard.css({
            top: newOffsetY + 'px',
            left: newOffsetX + 'px'
        });

        // Higlight shifts
        var _window = $ownerDocument[0].defaultView;
        var x = event.pageX;
        var y = event.pageY - _window.scrollY;

        var rowHeight = settings.lineHeight + 1;
        var rowsPerHour = settings.rowsPerHour;

        var index = parseInt($movingCard.data('index'));
        var isAssigned = !!$movingCard.data('assigned');
        var item = getItem(index, isAssigned);
        var duration = item.duration;
        var height = duration * (rowHeight * rowsPerHour / 60);

        $skedulerItemsContainerEl.each(function () {
            var $this = $(this);
            var elementBounding = this.getBoundingClientRect();

            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {
                $this.addClass('highlighted');
                $skedulerItemsContainerEl.data('selected', 1);
            } else {
                $this.removeClass('highlighted');
                $skedulerItemsContainerEl.data('selected', 0);
            }
        });
        $shifts.each(function () {
            var $this = $(this);
            var elementBounding = this.getBoundingClientRect();
            var $el = $this.find('.' + settings.itemsOptions.highlightItemCss);

            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {

                var offsetTop = y - elementBounding.top;
                var rowIndex = Math.floor(offsetTop / rowHeight) - 1;
                var _top = Math.min(Math.max(0, rowIndex * rowHeight), this.clientHeight - height);

                var offsetInMinutes = 60 / settings.rowsPerHour * (_top / rowHeight); // <<== FIXME
                var interval = settings.data[$this.data('column')].availableIntervals[$this.data('item-index')];
                var matchResult = settings.itemsOptions.matchFunc(item, interval, offsetInMinutes);

                operation.startTime = findStartTime(rowIndex, rowsPerHour, interval);

                $el.css({ top: _top }).css('background-color', matchResult.color).height(height).show();

                $el.data('match', +matchResult.match);
            } else {
                $el.data('match', 0);
                $el.hide();
            }
        });
    };

    var mouseDown = function mouseDown(event /*: MouseEvent */) {
        if (event.which !== 1) {
            return;
        }

        var $skedulerWrapper = $('.' + settings.skedulerWrapperCssClass);
        var $card = $(event.currentTarget);

        var $movingCard = $card.clone().data('index', $card.data('index')).data('assigned', $card.data('assigned')).addClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').width($card.width()).appendTo($skedulerWrapper);

        //var bounce = $card[0].getBoundingClientRect();
        // fixme ^^^
        var offsetX = event.pageX - event.offsetX,
            offsetY = event.pageY - event.offsetY;

        $movingCard.css({
            top: offsetY + 'px',
            left: offsetX + 'px'
        });

        operation = {
            $card: $card,
            $movingCard: $movingCard,
            offsetX: event.offsetX,
            offsetY: event.offsetY
        };

        var index = parseInt($card.data('index'));
        var isAssigned = !!$movingCard.data('assigned');
        var item = getItem(index, isAssigned);

        $card.hide();

        $ownerDocument.on('mousemove', mouseMove);
        $ownerDocument.on('mouseup', mouseUp);

        event.preventDefault();
    };

    $('.' + settings.itemsOptions.itemCardCssClass).on('mousedown', mouseDown);
};

exports['default'] = populateSkedulerItems;
module.exports = exports['default'];

},{"../template":6,"../utils":7}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var _arguments = arguments;
var defaultSettings = {
    // Data attributes
    headers: null, // string[] - Array of column headers
    tasks: [], // Task[] - Array of tasks. Required fields:
    // id: number, startTime: number, duration: number, column: number

    items: [], // Item[] - Array of not-assingned tasks

    notAllocatedLabel: 'Not allocated',

    // Card template - Inner content of task card.
    // You're able to use ${key} inside template, where key is any property from task.
    cardTemplate: '<div>${id}</div>',

    // Css classes
    skedulerWrapperCssClass: 'skeduler-wrapper',
    containerCssClass: 'skeduler-container',
    headerContainerCssClass: 'skeduler-headers',
    schedulerContainerCssClass: 'skeduler-main',
    taskPlaceholderCssClass: 'skeduler-task-placeholder',
    availableIntervalPlaceholderCssClass: 'skeduler-interval-placeholder',
    cellCssClass: 'skeduler-cell',
    resizableHandlerCssClass: 'resizable-handler',
    resizableSliderCssClass: 'resizable-slider',

    lineHeight: 30, // height of one line in grid
    borderWidth: 1, // width of board of grid cell
    columnWidth: 200,
    minColumnWidth: 100,

    rowsPerHour: 2, // count of rows for one hour

    columnResizeEnabled: true, // is columns resizable

    debug: false,

    itemsOptions: {
        enabled: false,
        itemsCssClass: 'skeduler-items',
        highlightItemCss: 'si-highlight-item',
        containerSelector: "#skeduler-items",
        itemCardCssClass: 'si-card',
        itemCardTemplate: '<div>${duration}</div>',
        title: 'Items',
        onItemWillBeAssigned: function onItemWillBeAssigned() {
            console.log(_arguments);
        },
        onItemDidAssigned: function onItemDidAssigned() {
            console.log(_arguments);
        },
        matchFunc: function matchFunc() {
            return { match: true };
        }
    }
};

exports.defaultSettings = defaultSettings;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _settings = require('./settings');

var _items = require('./items');

var _items2 = _interopRequireDefault(_items);

var _template = require('./template');

var _utils = require('./utils');

var div = function div(cssClass) {
    return $('<div></div>').addClass(cssClass);
};

var Skeduler = (function () {
    function Skeduler($container, options) {
        _classCallCheck(this, Skeduler);

        this.settings = $.extend(true, _settings.defaultSettings, options);
        this.$container = $container;
        this.$ownerDocument = $($container[0].ownerDocument);
        this.$headerContainer = null;
        this.$scheduleEl = null;
        this.operation = null;
        this.resizeAllColumns = true;

        if (this.settings.debug) {
            console.time('skeduler');
        }

        this.refresh();

        if (this.settings.debug) {
            console.timeEnd('skeduler');
        }
    }

    _createClass(Skeduler, [{
        key: 'setRowsPerHour',
        value: function setRowsPerHour(rowsPerHour) {
            this.settings.rowsPerHour = rowsPerHour;
            this.refresh();
        }
    }, {
        key: 'setResizeAllColumns',
        value: function setResizeAllColumns(resizeAllColumns) {
            this.resizeAllColumns = resizeAllColumns;
        }
    }, {
        key: 'refresh',
        value: function refresh() {
            var _this = this;

            this.settings.items = this.settings.items && this.settings.items.map(function (item, index) {
                return Object.assign({}, { index: index }, item);
            }) || [];
            this.settings.tasks = this.settings.tasks && this.settings.tasks.map(function (task, index) {
                task.item = Object.assign({}, { index: index + _this.settings.items.length }, task.item);
                return task;
            }) || [];

            this.populate();
            if (this.settings.itemsOptions.enabled) {
                (0, _items2['default'])(this.settings);
            }
        }
    }, {
        key: 'populate',
        value: function populate() {
            var _this2 = this;

            this.$container.empty();
            this.$container.addClass(this.settings.containerCssClass);

            var headers = this.settings.headers ? this.settings.headers : this.settings.data.map(this.settings.getHeader);

            // Add headers
            this.$headerContainer = div(this.settings.headerContainerCssClass);
            headers.forEach(function (element) {
                div().text(element).appendTo(_this2.$headerContainer);
            }, this);
            this.$container.append(this.$headerContainer);

            // Add scheduler
            this.$scheduleEl = div(this.settings.schedulerContainerCssClass);
            var scheduleTimelineEl = div(this.settings.schedulerContainerCssClass + '-timeline');
            var scheduleBodyEl = div(this.settings.schedulerContainerCssClass + '-body');

            var gridColumnElement = div();

            for (var i = 0; i < 24; i++) {
                // Populate timeline
                for (var j = 0; j < this.settings.rowsPerHour; j++) {
                    var timelineCell = div().height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "");

                    if (j == 0) {
                        timelineCell = timelineCell.css("line-height", this.settings.lineHeight + 'px').text(j == 0 ? this.toTimeString(i) : "");
                    }
                    timelineCell.appendTo(scheduleTimelineEl);

                    div(this.settings.cellCssClass).height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "").appendTo(gridColumnElement);
                }
            }

            // Populate grid
            for (var j = 0; j < headers.length; j++) {
                var el = gridColumnElement.clone();

                // fixme [availableIntervals must not use index]
                var availableIntervalsPlaceholder = div(this.settings.availableIntervalPlaceholderCssClass);
                var intervals = this.settings.data[j].availableIntervals;
                this.appendAvailableInterval(availableIntervalsPlaceholder, intervals, j);

                el.prepend(availableIntervalsPlaceholder);
                el.appendTo(scheduleBodyEl);

                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            this.$scheduleEl.append(scheduleTimelineEl);
            this.$scheduleEl.append(scheduleBodyEl);

            this.$container.append(this.$scheduleEl);

            // Set default width for columns
            for (var j = 0; j < headers.length; j++) {
                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            // Configure resizing
            if (this.settings.columnResizeEnabled) {
                this.configureResizing();
            }
        }
    }, {
        key: 'tasks',
        value: function tasks() {
            return this.settings.tasks;
        }
    }, {
        key: 'configureResizing',
        value: function configureResizing() {
            var _this3 = this;

            var skedulerElResizableHandler = div(this.settings.resizableHandlerCssClass);

            this.$container.prepend(skedulerElResizableHandler);

            skedulerElResizableHandler.width(this.$container.width());

            var resizableSliderHeight = this.$scheduleEl.height() + this.$headerContainer.height();
            var index = 0;
            this.$headerContainer.find('div').each(function (_, el) {
                div(_this3.settings.resizableSliderCssClass).css('left', el.offsetLeft + el.clientWidth).height(resizableSliderHeight).data('column-id', index++).appendTo(skedulerElResizableHandler);
            });

            skedulerElResizableHandler.on('mousedown', '.' + this.settings.resizableSliderCssClass, this.onResizePointerDown.bind(this));
        }
    }, {
        key: 'appendAvailableInterval',
        value: function appendAvailableInterval(placeholder, intervals, column) {
            var _this4 = this;

            intervals.forEach(function (interval, index) {
                var innerContent = div().text(_this4.settings.notAllocatedLabel);
                var top = _this4.getCardTopPosition(interval.start) + 2;
                var duration = (0, _utils.parseTime)(interval.end) - (0, _utils.parseTime)(interval.start);
                var height = _this4.getCardHeight(duration) - 5;

                var skItemHightlightDiv = div(_this4.settings.itemsOptions.highlightItemCss).hide();

                var shiftDiv = div().attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px'
                });

                shiftDiv.data('column', column).data('item-index', index).append(innerContent).append(skItemHightlightDiv).appendTo(placeholder);

                _this4.appendTasks(shiftDiv, interval.start, _this4.settings.tasks.filter(function (t) {
                    return t.column == column;
                }));
                // TODO: ^^^ filter by shift interval too
            }, this);
        }

        /** 
         * Generate task cards
         */
    }, {
        key: 'appendTasks',
        value: function appendTasks(placeholder, intervalStart, tasks) {
            var _this5 = this;

            tasks.forEach(function (task) {
                var top = _this5.getCardTopPosition(task.start, intervalStart);
                var height = _this5.getCardHeight(task.item.duration / 60);

                _this5.getItemDiv(task.item).attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px'
                }).addClass('' + _this5.settings.itemsOptions.itemCardCssClass).addClass(_this5.settings.itemsOptions.itemCardCssClass + '-pinned').width('auto').data('index', task.item.index).data('assigned', 1).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'onResizePointerUp',
        value: function onResizePointerUp(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            this.$ownerDocument.off('mouseup');
            this.$ownerDocument.off('mousemove');

            this.operation = null;
        }
    }, {
        key: 'onResizePointerMove',
        value: function onResizePointerMove(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            // Determine the delta change between start and new mouse position, as a percentage of the table width
            var difference = event.pageX - op.startX; // / this.$scheduleEl.width() * 100;
            if (difference === 0) {
                return;
            }

            var columnNumber = op.columnNumber;
            var width = op.width + difference;
            if (this.resizeAllColumns) {
                for (var i = 0; i < this.settings.data.length; i++) {
                    this.updateColumnWidth(i, width.toFixed(2));
                }
            } else {
                this.updateColumnWidth(columnNumber, width.toFixed(2));
            }
        }
    }, {
        key: 'onResizePointerDown',
        value: function onResizePointerDown(event) {
            // Only applies to left-click dragging
            if (event.which !== 1) {
                return;
            }

            // If a previous this.operation is defined, we missed the last mouseup.
            // Probably gobbled up by user mousing out the window then releasing.
            // We'll simulate a pointerup here prior to it
            if (this.operation) {
                this.Resize(event);
            }

            var $currentGrip = $(event.currentTarget);
            var columnNumber = $currentGrip.data('column-id');

            var gripIndex = $currentGrip.index();
            var $leftColumn = this.$headerContainer.find('div').eq(gripIndex);

            var leftWidth = $leftColumn[0].clientWidth;

            this.operation = {
                columnNumber: columnNumber,
                startX: event.pageX,
                width: leftWidth
            };

            this.$ownerDocument.on('mousemove', this.onResizePointerMove.bind(this));
            this.$ownerDocument.on('mouseup', this.Resize.bind(this));

            event.preventDefault();
        }
    }, {
        key: 'updateColumnWidth',
        value: function updateColumnWidth(columnNumber, width) {
            width = Math.max(width, this.settings.minColumnWidth);
            $('.' + this.settings.headerContainerCssClass + ' > div:eq(' + columnNumber + ')').css('flex-basis', width + 'px');

            var column = $('.' + this.settings.schedulerContainerCssClass + '-body > div:eq(' + columnNumber + ') > .' + this.settings.cellCssClass);
            var diff = column.width() - width;
            column.width(width);

            $('.' + this.settings.resizableHandlerCssClass + ' > div').each(function (index, el) {
                if (index >= columnNumber) {
                    var $el = $(el);
                    var left = parseInt($el.css('left').replace('px', ''));
                    $el.css('left', left - diff);
                }
            });
        }
    }, {
        key: 'getItemDiv',
        value: function getItemDiv(item) {
            var $div = div(this.settings.itemsOptions.itemCardCssClass);
            var template = (0, _template.compileTemplate)(this.settings.itemsOptions.itemCardTemplate, {
                time: function time(item) {
                    return item.interval ? item.interval.start + ' to ' + item.interval.end : '';
                }
            });

            return div().html(template(item));
        }

        /**
        * Convert double value of hours to zero-preposited string with 30 or 00 value of minutes
        */
    }, {
        key: 'toTimeString',
        value: function toTimeString(value) {
            return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');
        }

        /**
         * Return height of task card based on duration of the task
         * duration - in hours
         */
    }, {
        key: 'getCardHeight',
        value: function getCardHeight(duration) {
            var durationInMinutes = duration * 60;
            var heightOfMinute = (this.settings.lineHeight + this.settings.borderWidth) * this.settings.rowsPerHour / 60;
            return Math.ceil(durationInMinutes * heightOfMinute);
        }

        /**
         * Return top offset of task card based on start time of the task
         * startTime - in hours
         */
    }, {
        key: 'getCardTopPosition',
        value: function getCardTopPosition(startTime, offsetTime) {
            var startTimeInt = (0, _utils.parseTime)(startTime);
            if (offsetTime) {
                startTimeInt -= (0, _utils.parseTime)(offsetTime);
            }
            return (this.settings.lineHeight + this.settings.borderWidth) * (startTimeInt * this.settings.rowsPerHour);
        }
    }]);

    return Skeduler;
})();

exports['default'] = Skeduler;
module.exports = exports['default'];

},{"./items":3,"./settings":4,"./template":6,"./utils":7}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var compileTemplate = function compileTemplate(template, funcs) {
    return function (item) {
        var result = template;
        var regKeys = /\$\{(\w+)\}/g;
        var regFuncs = /\$\{(\w+)\(\)\}/g;

        var match = 1;
        while (true) {
            match = regKeys.exec(template);
            if (!match) break;

            var key = match[1];
            if (item.hasOwnProperty(key)) {
                result = result.replace(match[0], item[key]);
            }
        }

        while (funcs) {
            match = regFuncs.exec(template);
            if (!match) break;

            var key = match[1];
            if (funcs.hasOwnProperty(key)) {
                result = result.replace(match[0], funcs[key](item));
            }
        }

        return result;
    };
};

exports["default"] = { compileTemplate: compileTemplate };
module.exports = exports["default"];

},{}],7:[function(require,module,exports){
/**
 * Parse time string and present it in hours (ex. '13:30' => 13.5)
 * @param {*string} time - time in format like '13:50', '11:00', '14'
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.parseTime = parseTime;
exports.toTime = toTime;

function parseTime(time) {
    return (/\d{1,2}\:\d{2}/.test(time) ? parseInt(time.split(':')[0]) + parseInt(time.split(':')[1]) / 60 : parseInt(time)
    );
}

function toTime(value) {
    // TODO: vvv fix me
    return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');
}

},{}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWRhcHRlci5qcyIsInNyYy9pbmRleC5qcyIsInNyYy9pdGVtcy9pbmRleC5qcyIsInNyYy9zZXR0aW5ncy5qcyIsInNyYy9za2VkdWxlci5qcyIsInNyYy90ZW1wbGF0ZS9pbmRleC5qcyIsInNyYy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7d0JDQXFCLFlBQVk7Ozs7Ozs7Ozs7Ozs7OztBQWFqQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUM5QixNQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekIsTUFBSSxRQUFRLEdBQUcsMEJBQWEsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDOztBQUVqRCxTQUFPLFFBQVEsQ0FBQztDQUNuQixDQUFDOztBQUVGLENBQUMsQ0FBQyxRQUFRLHdCQUFXLENBQUM7Ozs7Ozs7Ozs7O3dCQ3BCRCxZQUFZOzs7O3VCQUNiLFdBQVc7Ozs7Ozs7Ozs7Ozs7O3dCQ0RDLGFBQWE7O3FCQUNYLFVBQVU7O0FBRTVDLElBQU0sR0FBRyxHQUFHLFNBQU4sR0FBRyxDQUFJLFFBQVE7V0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztDQUFBLENBQUM7O0FBRTlELElBQU0sV0FBVyxHQUFHLFNBQWQsV0FBVyxDQUFJLFFBQVEsRUFBSztBQUM5QixRQUFNLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3pELFFBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7QUFDN0IsUUFBTSxRQUFRLEdBQUcsK0JBQWdCLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUU7QUFDckUsWUFBSSxFQUFFLGNBQUMsSUFBSTttQkFBSyxJQUFJLENBQUMsUUFBUSxHQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxZQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFLLEVBQUU7U0FBQTtLQUN4RixDQUFDLENBQUM7O0FBRUgsV0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBSTtlQUFLLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FDbEMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7S0FBQSxDQUN4QixDQUFDO0NBQ0wsQ0FBQTs7QUFFRCxJQUFNLGFBQWEsR0FBRyxTQUFoQixhQUFhLENBQUksUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUs7QUFDdkQsWUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2pDLFFBQU0sWUFBWSxHQUFHLFFBQVEsR0FBRyxXQUFXLENBQUM7O0FBRTVDLFdBQU8sbUJBQU8sWUFBWSxHQUFHLHNCQUFVLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0NBQzNELENBQUE7O0FBRUQsSUFBTSxxQkFBcUIsR0FBRyxTQUF4QixxQkFBcUIsQ0FBSSxRQUFRLEVBQUs7QUFDeEMsUUFBTSxPQUFPLEdBQUcsU0FBVixPQUFPLENBQUksS0FBSyxFQUFFLFVBQVUsRUFBSztBQUNuQyxlQUFPLFVBQVUsR0FDWCxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUM7bUJBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSztTQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQzFELFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQzttQkFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUs7U0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDMUQsQ0FBQTs7QUFFRCxRQUFNLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLENBQzlELEtBQUssRUFBRSxDQUNQLFFBQVEsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ25ELFFBQU0sY0FBYyxHQUFHLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUM1RCxRQUFNLE9BQU8sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxvQ0FBb0MsR0FBRyxRQUFRLENBQUMsQ0FBQzs7QUFFbEYsUUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFLENBQ25CLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FDdEUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7O0FBRWhDLFFBQU0seUJBQXlCLEdBQUcsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RELFFBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNuQyxVQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRSxFQUFJO0FBQ2pCLGlDQUF5QixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN4QyxDQUFDLENBQUM7QUFDSCw2QkFBeUIsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFckQsUUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDOztBQUVyQixRQUFNLE9BQU8sR0FBRyxTQUFWLE9BQU8sQ0FBSSxLQUFLLEVBQUs7QUFDdkIsWUFBSSxTQUFTLElBQUksSUFBSSxFQUFFLE9BQU87O3lCQUVZLFNBQVM7WUFBM0MsV0FBVyxjQUFYLFdBQVc7WUFBRSxLQUFLLGNBQUwsS0FBSztZQUFFLFNBQVMsY0FBVCxTQUFTOztBQUVyQyxZQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLENBQUM7O0FBRTNFLFlBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbEQsWUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEQsWUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQzs7QUFFeEMsWUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO0FBQ2pELGdCQUFJLFVBQVUsRUFBRTtBQUNaLHdCQUFRLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQzsyQkFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLO2lCQUFBLENBQUMsQ0FBQztBQUNuRSx3QkFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDN0I7O0FBRUQsdUJBQVcsQ0FDTixNQUFNLEVBQUUsQ0FDUixHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQ2QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUNiLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQ25CLFdBQVcsQ0FBSSxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixhQUFVLENBQy9ELFdBQVcsQ0FBSSxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixhQUFVLENBQy9ELFFBQVEsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDOztBQUV6Qyx1QkFBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkMsaUJBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDdkQsZ0JBQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLGdCQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELGdCQUFJLGVBQWUsR0FBRyxzQkFBVSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7O0FBRWhELGdCQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzs7QUFFN0Ysb0JBQVEsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLElBQUksUUFBUSxDQUFDLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLElBQUksRUFBSixJQUFJLEVBQUUsUUFBUSxFQUFSLFFBQVEsRUFBRSxlQUFlLEVBQWYsZUFBZSxFQUFFLENBQUMsQ0FBQzs7QUFFOUgsdUJBQVcsQ0FDTixNQUFNLEVBQUUsQ0FDUixHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FDekMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FDN0IsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUNiLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQ25CLFdBQVcsQ0FBSSxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixhQUFVLENBQy9ELFFBQVEsQ0FBSSxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixhQUFVLENBQzVELFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQzs7QUFFOUIsdUJBQVcsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZDLGlCQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7O0FBRWYsZ0JBQUksQ0FBQyxVQUFVLEVBQUU7QUFDYix3QkFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDaEIsMEJBQU0sRUFBTixNQUFNO0FBQ04seUJBQUssRUFBRSxTQUFTO0FBQ2hCLHdCQUFJLEVBQUosSUFBSTtpQkFDUCxDQUFDLENBQUM7YUFDTixNQUFNO0FBQ0gsb0JBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQzsyQkFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLO2lCQUFBLENBQUMsQ0FBQztBQUM1RCxvQkFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLEVBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2FBQzVCOztBQUVELG9CQUFRLENBQUMsWUFBWSxDQUFDLGlCQUFpQixJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUosSUFBSSxFQUFFLFFBQVEsRUFBUixRQUFRLEVBQUUsZUFBZSxFQUFmLGVBQWUsRUFBRSxDQUFDLENBQUM7U0FDM0gsTUFBTTtBQUNILHVCQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDckIsaUJBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNoQjs7QUFFRCxTQUFDLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN2RCxpQ0FBeUIsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDckQsaUNBQXlCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFOUMsaUJBQVMsR0FBRyxJQUFJLENBQUM7QUFDakIsc0JBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzNDLHNCQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUMxQyxDQUFDOztBQUVGLFFBQU0sU0FBUyxHQUFHLFNBQVosU0FBUyxDQUFJLEtBQUssRUFBSztBQUN6QixZQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUUsT0FBTzs7MEJBRVksU0FBUztZQUEzQyxXQUFXLGVBQVgsV0FBVztZQUFFLE9BQU8sZUFBUCxPQUFPO1lBQUUsT0FBTyxlQUFQLE9BQU87O0FBRXJDLFlBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLEdBQUcsT0FBTztZQUNwQyxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUM7O0FBRXZDLG1CQUFXLENBQUMsR0FBRyxDQUFDO0FBQ1osZUFBRyxFQUFFLFVBQVUsR0FBRyxJQUFJO0FBQ3RCLGdCQUFJLEVBQUUsVUFBVSxHQUFHLElBQUk7U0FDMUIsQ0FBQyxDQUFDOzs7QUFHSCxZQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0FBQzlDLFlBQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFDdEIsWUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDOztBQUV4QyxZQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUMxQyxZQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDOztBQUV6QyxZQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2xELFlBQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2xELFlBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDeEMsWUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUMvQixZQUFNLE1BQU0sR0FBRyxRQUFRLElBQUksU0FBUyxHQUFHLFdBQVcsR0FBRyxFQUFFLENBQUEsQUFBQyxDQUFDOztBQUV6RCxpQ0FBeUIsQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN2QyxnQkFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RCLGdCQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQzs7QUFFckQsZ0JBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxLQUFLLElBQ3JELENBQUMsR0FBRyxlQUFlLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFO0FBQ3ZELHFCQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzlCLHlDQUF5QixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDakQsTUFBTTtBQUNILHFCQUFLLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2pDLHlDQUF5QixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDakQ7U0FDSixDQUFDLENBQUM7QUFDSCxlQUFPLENBQUMsSUFBSSxDQUFDLFlBQVk7QUFDckIsZ0JBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QixnQkFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7QUFDckQsZ0JBQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFckUsZ0JBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxLQUFLLElBQ3JELENBQUMsR0FBRyxlQUFlLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxFQUFFOztBQUV2RCxvQkFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUM7QUFDMUMsb0JBQU0sUUFBUSxHQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQUFBQyxDQUFDO0FBQ3pELG9CQUFNLElBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLEdBQUcsU0FBUyxDQUFDLEVBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUM3QixDQUFDOztBQUVGLG9CQUFNLGVBQWUsR0FBRyxFQUFFLEdBQUcsUUFBUSxDQUFDLFdBQVcsSUFBSSxJQUFHLEdBQUcsU0FBUyxDQUFBLEFBQUMsQ0FBQztBQUN0RSxvQkFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ2xHLG9CQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDOztBQUVyRix5QkFBUyxDQUFDLFNBQVMsR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQzs7QUFFckUsbUJBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBRyxFQUFFLENBQUMsQ0FDaEIsR0FBRyxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FDMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUNkLElBQUksRUFBRSxDQUFDOztBQUdaLG1CQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6QyxNQUFNO0FBQ0gsbUJBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLG1CQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDZDtTQUNKLENBQUMsQ0FBQztLQUNOLENBQUM7O0FBRUYsUUFBTSxTQUFTLEdBQUcsU0FBWixTQUFTLENBQUksS0FBSyxvQkFBdUI7QUFDM0MsWUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUFFLG1CQUFPO1NBQUU7O0FBRWxDLFlBQU0sZ0JBQWdCLEdBQUcsQ0FBQyxPQUFLLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBRyxDQUFDO0FBQ25FLFlBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7O0FBRXJDLFlBQU0sV0FBVyxHQUNiLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FDUixJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FDbEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQ3hDLFFBQVEsQ0FBSSxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixhQUFVLENBQzVELFdBQVcsQ0FBSSxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixhQUFVLENBQy9ELEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDcEIsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Ozs7QUFJcEMsWUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTztZQUN2QyxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDOztBQUUxQyxtQkFBVyxDQUFDLEdBQUcsQ0FBQztBQUNaLGVBQUcsRUFBRSxPQUFPLEdBQUcsSUFBSTtBQUNuQixnQkFBSSxFQUFFLE9BQU8sR0FBRyxJQUFJO1NBQ3ZCLENBQUMsQ0FBQzs7QUFFSCxpQkFBUyxHQUFHO0FBQ1IsaUJBQUssRUFBTCxLQUFLO0FBQ0wsdUJBQVcsRUFBWCxXQUFXO0FBQ1gsbUJBQU8sRUFBRSxLQUFLLENBQUMsT0FBTztBQUN0QixtQkFBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3pCLENBQUM7O0FBRUYsWUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUM1QyxZQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNsRCxZQUFNLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDOztBQUV4QyxhQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7O0FBRWIsc0JBQWMsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzFDLHNCQUFjLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQzs7QUFFdEMsYUFBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQzFCLENBQUM7O0FBRUYsS0FBQyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztDQUM5RSxDQUFBOztxQkFFYyxxQkFBcUI7Ozs7Ozs7Ozs7QUMzUHBDLElBQU0sZUFBZSxHQUFHOztBQUVwQixXQUFPLEVBQUUsSUFBSTtBQUNiLFNBQUssRUFBRSxFQUFFOzs7QUFHVCxTQUFLLEVBQUUsRUFBRTs7QUFFVCxxQkFBaUIsRUFBRSxlQUFlOzs7O0FBSWxDLGdCQUFZLEVBQUUsa0JBQWtCOzs7QUFHaEMsMkJBQXVCLEVBQUUsa0JBQWtCO0FBQzNDLHFCQUFpQixFQUFFLG9CQUFvQjtBQUN2QywyQkFBdUIsRUFBRSxrQkFBa0I7QUFDM0MsOEJBQTBCLEVBQUUsZUFBZTtBQUMzQywyQkFBdUIsRUFBRSwyQkFBMkI7QUFDcEQsd0NBQW9DLEVBQUUsK0JBQStCO0FBQ3JFLGdCQUFZLEVBQUUsZUFBZTtBQUM3Qiw0QkFBd0IsRUFBRSxtQkFBbUI7QUFDN0MsMkJBQXVCLEVBQUUsa0JBQWtCOztBQUUzQyxjQUFVLEVBQUUsRUFBRTtBQUNkLGVBQVcsRUFBRSxDQUFDO0FBQ2QsZUFBVyxFQUFFLEdBQUc7QUFDaEIsa0JBQWMsRUFBRSxHQUFHOztBQUVuQixlQUFXLEVBQUUsQ0FBQzs7QUFFZCx1QkFBbUIsRUFBRSxJQUFJOztBQUV6QixTQUFLLEVBQUUsS0FBSzs7QUFFWixnQkFBWSxFQUFFO0FBQ1YsZUFBTyxFQUFFLEtBQUs7QUFDZCxxQkFBYSxFQUFFLGdCQUFnQjtBQUMvQix3QkFBZ0IsRUFBRSxtQkFBbUI7QUFDckMseUJBQWlCLEVBQUUsaUJBQWlCO0FBQ3BDLHdCQUFnQixFQUFFLFNBQVM7QUFDM0Isd0JBQWdCLEVBQUUsd0JBQXdCO0FBQzFDLGFBQUssRUFBRSxPQUFPO0FBQ2QsNEJBQW9CLEVBQUUsZ0NBQU07QUFBRSxtQkFBTyxDQUFDLEdBQUcsWUFBVyxDQUFDO1NBQUU7QUFDdkQseUJBQWlCLEVBQUUsNkJBQU07QUFBRSxtQkFBTyxDQUFDLEdBQUcsWUFBVyxDQUFDO1NBQUU7QUFDcEQsaUJBQVMsRUFBRSxxQkFBTTtBQUFFLG1CQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFBO1NBQUU7S0FDOUM7Q0FDSixDQUFDOztRQUVPLGVBQWUsR0FBZixlQUFlOzs7Ozs7Ozs7Ozs7Ozs7d0JDbERRLFlBQVk7O3FCQUNWLFNBQVM7Ozs7d0JBQ1gsWUFBWTs7cUJBQ2xCLFNBQVM7O0FBRW5DLElBQU0sR0FBRyxHQUFHLFNBQU4sR0FBRyxDQUFJLFFBQVE7V0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztDQUFBLENBQUM7O0lBRXhELFFBQVE7QUFDQyxhQURULFFBQVEsQ0FDRSxVQUFVLEVBQUUsT0FBTyxFQUFFOzhCQUQvQixRQUFROztBQUVOLFlBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDZCQUFtQixPQUFPLENBQUMsQ0FBQztBQUN6RCxZQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztBQUM3QixZQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDckQsWUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztBQUM3QixZQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQTtBQUN2QixZQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUN0QixZQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDOztBQUU3QixZQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO0FBQ3JCLG1CQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzVCOztBQUVELFlBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFFZixZQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO0FBQ3JCLG1CQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQy9CO0tBQ0o7O2lCQW5CQyxRQUFROztlQXFCSSx3QkFBQyxXQUFXLEVBQUU7QUFDeEIsZ0JBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUN4QyxnQkFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2xCOzs7ZUFFa0IsNkJBQUMsZ0JBQWdCLEVBQUU7QUFDbEMsZ0JBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztTQUM1Qzs7O2VBRU0sbUJBQUc7OztBQUNOLGdCQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ2hFLFVBQUMsSUFBSSxFQUFFLEtBQUs7dUJBQUssTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUwsS0FBSyxFQUFDLEVBQUUsSUFBSSxDQUFDO2FBQUEsQ0FDcEQsSUFBSSxFQUFFLENBQUM7QUFDUixnQkFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNoRSxVQUFDLElBQUksRUFBRSxLQUFLLEVBQUs7QUFDYixvQkFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFDLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBSyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0Rix1QkFBTyxJQUFJLENBQUM7YUFDZixDQUNKLElBQUksRUFBRSxDQUFDOztBQUVSLGdCQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDaEIsZ0JBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO0FBQ3BDLHdDQUFzQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDeEM7U0FDSjs7O2VBRU8sb0JBQUc7OztBQUNQLGdCQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3hCLGdCQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7O0FBRTFELGdCQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sR0FDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7QUFHcEQsZ0JBQUksQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQ25FLG1CQUFPLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFLO0FBQ3pCLG1CQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQ2QsUUFBUSxDQUFDLE9BQUssZ0JBQWdCLENBQUMsQ0FBQzthQUN4QyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ1QsZ0JBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOzs7QUFHOUMsZ0JBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUNqRSxnQkFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsR0FBRyxXQUFXLENBQUMsQ0FBQztBQUN2RixnQkFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLEdBQUcsT0FBTyxDQUFDLENBQUM7O0FBRS9FLGdCQUFNLGlCQUFpQixHQUFHLEdBQUcsRUFBRSxDQUFDOztBQUVoQyxpQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTs7QUFFekIscUJBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCx3QkFBSSxZQUFZLEdBQUcsR0FBRyxFQUFFLENBQ25CLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUNoQyxRQUFRLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7O0FBRWhFLHdCQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDUixvQ0FBWSxHQUFHLFlBQVksQ0FDdEIsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FDbkQsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztxQkFDakQ7QUFDRCxnQ0FBWSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOztBQUUxQyx1QkFBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQzFCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUNoQyxRQUFRLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLENBQUMsR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQzFELFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2lCQUNwQzthQUNKOzs7QUFHRCxpQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDckMsb0JBQU0sRUFBRSxHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDOzs7QUFHckMsb0JBQU0sNkJBQTZCLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsb0NBQW9DLENBQUMsQ0FBQztBQUM5RixvQkFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7QUFDM0Qsb0JBQUksQ0FBQyx1QkFBdUIsQ0FBQyw2QkFBNkIsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7O0FBRTFFLGtCQUFFLENBQUMsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFDMUMsa0JBQUUsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBRTVCLG9CQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDeEQ7O0FBRUQsZ0JBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDNUMsZ0JBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDOztBQUV4QyxnQkFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOzs7QUFHekMsaUJBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ3JDLG9CQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDeEQ7OztBQUdELGdCQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUU7QUFDbkMsb0JBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO2FBQzVCO1NBQ0o7OztlQUVJLGlCQUFHO0FBQ0osbUJBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7U0FDOUI7OztlQUVnQiw2QkFBRzs7O0FBQ2hCLGdCQUFNLDBCQUEwQixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUM7O0FBRS9FLGdCQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDOztBQUVwRCxzQ0FBMEIsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDOztBQUUxRCxnQkFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUN6RixnQkFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ2QsZ0JBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBSztBQUM5QyxtQkFBRyxDQUFDLE9BQUssUUFBUSxDQUFDLHVCQUF1QixDQUFDLENBQ3JDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQzNDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUM3QixJQUFJLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQzFCLFFBQVEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO2FBQzVDLENBQUMsQ0FBQzs7QUFFSCxzQ0FBMEIsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNoSTs7O2VBRXNCLGlDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFOzs7QUFDcEQscUJBQVMsQ0FBQyxPQUFPLENBQUMsVUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFLO0FBQ25DLG9CQUFNLFlBQVksR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBSyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUNqRSxvQkFBTSxHQUFHLEdBQUcsT0FBSyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hELG9CQUFNLFFBQVEsR0FBRyxzQkFBVSxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsc0JBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JFLG9CQUFNLE1BQU0sR0FBRyxPQUFLLGFBQWEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7O0FBRWhELG9CQUFNLG1CQUFtQixHQUFHLEdBQUcsQ0FBQyxPQUFLLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFcEYsb0JBQU0sUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUNqQixJQUFJLENBQUM7QUFDRix5QkFBSyxFQUFFLE9BQU8sR0FBRyxHQUFHLEdBQUcsY0FBYyxHQUFHLE1BQU0sR0FBRyxJQUFJO2lCQUN4RCxDQUFDLENBQUM7O0FBRVAsd0JBQVEsQ0FDSCxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUN0QixJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxDQUN6QixNQUFNLENBQUMsWUFBWSxDQUFDLENBQ3BCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUMzQixRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7O0FBRTNCLHVCQUFLLFdBQVcsQ0FDWixRQUFRLEVBQ1IsUUFBUSxDQUFDLEtBQUssRUFDZCxPQUFLLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQzsyQkFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU07aUJBQUEsQ0FBQyxDQUFDLENBQUM7O2FBRzVELEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDWjs7Ozs7OztlQUtVLHFCQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFOzs7QUFDM0MsaUJBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUs7QUFDcEIsb0JBQUksR0FBRyxHQUFHLE9BQUssa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztBQUM3RCxvQkFBSSxNQUFNLEdBQUcsT0FBSyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUM7O0FBRXpELHVCQUFLLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQ3JCLElBQUksQ0FBQztBQUNGLHlCQUFLLEVBQUUsT0FBTyxHQUFHLEdBQUcsR0FBRyxjQUFjLEdBQUcsTUFBTSxHQUFHLElBQUk7aUJBQ3hELENBQUMsQ0FDRCxRQUFRLE1BQUksT0FBSyxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFHLENBQzFELFFBQVEsQ0FBSSxPQUFLLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLGFBQVUsQ0FDakUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUNiLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDOUIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FDbkIsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzlCLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDWjs7O2VBRWdCLDJCQUFDLEtBQUssRUFBRTtBQUNyQixnQkFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUN4QixnQkFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFBRSx1QkFBTzthQUFFOztBQUVoQyxnQkFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDbkMsZ0JBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDOztBQUVyQyxnQkFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7U0FDekI7OztlQUVrQiw2QkFBQyxLQUFLLEVBQUU7QUFDdkIsZ0JBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDeEIsZ0JBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO0FBQUUsdUJBQU87YUFBRTs7O0FBR2hDLGdCQUFJLFVBQVUsR0FBSSxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxNQUFNLEFBQUMsQ0FBQztBQUMzQyxnQkFBSSxVQUFVLEtBQUssQ0FBQyxFQUFFO0FBQ2xCLHVCQUFPO2FBQ1Y7O0FBRUQsZ0JBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUM7QUFDbkMsZ0JBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO0FBQ2xDLGdCQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtBQUN2QixxQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNoRCx3QkFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQy9DO2FBQ0osTUFBTTtBQUNILG9CQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMxRDtTQUNKOzs7ZUFFa0IsNkJBQUMsS0FBSyxFQUFFOztBQUV2QixnQkFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtBQUFFLHVCQUFPO2FBQUU7Ozs7O0FBS2xDLGdCQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDaEIsb0JBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdEI7O0FBRUQsZ0JBQUksWUFBWSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDMUMsZ0JBQUksWUFBWSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7O0FBRWxELGdCQUFJLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDckMsZ0JBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDOztBQUVsRSxnQkFBSSxTQUFTLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQzs7QUFFM0MsZ0JBQUksQ0FBQyxTQUFTLEdBQUc7QUFDYiw0QkFBWSxFQUFaLFlBQVk7QUFDWixzQkFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLO0FBQ25CLHFCQUFLLEVBQUUsU0FBUzthQUNuQixDQUFDOztBQUVGLGdCQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3pFLGdCQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7QUFFMUQsaUJBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUMxQjs7O2VBRWdCLDJCQUFDLFlBQVksRUFBRSxLQUFLLEVBQUU7QUFDbkMsaUJBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3RELGFBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsR0FBRyxZQUFZLEdBQUcsWUFBWSxHQUFHLEdBQUcsQ0FBQyxDQUM3RSxHQUFHLENBQUMsWUFBWSxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQzs7QUFFckMsZ0JBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQywwQkFBMEIsR0FBRyxpQkFBaUIsR0FBRyxZQUFZLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDekksZ0JBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxLQUFLLENBQUM7QUFDbEMsa0JBQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7O0FBRXBCLGFBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsR0FBRyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFLO0FBQzNFLG9CQUFJLEtBQUssSUFBSSxZQUFZLEVBQUU7QUFDdkIsd0JBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQix3QkFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELHVCQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUM7aUJBQ2hDO2FBQ0osQ0FBQyxDQUFDO1NBQ047OztlQUVTLG9CQUFDLElBQUksRUFBRTtBQUNiLGdCQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM5RCxnQkFBTSxRQUFRLEdBQUcsK0JBQWdCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFO0FBQzFFLG9CQUFJLEVBQUUsY0FBQyxJQUFJOzJCQUFLLElBQUksQ0FBQyxRQUFRLEdBQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLFlBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUssRUFBRTtpQkFBQTthQUN4RixDQUFDLENBQUM7O0FBRUgsbUJBQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3JDOzs7Ozs7O2VBS1csc0JBQUMsS0FBSyxFQUFFO0FBQ2hCLG1CQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFBLEdBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQSxBQUFDLENBQUM7U0FDL0c7Ozs7Ozs7O2VBTVksdUJBQUMsUUFBUSxFQUFFO0FBQ3BCLGdCQUFNLGlCQUFpQixHQUFHLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDeEMsZ0JBQU0sY0FBYyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUEsR0FBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDL0csbUJBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxjQUFjLENBQUMsQ0FBQztTQUN4RDs7Ozs7Ozs7ZUFNaUIsNEJBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRTtBQUN0QyxnQkFBSSxZQUFZLEdBQUcsc0JBQVUsU0FBUyxDQUFDLENBQUM7QUFDeEMsZ0JBQUksVUFBVSxFQUFFO0FBQ1osNEJBQVksSUFBSSxzQkFBVSxVQUFVLENBQUMsQ0FBQzthQUN6QztBQUNELG1CQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUEsSUFBSyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUEsQUFBQyxDQUFDO1NBQzlHOzs7V0F6VEMsUUFBUTs7O3FCQTRUQyxRQUFROzs7Ozs7Ozs7QUNuVXZCLElBQU0sZUFBZSxHQUFHLFNBQWxCLGVBQWUsQ0FBSSxRQUFRLEVBQUUsS0FBSztXQUFLLFVBQUEsSUFBSSxFQUFJO0FBQ2pELFlBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQztBQUN0QixZQUFNLE9BQU8sR0FBRyxjQUFjLENBQUM7QUFDL0IsWUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUM7O0FBRXBDLFlBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNkLGVBQU8sSUFBSSxFQUFFO0FBQ1QsaUJBQUssR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLGdCQUFJLENBQUMsS0FBSyxFQUFFLE1BQU07O0FBRWxCLGdCQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkIsZ0JBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUMxQixzQkFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ2hEO1NBQ0o7O0FBRUQsZUFBTyxLQUFLLEVBQUU7QUFDVixpQkFBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEMsZ0JBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTTs7QUFFbEIsZ0JBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQixnQkFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzNCLHNCQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDdkQ7U0FDSjs7QUFFRCxlQUFPLE1BQU0sQ0FBQztLQUNqQjtDQUFBLENBQUE7O3FCQUVjLEVBQUUsZUFBZSxFQUFmLGVBQWUsRUFBRTs7Ozs7Ozs7Ozs7Ozs7OztBQ3pCM0IsU0FBUyxTQUFTLENBQUMsSUFBSSxFQUFFO0FBQzVCLFdBQU8saUJBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUM5QixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUNoRSxRQUFRLENBQUMsSUFBSSxDQUFDO01BQUM7Q0FDdEI7O0FBRU0sU0FBUyxNQUFNLENBQUMsS0FBSyxFQUFFOztBQUUxQixXQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFBLEdBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQSxBQUFDLENBQUM7Q0FDL0ciLCJmaWxlIjoianF1ZXJ5LnNrZWR1bGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgU2tlZHVsZXIgZnJvbSAnLi9za2VkdWxlcic7XG5cbi8qKlxuICogR2VuZXJhdGUgc2NoZWR1bGVyIGdyaWQgd2l0aCB0YXNrIGNhcmRzXG4gKiBvcHRpb25zOlxuICogLSBoZWFkZXJzOiBzdHJpbmdbXSAtIGFycmF5IG9mIGhlYWRlcnNcbiAqIC0gdGFza3M6IFRhc2tbXSAtIGFycmF5IG9mIHRhc2tzXG4gKiAtIGNvbnRhaW5lckNzc0NsYXNzOiBzdHJpbmcgLSBjc3MgY2xhc3Mgb2YgbWFpbiBjb250YWluZXJcbiAqIC0gaGVhZGVyQ29udGFpbmVyQ3NzQ2xhc3M6IHN0cmluZyAtIGNzcyBjbGFzcyBvZiBoZWFkZXIgY29udGFpbmVyXG4gKiAtIHNjaGVkdWxlckNvbnRhaW5lckNzc0NsYXNzOiBzdHJpbmcgLSBjc3MgY2xhc3Mgb2Ygc2NoZWR1bGVyXG4gKiAtIGxpbmVIZWlnaHQgLSBoZWlnaHQgb2Ygb25lIGhhbGYtaG91ciBjZWxsIGluIGdyaWRcbiAqIC0gYm9yZGVyV2lkdGggLSB3aWR0aCBvZiBib3JkZXIgb2YgY2VsbCBpbiBncmlkXG4gKi9cbiQuZm4uc2tlZHVsZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgbGV0ICRjb250YWluZXIgPSAkKHRoaXMpO1xuICAgIHZhciBza2VkdWxlciA9IG5ldyBTa2VkdWxlcigkY29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgIHJldHVybiBza2VkdWxlcjtcbn07XG5cbiQuc2tlZHVsZXIgPSBTa2VkdWxlcjsiLCJpbXBvcnQgU2tlZHVsZXIgZnJvbSAnLi9za2VkdWxlcic7XG5pbXBvcnQgYWRhcHRlciBmcm9tICcuL2FkYXB0ZXInO1xuXG5leHBvcnQgZGVmYXVsdCBTa2VkdWxlcjsiLCJpbXBvcnQgeyBjb21waWxlVGVtcGxhdGUgfSBmcm9tICcuLi90ZW1wbGF0ZSc7XG5pbXBvcnQgeyBwYXJzZVRpbWUsIHRvVGltZSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgZGl2ID0gKGNzc0NsYXNzKSA9PiAkKCc8ZGl2PjwvZGl2PicpLmFkZENsYXNzKGNzc0NsYXNzKTtcblxuY29uc3QgZ2V0SXRlbURpdnMgPSAoc2V0dGluZ3MpID0+IHtcbiAgICBjb25zdCAkZGl2ID0gZGl2KHNldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtQ2FyZENzc0NsYXNzKTtcbiAgICBjb25zdCBpdGVtcyA9IHNldHRpbmdzLml0ZW1zO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gY29tcGlsZVRlbXBsYXRlKHNldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtQ2FyZFRlbXBsYXRlLCB7XG4gICAgICAgIHRpbWU6IChpdGVtKSA9PiBpdGVtLmludGVydmFsID8gYCR7aXRlbS5pbnRlcnZhbC5zdGFydH0gdG8gJHtpdGVtLmludGVydmFsLmVuZH1gIDogJydcbiAgICB9KTtcblxuICAgIHJldHVybiBpdGVtcy5tYXAoKGl0ZW0pID0+ICRkaXYuY2xvbmUoKVxuICAgICAgICAuZGF0YSgnaW5kZXgnLCBpdGVtLmluZGV4KVxuICAgICAgICAuaHRtbCh0ZW1wbGF0ZShpdGVtKSlcbiAgICApO1xufVxuXG5jb25zdCBmaW5kU3RhcnRUaW1lID0gKHJvd0luZGV4LCByb3dzUGVySG91ciwgaW50ZXJ2YWwpID0+IHtcbiAgICByb3dJbmRleCA9IE1hdGgubWF4KDAsIHJvd0luZGV4KTtcbiAgICBjb25zdCBob3Vyc0Zyb21Ub3AgPSByb3dJbmRleCAvIHJvd3NQZXJIb3VyO1xuXG4gICAgcmV0dXJuIHRvVGltZShob3Vyc0Zyb21Ub3AgKyBwYXJzZVRpbWUoaW50ZXJ2YWwuc3RhcnQpKTtcbn1cblxuY29uc3QgcG9wdWxhdGVTa2VkdWxlckl0ZW1zID0gKHNldHRpbmdzKSA9PiB7XG4gICAgY29uc3QgZ2V0SXRlbSA9IChpbmRleCwgaXNBc3NpZ25lZCkgPT4ge1xuICAgICAgICByZXR1cm4gaXNBc3NpZ25lZFxuICAgICAgICAgICAgPyBzZXR0aW5ncy50YXNrcy5maWx0ZXIodCA9PiB0Lml0ZW0uaW5kZXggPT09IGluZGV4KVswXS5pdGVtXG4gICAgICAgICAgICA6IHNldHRpbmdzLml0ZW1zLmZpbHRlcihpID0+IGkuaW5kZXggPT09IGluZGV4KVswXTtcbiAgICB9XG5cbiAgICBjb25zdCAkc2tlZHVsZXJJdGVtc0VsID0gJChzZXR0aW5ncy5pdGVtc09wdGlvbnMuY29udGFpbmVyU2VsZWN0b3IpXG4gICAgICAgIC5lbXB0eSgpXG4gICAgICAgIC5hZGRDbGFzcyhzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbXNDc3NDbGFzcyk7XG4gICAgY29uc3QgJG93bmVyRG9jdW1lbnQgPSAkKCRza2VkdWxlckl0ZW1zRWxbMF0ub3duZXJEb2N1bWVudCk7XG4gICAgY29uc3QgJHNoaWZ0cyA9ICQoJy4nICsgc2V0dGluZ3MuYXZhaWxhYmxlSW50ZXJ2YWxQbGFjZWhvbGRlckNzc0NsYXNzICsgJyA+IGRpdicpO1xuXG4gICAgY29uc3QgJGhlYWRlckRpdiA9IGRpdigpXG4gICAgICAgIC5odG1sKCc8aDEgY2xhc3M9XCJzaS1oZWFkZXJcIj4nICsgc2V0dGluZ3MuaXRlbXNPcHRpb25zLnRpdGxlICsgJzwvaDE+JylcbiAgICAgICAgLmFwcGVuZFRvKCRza2VkdWxlckl0ZW1zRWwpO1xuXG4gICAgY29uc3QgJHNrZWR1bGVySXRlbXNDb250YWluZXJFbCA9IGRpdignc2ktY29udGFpbmVyJyk7XG4gICAgdmFyICRpdGVtcyA9IGdldEl0ZW1EaXZzKHNldHRpbmdzKTtcbiAgICAkaXRlbXMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICRza2VkdWxlckl0ZW1zQ29udGFpbmVyRWwuYXBwZW5kKGVsKTtcbiAgICB9KTtcbiAgICAkc2tlZHVsZXJJdGVtc0NvbnRhaW5lckVsLmFwcGVuZFRvKCRza2VkdWxlckl0ZW1zRWwpO1xuXG4gICAgbGV0IG9wZXJhdGlvbiA9IG51bGw7XG5cbiAgICBjb25zdCBtb3VzZVVwID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChvcGVyYXRpb24gPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHsgJG1vdmluZ0NhcmQsICRjYXJkLCBzdGFydFRpbWUgfSA9IG9wZXJhdGlvbjtcblxuICAgICAgICBjb25zdCAkc2lFbCA9ICQoJy4nICsgc2V0dGluZ3MuaXRlbXNPcHRpb25zLmhpZ2hsaWdodEl0ZW1Dc3MgKyAnOnZpc2libGUnKTsgLy8gZml4bWVcblxuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KCRtb3ZpbmdDYXJkLmRhdGEoJ2luZGV4JykpO1xuICAgICAgICBjb25zdCBpc0Fzc2lnbmVkID0gISEkbW92aW5nQ2FyZC5kYXRhKCdhc3NpZ25lZCcpO1xuICAgICAgICBjb25zdCBpdGVtID0gZ2V0SXRlbShpbmRleCwgaXNBc3NpZ25lZCk7XG5cbiAgICAgICAgaWYgKCRza2VkdWxlckl0ZW1zQ29udGFpbmVyRWwuZGF0YSgnc2VsZWN0ZWQnKSA9PSAxKSB7XG4gICAgICAgICAgICBpZiAoaXNBc3NpZ25lZCkge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzLnRhc2tzID0gc2V0dGluZ3MudGFza3MuZmlsdGVyKHQgPT4gdC5pdGVtLmluZGV4ICE9IGluZGV4KTtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy5pdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkbW92aW5nQ2FyZFxuICAgICAgICAgICAgICAgIC5kZXRhY2goKVxuICAgICAgICAgICAgICAgIC5jc3MoeyB0b3A6ICdhdXRvJywgbGVmdDogJ2F1dG8nIH0pXG4gICAgICAgICAgICAgICAgLmhlaWdodCgnYXV0bycpXG4gICAgICAgICAgICAgICAgLndpZHRoKCdhdXRvJylcbiAgICAgICAgICAgICAgICAuZGF0YSgnYXNzaWduZWQnLCAwKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhgJHtzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbUNhcmRDc3NDbGFzc30tbW92aW5nYClcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYCR7c2V0dGluZ3MuaXRlbXNPcHRpb25zLml0ZW1DYXJkQ3NzQ2xhc3N9LXBpbm5lZGApXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCRza2VkdWxlckl0ZW1zQ29udGFpbmVyRWwpO1xuXG4gICAgICAgICAgICAkbW92aW5nQ2FyZC5vbignbW91c2Vkb3duJywgbW91c2VEb3duKTtcbiAgICAgICAgICAgICRjYXJkLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKCRzaUVsLmxlbmd0aCAhPT0gMCAmJiAkc2lFbC5kYXRhKCdtYXRjaCcpID09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvd0hlaWdodCA9IHNldHRpbmdzLmxpbmVIZWlnaHQgKyAxO1xuICAgICAgICAgICAgY29uc3QgY29sdW1uID0gcGFyc2VJbnQoJHNpRWwucGFyZW50KCkuZGF0YSgnY29sdW1uJykpO1xuICAgICAgICAgICAgbGV0IG9mZnNldEluTWludXRlcyA9IHBhcnNlVGltZShzdGFydFRpbWUpICogNjA7XG5cbiAgICAgICAgICAgIGNvbnN0IGludGVydmFsID0gc2V0dGluZ3MuZGF0YVtjb2x1bW5dLmF2YWlsYWJsZUludGVydmFsc1skc2lFbC5wYXJlbnQoKS5kYXRhKCdpdGVtLWluZGV4JyldO1xuXG4gICAgICAgICAgICBzZXR0aW5ncy5pdGVtc09wdGlvbnMub25JdGVtV2lsbEJlQXNzaWduZWQgJiYgc2V0dGluZ3MuaXRlbXNPcHRpb25zLm9uSXRlbVdpbGxCZUFzc2lnbmVkKHsgaXRlbSwgaW50ZXJ2YWwsIG9mZnNldEluTWludXRlcyB9KTtcblxuICAgICAgICAgICAgJG1vdmluZ0NhcmRcbiAgICAgICAgICAgICAgICAuZGV0YWNoKClcbiAgICAgICAgICAgICAgICAuY3NzKHsgdG9wOiAkc2lFbFswXS5vZmZzZXRUb3AsIGxlZnQ6IDAgfSlcbiAgICAgICAgICAgICAgICAuaGVpZ2h0KCRzaUVsWzBdLmNsaWVudEhlaWdodClcbiAgICAgICAgICAgICAgICAud2lkdGgoJ2F1dG8nKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdhc3NpZ25lZCcsIDEpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGAke3NldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtQ2FyZENzc0NsYXNzfS1tb3ZpbmdgKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbUNhcmRDc3NDbGFzc30tcGlubmVkYClcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJHNpRWwucGFyZW50KCkpO1xuXG4gICAgICAgICAgICAkbW92aW5nQ2FyZC5vbignbW91c2Vkb3duJywgbW91c2VEb3duKTtcbiAgICAgICAgICAgICRjYXJkLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICBpZiAoIWlzQXNzaWduZWQpIHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncy50YXNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnRUaW1lLFxuICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCB0YXNrID0gc2V0dGluZ3MudGFza3MuZmluZCh0ID0+IHQuaXRlbS5pbmRleCA9PT0gaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRhc2suc3RhcnQgPSBzdGFydFRpbWUsXG4gICAgICAgICAgICAgICAgICAgIHRhc2suY29sdW1uID0gY29sdW1uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXR0aW5ncy5pdGVtc09wdGlvbnMub25JdGVtRGlkQXNzaWduZWQgJiYgc2V0dGluZ3MuaXRlbXNPcHRpb25zLm9uSXRlbURpZEFzc2lnbmVkKHsgaXRlbSwgaW50ZXJ2YWwsIG9mZnNldEluTWludXRlcyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICRtb3ZpbmdDYXJkLnJlbW92ZSgpO1xuICAgICAgICAgICAgJGNhcmQuc2hvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnLicgKyBzZXR0aW5ncy5pdGVtc09wdGlvbnMuaGlnaGxpZ2h0SXRlbUNzcykuaGlkZSgpO1xuICAgICAgICAkc2tlZHVsZXJJdGVtc0NvbnRhaW5lckVsLnJlbW92ZUNsYXNzKCdoaWdobGlnaHRlZCcpO1xuICAgICAgICAkc2tlZHVsZXJJdGVtc0NvbnRhaW5lckVsLmRhdGEoJ3NlbGVjdGVkJywgMCk7XG5cbiAgICAgICAgb3BlcmF0aW9uID0gbnVsbDtcbiAgICAgICAgJG93bmVyRG9jdW1lbnQub2ZmKCdtb3VzZW1vdmUnLCBtb3VzZU1vdmUpO1xuICAgICAgICAkb3duZXJEb2N1bWVudC5vZmYoJ21vdXNldXAnLCBtb3VzZVVwKTtcbiAgICB9O1xuXG4gICAgY29uc3QgbW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChvcGVyYXRpb24gPT0gbnVsbCkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IHsgJG1vdmluZ0NhcmQsIG9mZnNldFgsIG9mZnNldFkgfSA9IG9wZXJhdGlvbjtcblxuICAgICAgICBjb25zdCBuZXdPZmZzZXRYID0gZXZlbnQucGFnZVggLSBvZmZzZXRYLFxuICAgICAgICAgICAgbmV3T2Zmc2V0WSA9IGV2ZW50LnBhZ2VZIC0gb2Zmc2V0WTtcblxuICAgICAgICAkbW92aW5nQ2FyZC5jc3Moe1xuICAgICAgICAgICAgdG9wOiBuZXdPZmZzZXRZICsgJ3B4JyxcbiAgICAgICAgICAgIGxlZnQ6IG5ld09mZnNldFggKyAncHgnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEhpZ2xpZ2h0IHNoaWZ0c1xuICAgICAgICBjb25zdCBfd2luZG93ID0gJG93bmVyRG9jdW1lbnRbMF0uZGVmYXVsdFZpZXc7XG4gICAgICAgIGNvbnN0IHggPSBldmVudC5wYWdlWDtcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LnBhZ2VZIC0gX3dpbmRvdy5zY3JvbGxZO1xuXG4gICAgICAgIGNvbnN0IHJvd0hlaWdodCA9IHNldHRpbmdzLmxpbmVIZWlnaHQgKyAxO1xuICAgICAgICBjb25zdCByb3dzUGVySG91ciA9IHNldHRpbmdzLnJvd3NQZXJIb3VyO1xuXG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoJG1vdmluZ0NhcmQuZGF0YSgnaW5kZXgnKSk7XG4gICAgICAgIGNvbnN0IGlzQXNzaWduZWQgPSAhISRtb3ZpbmdDYXJkLmRhdGEoJ2Fzc2lnbmVkJyk7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBnZXRJdGVtKGluZGV4LCBpc0Fzc2lnbmVkKTtcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBpdGVtLmR1cmF0aW9uO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBkdXJhdGlvbiAqIChyb3dIZWlnaHQgKiByb3dzUGVySG91ciAvIDYwKTtcblxuICAgICAgICAkc2tlZHVsZXJJdGVtc0NvbnRhaW5lckVsLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudEJvdW5kaW5nID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgICAgaWYgKHggPiBlbGVtZW50Qm91bmRpbmcubGVmdCAmJiB4IDwgZWxlbWVudEJvdW5kaW5nLnJpZ2h0ICYmXG4gICAgICAgICAgICAgICAgeSA+IGVsZW1lbnRCb3VuZGluZy50b3AgJiYgeSA8IGVsZW1lbnRCb3VuZGluZy5ib3R0b20pIHtcbiAgICAgICAgICAgICAgICAkdGhpcy5hZGRDbGFzcygnaGlnaGxpZ2h0ZWQnKTtcbiAgICAgICAgICAgICAgICAkc2tlZHVsZXJJdGVtc0NvbnRhaW5lckVsLmRhdGEoJ3NlbGVjdGVkJywgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICR0aGlzLnJlbW92ZUNsYXNzKCdoaWdobGlnaHRlZCcpO1xuICAgICAgICAgICAgICAgICRza2VkdWxlckl0ZW1zQ29udGFpbmVyRWwuZGF0YSgnc2VsZWN0ZWQnLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICRzaGlmdHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCAkdGhpcyA9ICQodGhpcyk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50Qm91bmRpbmcgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgY29uc3QgJGVsID0gJHRoaXMuZmluZCgnLicgKyBzZXR0aW5ncy5pdGVtc09wdGlvbnMuaGlnaGxpZ2h0SXRlbUNzcyk7XG5cbiAgICAgICAgICAgIGlmICh4ID4gZWxlbWVudEJvdW5kaW5nLmxlZnQgJiYgeCA8IGVsZW1lbnRCb3VuZGluZy5yaWdodCAmJlxuICAgICAgICAgICAgICAgIHkgPiBlbGVtZW50Qm91bmRpbmcudG9wICYmIHkgPCBlbGVtZW50Qm91bmRpbmcuYm90dG9tKSB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRUb3AgPSB5IC0gZWxlbWVudEJvdW5kaW5nLnRvcDtcbiAgICAgICAgICAgICAgICBjb25zdCByb3dJbmRleCA9IChNYXRoLmZsb29yKG9mZnNldFRvcCAvIHJvd0hlaWdodCkgLSAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b3AgPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoMCwgcm93SW5kZXggKiByb3dIZWlnaHQpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsaWVudEhlaWdodCAtIGhlaWdodFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXRJbk1pbnV0ZXMgPSA2MCAvIHNldHRpbmdzLnJvd3NQZXJIb3VyICogKHRvcCAvIHJvd0hlaWdodCk7IC8vIDw8PT0gRklYTUVcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldHRpbmdzLmRhdGFbJHRoaXMuZGF0YSgnY29sdW1uJyldLmF2YWlsYWJsZUludGVydmFsc1skdGhpcy5kYXRhKCdpdGVtLWluZGV4JyldO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc2V0dGluZ3MuaXRlbXNPcHRpb25zLm1hdGNoRnVuYyhpdGVtLCBpbnRlcnZhbCwgb2Zmc2V0SW5NaW51dGVzKTtcblxuICAgICAgICAgICAgICAgIG9wZXJhdGlvbi5zdGFydFRpbWUgPSBmaW5kU3RhcnRUaW1lKHJvd0luZGV4LCByb3dzUGVySG91ciwgaW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICAgICAgJGVsLmNzcyh7IHRvcDogdG9wIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jc3MoJ2JhY2tncm91bmQtY29sb3InLCBtYXRjaFJlc3VsdC5jb2xvcilcbiAgICAgICAgICAgICAgICAgICAgLmhlaWdodChoZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG5cblxuICAgICAgICAgICAgICAgICRlbC5kYXRhKCdtYXRjaCcsICttYXRjaFJlc3VsdC5tYXRjaCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRlbC5kYXRhKCdtYXRjaCcsIDApO1xuICAgICAgICAgICAgICAgICRlbC5oaWRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBtb3VzZURvd24gPSAoZXZlbnQgLyo6IE1vdXNlRXZlbnQgKi8pID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LndoaWNoICE9PSAxKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGNvbnN0ICRza2VkdWxlcldyYXBwZXIgPSAkKGAuJHtzZXR0aW5ncy5za2VkdWxlcldyYXBwZXJDc3NDbGFzc31gKTtcbiAgICAgICAgY29uc3QgJGNhcmQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xuXG4gICAgICAgIGNvbnN0ICRtb3ZpbmdDYXJkID1cbiAgICAgICAgICAgICRjYXJkLmNsb25lKClcbiAgICAgICAgICAgICAgICAuZGF0YSgnaW5kZXgnLCAkY2FyZC5kYXRhKCdpbmRleCcpKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdhc3NpZ25lZCcsICRjYXJkLmRhdGEoJ2Fzc2lnbmVkJykpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3NldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtQ2FyZENzc0NsYXNzfS1tb3ZpbmdgKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhgJHtzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbUNhcmRDc3NDbGFzc30tcGlubmVkYClcbiAgICAgICAgICAgICAgICAud2lkdGgoJGNhcmQud2lkdGgoKSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oJHNrZWR1bGVyV3JhcHBlcik7XG5cbiAgICAgICAgLy92YXIgYm91bmNlID0gJGNhcmRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIC8vIGZpeG1lIF5eXlxuICAgICAgICBjb25zdCBvZmZzZXRYID0gZXZlbnQucGFnZVggLSBldmVudC5vZmZzZXRYLFxuICAgICAgICAgICAgb2Zmc2V0WSA9IGV2ZW50LnBhZ2VZIC0gZXZlbnQub2Zmc2V0WTtcblxuICAgICAgICAkbW92aW5nQ2FyZC5jc3Moe1xuICAgICAgICAgICAgdG9wOiBvZmZzZXRZICsgJ3B4JyxcbiAgICAgICAgICAgIGxlZnQ6IG9mZnNldFggKyAncHgnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9wZXJhdGlvbiA9IHtcbiAgICAgICAgICAgICRjYXJkLFxuICAgICAgICAgICAgJG1vdmluZ0NhcmQsXG4gICAgICAgICAgICBvZmZzZXRYOiBldmVudC5vZmZzZXRYLFxuICAgICAgICAgICAgb2Zmc2V0WTogZXZlbnQub2Zmc2V0WVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoJGNhcmQuZGF0YSgnaW5kZXgnKSk7XG4gICAgICAgIGNvbnN0IGlzQXNzaWduZWQgPSAhISRtb3ZpbmdDYXJkLmRhdGEoJ2Fzc2lnbmVkJyk7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBnZXRJdGVtKGluZGV4LCBpc0Fzc2lnbmVkKTtcblxuICAgICAgICAkY2FyZC5oaWRlKCk7XG5cbiAgICAgICAgJG93bmVyRG9jdW1lbnQub24oJ21vdXNlbW92ZScsIG1vdXNlTW92ZSk7XG4gICAgICAgICRvd25lckRvY3VtZW50Lm9uKCdtb3VzZXVwJywgbW91c2VVcCk7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuXG4gICAgJCgnLicgKyBzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbUNhcmRDc3NDbGFzcykub24oJ21vdXNlZG93bicsIG1vdXNlRG93bik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBvcHVsYXRlU2tlZHVsZXJJdGVtczsiLCJjb25zdCBkZWZhdWx0U2V0dGluZ3MgPSB7XG4gICAgLy8gRGF0YSBhdHRyaWJ1dGVzXG4gICAgaGVhZGVyczogbnVsbCwgIC8vIHN0cmluZ1tdIC0gQXJyYXkgb2YgY29sdW1uIGhlYWRlcnNcbiAgICB0YXNrczogW10sICAgICAgLy8gVGFza1tdIC0gQXJyYXkgb2YgdGFza3MuIFJlcXVpcmVkIGZpZWxkczogXG4gICAgICAgICAgICAgICAgICAgIC8vIGlkOiBudW1iZXIsIHN0YXJ0VGltZTogbnVtYmVyLCBkdXJhdGlvbjogbnVtYmVyLCBjb2x1bW46IG51bWJlclxuXG4gICAgaXRlbXM6IFtdLCAgICAgIC8vIEl0ZW1bXSAtIEFycmF5IG9mIG5vdC1hc3NpbmduZWQgdGFza3NcblxuICAgIG5vdEFsbG9jYXRlZExhYmVsOiAnTm90IGFsbG9jYXRlZCcsXG5cbiAgICAvLyBDYXJkIHRlbXBsYXRlIC0gSW5uZXIgY29udGVudCBvZiB0YXNrIGNhcmQuIFxuICAgIC8vIFlvdSdyZSBhYmxlIHRvIHVzZSAke2tleX0gaW5zaWRlIHRlbXBsYXRlLCB3aGVyZSBrZXkgaXMgYW55IHByb3BlcnR5IGZyb20gdGFzay5cbiAgICBjYXJkVGVtcGxhdGU6ICc8ZGl2PiR7aWR9PC9kaXY+JyxcblxuICAgIC8vIENzcyBjbGFzc2VzXG4gICAgc2tlZHVsZXJXcmFwcGVyQ3NzQ2xhc3M6ICdza2VkdWxlci13cmFwcGVyJyxcbiAgICBjb250YWluZXJDc3NDbGFzczogJ3NrZWR1bGVyLWNvbnRhaW5lcicsXG4gICAgaGVhZGVyQ29udGFpbmVyQ3NzQ2xhc3M6ICdza2VkdWxlci1oZWFkZXJzJyxcbiAgICBzY2hlZHVsZXJDb250YWluZXJDc3NDbGFzczogJ3NrZWR1bGVyLW1haW4nLFxuICAgIHRhc2tQbGFjZWhvbGRlckNzc0NsYXNzOiAnc2tlZHVsZXItdGFzay1wbGFjZWhvbGRlcicsXG4gICAgYXZhaWxhYmxlSW50ZXJ2YWxQbGFjZWhvbGRlckNzc0NsYXNzOiAnc2tlZHVsZXItaW50ZXJ2YWwtcGxhY2Vob2xkZXInLFxuICAgIGNlbGxDc3NDbGFzczogJ3NrZWR1bGVyLWNlbGwnLFxuICAgIHJlc2l6YWJsZUhhbmRsZXJDc3NDbGFzczogJ3Jlc2l6YWJsZS1oYW5kbGVyJyxcbiAgICByZXNpemFibGVTbGlkZXJDc3NDbGFzczogJ3Jlc2l6YWJsZS1zbGlkZXInLFxuXG4gICAgbGluZUhlaWdodDogMzAsICAgICAgICAgLy8gaGVpZ2h0IG9mIG9uZSBsaW5lIGluIGdyaWRcbiAgICBib3JkZXJXaWR0aDogMSwgICAgICAgICAvLyB3aWR0aCBvZiBib2FyZCBvZiBncmlkIGNlbGxcbiAgICBjb2x1bW5XaWR0aDogMjAwLFxuICAgIG1pbkNvbHVtbldpZHRoOiAxMDAsXG5cbiAgICByb3dzUGVySG91cjogMiwgICAgICAgICAvLyBjb3VudCBvZiByb3dzIGZvciBvbmUgaG91clxuXG4gICAgY29sdW1uUmVzaXplRW5hYmxlZDogdHJ1ZSwgLy8gaXMgY29sdW1ucyByZXNpemFibGVcblxuICAgIGRlYnVnOiBmYWxzZSxcblxuICAgIGl0ZW1zT3B0aW9uczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgaXRlbXNDc3NDbGFzczogJ3NrZWR1bGVyLWl0ZW1zJyxcbiAgICAgICAgaGlnaGxpZ2h0SXRlbUNzczogJ3NpLWhpZ2hsaWdodC1pdGVtJyxcbiAgICAgICAgY29udGFpbmVyU2VsZWN0b3I6IFwiI3NrZWR1bGVyLWl0ZW1zXCIsXG4gICAgICAgIGl0ZW1DYXJkQ3NzQ2xhc3M6ICdzaS1jYXJkJyxcbiAgICAgICAgaXRlbUNhcmRUZW1wbGF0ZTogJzxkaXY+JHtkdXJhdGlvbn08L2Rpdj4nLFxuICAgICAgICB0aXRsZTogJ0l0ZW1zJyxcbiAgICAgICAgb25JdGVtV2lsbEJlQXNzaWduZWQ6ICgpID0+IHsgY29uc29sZS5sb2coYXJndW1lbnRzKTsgfSxcbiAgICAgICAgb25JdGVtRGlkQXNzaWduZWQ6ICgpID0+IHsgY29uc29sZS5sb2coYXJndW1lbnRzKTsgfSxcbiAgICAgICAgbWF0Y2hGdW5jOiAoKSA9PiB7IHJldHVybiB7IG1hdGNoOiB0cnVlIH0gfVxuICAgIH1cbn07XG5cbmV4cG9ydCB7IGRlZmF1bHRTZXR0aW5ncyB9OyIsImltcG9ydCB7IGRlZmF1bHRTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHBvcHVsYXRlU2tlZHVsZXJJdGVtcyBmcm9tICcuL2l0ZW1zJztcbmltcG9ydCB7IGNvbXBpbGVUZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuaW1wb3J0IHsgcGFyc2VUaW1lIH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IGRpdiA9IChjc3NDbGFzcykgPT4gJCgnPGRpdj48L2Rpdj4nKS5hZGRDbGFzcyhjc3NDbGFzcyk7XG5cbmNsYXNzIFNrZWR1bGVyIHtcbiAgICBjb25zdHJ1Y3RvcigkY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSAkLmV4dGVuZCh0cnVlLCBkZWZhdWx0U2V0dGluZ3MsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xuICAgICAgICB0aGlzLiRvd25lckRvY3VtZW50ID0gJCgkY29udGFpbmVyWzBdLm93bmVyRG9jdW1lbnQpO1xuICAgICAgICB0aGlzLiRoZWFkZXJDb250YWluZXIgPSBudWxsO1xuICAgICAgICB0aGlzLiRzY2hlZHVsZUVsID0gbnVsbFxuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMucmVzaXplQWxsQ29sdW1ucyA9IHRydWU7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGVidWcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUudGltZSgnc2tlZHVsZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlYnVnKSB7XG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoJ3NrZWR1bGVyJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRSb3dzUGVySG91cihyb3dzUGVySG91cikge1xuICAgICAgICB0aGlzLnNldHRpbmdzLnJvd3NQZXJIb3VyID0gcm93c1BlckhvdXI7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH1cblxuICAgIHNldFJlc2l6ZUFsbENvbHVtbnMocmVzaXplQWxsQ29sdW1ucykge1xuICAgICAgICB0aGlzLnJlc2l6ZUFsbENvbHVtbnMgPSByZXNpemVBbGxDb2x1bW5zO1xuICAgIH1cblxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MuaXRlbXMgPSB0aGlzLnNldHRpbmdzLml0ZW1zICYmIHRoaXMuc2V0dGluZ3MuaXRlbXMubWFwKFxuICAgICAgICAgICAgKGl0ZW0sIGluZGV4KSA9PiBPYmplY3QuYXNzaWduKHt9LCB7aW5kZXh9LCBpdGVtKVxuICAgICAgICApIHx8IFtdO1xuICAgICAgICB0aGlzLnNldHRpbmdzLnRhc2tzID0gdGhpcy5zZXR0aW5ncy50YXNrcyAmJiB0aGlzLnNldHRpbmdzLnRhc2tzLm1hcChcbiAgICAgICAgICAgICh0YXNrLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHRhc2suaXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIHtpbmRleDogaW5kZXggKyB0aGlzLnNldHRpbmdzLml0ZW1zLmxlbmd0aH0sIHRhc2suaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICkgfHwgW107XG5cbiAgICAgICAgdGhpcy5wb3B1bGF0ZSgpO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5pdGVtc09wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgcG9wdWxhdGVTa2VkdWxlckl0ZW1zKHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcG9wdWxhdGUoKSB7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5lbXB0eSgpO1xuICAgICAgICB0aGlzLiRjb250YWluZXIuYWRkQ2xhc3ModGhpcy5zZXR0aW5ncy5jb250YWluZXJDc3NDbGFzcyk7XG5cbiAgICAgICAgY29uc3QgaGVhZGVycyA9IHRoaXMuc2V0dGluZ3MuaGVhZGVycyA/XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhlYWRlcnMgOlxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5kYXRhLm1hcCh0aGlzLnNldHRpbmdzLmdldEhlYWRlcik7XG5cbiAgICAgICAgLy8gQWRkIGhlYWRlcnNcbiAgICAgICAgdGhpcy4kaGVhZGVyQ29udGFpbmVyID0gZGl2KHRoaXMuc2V0dGluZ3MuaGVhZGVyQ29udGFpbmVyQ3NzQ2xhc3MpO1xuICAgICAgICBoZWFkZXJzLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGRpdigpLnRleHQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8odGhpcy4kaGVhZGVyQ29udGFpbmVyKTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5hcHBlbmQodGhpcy4kaGVhZGVyQ29udGFpbmVyKTtcblxuICAgICAgICAvLyBBZGQgc2NoZWR1bGVyXG4gICAgICAgIHRoaXMuJHNjaGVkdWxlRWwgPSBkaXYodGhpcy5zZXR0aW5ncy5zY2hlZHVsZXJDb250YWluZXJDc3NDbGFzcyk7XG4gICAgICAgIGNvbnN0IHNjaGVkdWxlVGltZWxpbmVFbCA9IGRpdih0aGlzLnNldHRpbmdzLnNjaGVkdWxlckNvbnRhaW5lckNzc0NsYXNzICsgJy10aW1lbGluZScpO1xuICAgICAgICBjb25zdCBzY2hlZHVsZUJvZHlFbCA9IGRpdih0aGlzLnNldHRpbmdzLnNjaGVkdWxlckNvbnRhaW5lckNzc0NsYXNzICsgJy1ib2R5Jyk7XG5cbiAgICAgICAgY29uc3QgZ3JpZENvbHVtbkVsZW1lbnQgPSBkaXYoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgICAgIC8vIFBvcHVsYXRlIHRpbWVsaW5lXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuc2V0dGluZ3Mucm93c1BlckhvdXI7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCB0aW1lbGluZUNlbGwgPSBkaXYoKVxuICAgICAgICAgICAgICAgICAgICAuaGVpZ2h0KHRoaXMuc2V0dGluZ3MubGluZUhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGogPT0gdGhpcy5zZXR0aW5ncy5yb3dzUGVySG91ciAtIDEgPyBcImxhc3RcIiA6IFwiXCIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGogPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZUNlbGwgPSB0aW1lbGluZUNlbGxcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jc3MoXCJsaW5lLWhlaWdodFwiLCB0aGlzLnNldHRpbmdzLmxpbmVIZWlnaHQgKyAncHgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoaiA9PSAwID8gdGhpcy50b1RpbWVTdHJpbmcoaSkgOiBcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGltZWxpbmVDZWxsLmFwcGVuZFRvKHNjaGVkdWxlVGltZWxpbmVFbCk7XG5cbiAgICAgICAgICAgICAgICBkaXYodGhpcy5zZXR0aW5ncy5jZWxsQ3NzQ2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIC5oZWlnaHQodGhpcy5zZXR0aW5ncy5saW5lSGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoaiA9PSB0aGlzLnNldHRpbmdzLnJvd3NQZXJIb3VyIC0gMSA/IFwibGFzdFwiIDogXCJcIilcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKGdyaWRDb2x1bW5FbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBvcHVsYXRlIGdyaWRcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoZWFkZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGdyaWRDb2x1bW5FbGVtZW50LmNsb25lKCk7XG5cbiAgICAgICAgICAgIC8vIGZpeG1lIFthdmFpbGFibGVJbnRlcnZhbHMgbXVzdCBub3QgdXNlIGluZGV4XVxuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlSW50ZXJ2YWxzUGxhY2Vob2xkZXIgPSBkaXYodGhpcy5zZXR0aW5ncy5hdmFpbGFibGVJbnRlcnZhbFBsYWNlaG9sZGVyQ3NzQ2xhc3MpO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJ2YWxzID0gdGhpcy5zZXR0aW5ncy5kYXRhW2pdLmF2YWlsYWJsZUludGVydmFscztcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQXZhaWxhYmxlSW50ZXJ2YWwoYXZhaWxhYmxlSW50ZXJ2YWxzUGxhY2Vob2xkZXIsIGludGVydmFscywgaik7XG5cbiAgICAgICAgICAgIGVsLnByZXBlbmQoYXZhaWxhYmxlSW50ZXJ2YWxzUGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgZWwuYXBwZW5kVG8oc2NoZWR1bGVCb2R5RWwpO1xuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbHVtbldpZHRoKGosIHRoaXMuc2V0dGluZ3MuY29sdW1uV2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kc2NoZWR1bGVFbC5hcHBlbmQoc2NoZWR1bGVUaW1lbGluZUVsKTtcbiAgICAgICAgdGhpcy4kc2NoZWR1bGVFbC5hcHBlbmQoc2NoZWR1bGVCb2R5RWwpO1xuXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5hcHBlbmQodGhpcy4kc2NoZWR1bGVFbCk7XG5cbiAgICAgICAgLy8gU2V0IGRlZmF1bHQgd2lkdGggZm9yIGNvbHVtbnNcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoZWFkZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbHVtbldpZHRoKGosIHRoaXMuc2V0dGluZ3MuY29sdW1uV2lkdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIHJlc2l6aW5nXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvbHVtblJlc2l6ZUVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJlUmVzaXppbmcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRhc2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy50YXNrcztcbiAgICB9XG5cbiAgICBjb25maWd1cmVSZXNpemluZygpIHtcbiAgICAgICAgY29uc3Qgc2tlZHVsZXJFbFJlc2l6YWJsZUhhbmRsZXIgPSBkaXYodGhpcy5zZXR0aW5ncy5yZXNpemFibGVIYW5kbGVyQ3NzQ2xhc3MpO1xuXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5wcmVwZW5kKHNrZWR1bGVyRWxSZXNpemFibGVIYW5kbGVyKTtcblxuICAgICAgICBza2VkdWxlckVsUmVzaXphYmxlSGFuZGxlci53aWR0aCh0aGlzLiRjb250YWluZXIud2lkdGgoKSk7XG5cbiAgICAgICAgY29uc3QgcmVzaXphYmxlU2xpZGVySGVpZ2h0ID0gdGhpcy4kc2NoZWR1bGVFbC5oZWlnaHQoKSArIHRoaXMuJGhlYWRlckNvbnRhaW5lci5oZWlnaHQoKTtcbiAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgdGhpcy4kaGVhZGVyQ29udGFpbmVyLmZpbmQoJ2RpdicpLmVhY2goKF8sIGVsKSA9PiB7XG4gICAgICAgICAgICBkaXYodGhpcy5zZXR0aW5ncy5yZXNpemFibGVTbGlkZXJDc3NDbGFzcylcbiAgICAgICAgICAgICAgICAuY3NzKCdsZWZ0JywgZWwub2Zmc2V0TGVmdCArIGVsLmNsaWVudFdpZHRoKVxuICAgICAgICAgICAgICAgIC5oZWlnaHQocmVzaXphYmxlU2xpZGVySGVpZ2h0KVxuICAgICAgICAgICAgICAgIC5kYXRhKCdjb2x1bW4taWQnLCBpbmRleCsrKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhza2VkdWxlckVsUmVzaXphYmxlSGFuZGxlcilcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2tlZHVsZXJFbFJlc2l6YWJsZUhhbmRsZXIub24oJ21vdXNlZG93bicsICcuJyArIHRoaXMuc2V0dGluZ3MucmVzaXphYmxlU2xpZGVyQ3NzQ2xhc3MsIHRoaXMub25SZXNpemVQb2ludGVyRG93bi5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBhcHBlbmRBdmFpbGFibGVJbnRlcnZhbChwbGFjZWhvbGRlciwgaW50ZXJ2YWxzLCBjb2x1bW4pIHtcbiAgICAgICAgaW50ZXJ2YWxzLmZvckVhY2goKGludGVydmFsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5uZXJDb250ZW50ID0gZGl2KCkudGV4dCh0aGlzLnNldHRpbmdzLm5vdEFsbG9jYXRlZExhYmVsKTtcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHRoaXMuZ2V0Q2FyZFRvcFBvc2l0aW9uKGludGVydmFsLnN0YXJ0KSArIDI7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHBhcnNlVGltZShpbnRlcnZhbC5lbmQpIC0gcGFyc2VUaW1lKGludGVydmFsLnN0YXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuZ2V0Q2FyZEhlaWdodChkdXJhdGlvbikgLSA1O1xuXG4gICAgICAgICAgICBjb25zdCBza0l0ZW1IaWdodGxpZ2h0RGl2ID0gZGl2KHRoaXMuc2V0dGluZ3MuaXRlbXNPcHRpb25zLmhpZ2hsaWdodEl0ZW1Dc3MpLmhpZGUoKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hpZnREaXYgPSBkaXYoKVxuICAgICAgICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICd0b3A6ICcgKyB0b3AgKyAncHg7IGhlaWdodDogJyArIGhlaWdodCArICdweCdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2hpZnREaXZcbiAgICAgICAgICAgICAgICAuZGF0YSgnY29sdW1uJywgY29sdW1uKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdpdGVtLWluZGV4JywgaW5kZXgpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChpbm5lckNvbnRlbnQpXG4gICAgICAgICAgICAgICAgLmFwcGVuZChza0l0ZW1IaWdodGxpZ2h0RGl2KVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwZW5kVGFza3MoXG4gICAgICAgICAgICAgICAgc2hpZnREaXYsXG4gICAgICAgICAgICAgICAgaW50ZXJ2YWwuc3RhcnQsXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy50YXNrcy5maWx0ZXIodCA9PiB0LmNvbHVtbiA9PSBjb2x1bW4pKTtcbiAgICAgICAgICAgIC8vIFRPRE86IF5eXiBmaWx0ZXIgYnkgc2hpZnQgaW50ZXJ2YWwgdG9vXG5cbiAgICAgICAgfSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqIFxuICAgICAqIEdlbmVyYXRlIHRhc2sgY2FyZHNcbiAgICAgKi9cbiAgICBhcHBlbmRUYXNrcyhwbGFjZWhvbGRlciwgaW50ZXJ2YWxTdGFydCwgdGFza3MpIHtcbiAgICAgICAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgICAgICAgICAgbGV0IHRvcCA9IHRoaXMuZ2V0Q2FyZFRvcFBvc2l0aW9uKHRhc2suc3RhcnQsIGludGVydmFsU3RhcnQpO1xuICAgICAgICAgICAgbGV0IGhlaWdodCA9IHRoaXMuZ2V0Q2FyZEhlaWdodCh0YXNrLml0ZW0uZHVyYXRpb24gLyA2MCk7XG5cbiAgICAgICAgICAgIHRoaXMuZ2V0SXRlbURpdih0YXNrLml0ZW0pXG4gICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3RvcDogJyArIHRvcCArICdweDsgaGVpZ2h0OiAnICsgaGVpZ2h0ICsgJ3B4J1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3RoaXMuc2V0dGluZ3MuaXRlbXNPcHRpb25zLml0ZW1DYXJkQ3NzQ2xhc3N9YClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7dGhpcy5zZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbUNhcmRDc3NDbGFzc30tcGlubmVkYClcbiAgICAgICAgICAgICAgICAud2lkdGgoJ2F1dG8nKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdpbmRleCcsIHRhc2suaXRlbS5pbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnYXNzaWduZWQnLCAxKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhwbGFjZWhvbGRlcik7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cblxuICAgIG9uUmVzaXplUG9pbnRlclVwKGV2ZW50KSB7XG4gICAgICAgIGxldCBvcCA9IHRoaXMub3BlcmF0aW9uO1xuICAgICAgICBpZiAoIXRoaXMub3BlcmF0aW9uKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHRoaXMuJG93bmVyRG9jdW1lbnQub2ZmKCdtb3VzZXVwJyk7XG4gICAgICAgIHRoaXMuJG93bmVyRG9jdW1lbnQub2ZmKCdtb3VzZW1vdmUnKTtcblxuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgb25SZXNpemVQb2ludGVyTW92ZShldmVudCkge1xuICAgICAgICBsZXQgb3AgPSB0aGlzLm9wZXJhdGlvbjtcbiAgICAgICAgaWYgKCF0aGlzLm9wZXJhdGlvbikgeyByZXR1cm47IH1cblxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGRlbHRhIGNoYW5nZSBiZXR3ZWVuIHN0YXJ0IGFuZCBuZXcgbW91c2UgcG9zaXRpb24sIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgdGFibGUgd2lkdGhcbiAgICAgICAgbGV0IGRpZmZlcmVuY2UgPSAoZXZlbnQucGFnZVggLSBvcC5zdGFydFgpOyAvLyAvIHRoaXMuJHNjaGVkdWxlRWwud2lkdGgoKSAqIDEwMDtcbiAgICAgICAgaWYgKGRpZmZlcmVuY2UgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb2x1bW5OdW1iZXIgPSBvcC5jb2x1bW5OdW1iZXI7XG4gICAgICAgIGxldCB3aWR0aCA9IG9wLndpZHRoICsgZGlmZmVyZW5jZTtcbiAgICAgICAgaWYgKHRoaXMucmVzaXplQWxsQ29sdW1ucykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNldHRpbmdzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUNvbHVtbldpZHRoKGksIHdpZHRoLnRvRml4ZWQoMikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDb2x1bW5XaWR0aChjb2x1bW5OdW1iZXIsIHdpZHRoLnRvRml4ZWQoMikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZXNpemVQb2ludGVyRG93bihldmVudCkge1xuICAgICAgICAvLyBPbmx5IGFwcGxpZXMgdG8gbGVmdC1jbGljayBkcmFnZ2luZ1xuICAgICAgICBpZiAoZXZlbnQud2hpY2ggIT09IDEpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgLy8gSWYgYSBwcmV2aW91cyB0aGlzLm9wZXJhdGlvbiBpcyBkZWZpbmVkLCB3ZSBtaXNzZWQgdGhlIGxhc3QgbW91c2V1cC5cbiAgICAgICAgLy8gUHJvYmFibHkgZ29iYmxlZCB1cCBieSB1c2VyIG1vdXNpbmcgb3V0IHRoZSB3aW5kb3cgdGhlbiByZWxlYXNpbmcuXG4gICAgICAgIC8vIFdlJ2xsIHNpbXVsYXRlIGEgcG9pbnRlcnVwIGhlcmUgcHJpb3IgdG8gaXRcbiAgICAgICAgaWYgKHRoaXMub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLlJlc2l6ZShldmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgJGN1cnJlbnRHcmlwID0gJChldmVudC5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgbGV0IGNvbHVtbk51bWJlciA9ICRjdXJyZW50R3JpcC5kYXRhKCdjb2x1bW4taWQnKTtcblxuICAgICAgICBsZXQgZ3JpcEluZGV4ID0gJGN1cnJlbnRHcmlwLmluZGV4KCk7XG4gICAgICAgIGxldCAkbGVmdENvbHVtbiA9IHRoaXMuJGhlYWRlckNvbnRhaW5lci5maW5kKCdkaXYnKS5lcShncmlwSW5kZXgpO1xuXG4gICAgICAgIGxldCBsZWZ0V2lkdGggPSAkbGVmdENvbHVtblswXS5jbGllbnRXaWR0aDtcblxuICAgICAgICB0aGlzLm9wZXJhdGlvbiA9IHtcbiAgICAgICAgICAgIGNvbHVtbk51bWJlcixcbiAgICAgICAgICAgIHN0YXJ0WDogZXZlbnQucGFnZVgsXG4gICAgICAgICAgICB3aWR0aDogbGVmdFdpZHRoXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy4kb3duZXJEb2N1bWVudC5vbignbW91c2Vtb3ZlJywgdGhpcy5vblJlc2l6ZVBvaW50ZXJNb3ZlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLiRvd25lckRvY3VtZW50Lm9uKCdtb3VzZXVwJywgdGhpcy5SZXNpemUuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICB1cGRhdGVDb2x1bW5XaWR0aChjb2x1bW5OdW1iZXIsIHdpZHRoKSB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIHRoaXMuc2V0dGluZ3MubWluQ29sdW1uV2lkdGgpO1xuICAgICAgICAkKCcuJyArIHRoaXMuc2V0dGluZ3MuaGVhZGVyQ29udGFpbmVyQ3NzQ2xhc3MgKyAnID4gZGl2OmVxKCcgKyBjb2x1bW5OdW1iZXIgKyAnKScpXG4gICAgICAgICAgICAuY3NzKCdmbGV4LWJhc2lzJywgd2lkdGggKyAncHgnKTtcblxuICAgICAgICBsZXQgY29sdW1uID0gJCgnLicgKyB0aGlzLnNldHRpbmdzLnNjaGVkdWxlckNvbnRhaW5lckNzc0NsYXNzICsgJy1ib2R5ID4gZGl2OmVxKCcgKyBjb2x1bW5OdW1iZXIgKyAnKSA+IC4nICsgdGhpcy5zZXR0aW5ncy5jZWxsQ3NzQ2xhc3MpO1xuICAgICAgICB2YXIgZGlmZiA9IGNvbHVtbi53aWR0aCgpIC0gd2lkdGg7XG4gICAgICAgIGNvbHVtbi53aWR0aCh3aWR0aCk7XG5cbiAgICAgICAgJCgnLicgKyB0aGlzLnNldHRpbmdzLnJlc2l6YWJsZUhhbmRsZXJDc3NDbGFzcyArICcgPiBkaXYnKS5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBjb2x1bW5OdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgJGVsID0gJChlbCk7XG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSBwYXJzZUludCgkZWwuY3NzKCdsZWZ0JykucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgICAgICAgICAgICRlbC5jc3MoJ2xlZnQnLCBsZWZ0IC0gZGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEl0ZW1EaXYoaXRlbSkge1xuICAgICAgICBjb25zdCAkZGl2ID0gZGl2KHRoaXMuc2V0dGluZ3MuaXRlbXNPcHRpb25zLml0ZW1DYXJkQ3NzQ2xhc3MpO1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IGNvbXBpbGVUZW1wbGF0ZSh0aGlzLnNldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtQ2FyZFRlbXBsYXRlLCB7XG4gICAgICAgICAgICB0aW1lOiAoaXRlbSkgPT4gaXRlbS5pbnRlcnZhbCA/IGAke2l0ZW0uaW50ZXJ2YWwuc3RhcnR9IHRvICR7aXRlbS5pbnRlcnZhbC5lbmR9YCA6ICcnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBkaXYoKS5odG1sKHRlbXBsYXRlKGl0ZW0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIENvbnZlcnQgZG91YmxlIHZhbHVlIG9mIGhvdXJzIHRvIHplcm8tcHJlcG9zaXRlZCBzdHJpbmcgd2l0aCAzMCBvciAwMCB2YWx1ZSBvZiBtaW51dGVzXG4gICAgKi9cbiAgICB0b1RpbWVTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSA8IDEwID8gJzAnIDogJycpICsgTWF0aC5mbG9vcih2YWx1ZSkgKyAoTWF0aC5jZWlsKHZhbHVlKSA+IE1hdGguZmxvb3IodmFsdWUpID8gJzozMCcgOiAnOjAwJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGhlaWdodCBvZiB0YXNrIGNhcmQgYmFzZWQgb24gZHVyYXRpb24gb2YgdGhlIHRhc2tcbiAgICAgKiBkdXJhdGlvbiAtIGluIGhvdXJzXG4gICAgICovXG4gICAgZ2V0Q2FyZEhlaWdodChkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkdXJhdGlvbkluTWludXRlcyA9IGR1cmF0aW9uICogNjA7XG4gICAgICAgIGNvbnN0IGhlaWdodE9mTWludXRlID0gKHRoaXMuc2V0dGluZ3MubGluZUhlaWdodCArIHRoaXMuc2V0dGluZ3MuYm9yZGVyV2lkdGgpICogdGhpcy5zZXR0aW5ncy5yb3dzUGVySG91ciAvIDYwO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGR1cmF0aW9uSW5NaW51dGVzICogaGVpZ2h0T2ZNaW51dGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0b3Agb2Zmc2V0IG9mIHRhc2sgY2FyZCBiYXNlZCBvbiBzdGFydCB0aW1lIG9mIHRoZSB0YXNrXG4gICAgICogc3RhcnRUaW1lIC0gaW4gaG91cnNcbiAgICAgKi9cbiAgICBnZXRDYXJkVG9wUG9zaXRpb24oc3RhcnRUaW1lLCBvZmZzZXRUaW1lKSB7XG4gICAgICAgIGxldCBzdGFydFRpbWVJbnQgPSBwYXJzZVRpbWUoc3RhcnRUaW1lKTtcbiAgICAgICAgaWYgKG9mZnNldFRpbWUpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZUludCAtPSBwYXJzZVRpbWUob2Zmc2V0VGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh0aGlzLnNldHRpbmdzLmxpbmVIZWlnaHQgKyB0aGlzLnNldHRpbmdzLmJvcmRlcldpZHRoKSAqIChzdGFydFRpbWVJbnQgKiB0aGlzLnNldHRpbmdzLnJvd3NQZXJIb3VyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNrZWR1bGVyOyIsImNvbnN0IGNvbXBpbGVUZW1wbGF0ZSA9ICh0ZW1wbGF0ZSwgZnVuY3MpID0+IGl0ZW0gPT4ge1xuICAgIGxldCByZXN1bHQgPSB0ZW1wbGF0ZTtcbiAgICBjb25zdCByZWdLZXlzID0gL1xcJFxceyhcXHcrKVxcfS9nO1xuICAgIGNvbnN0IHJlZ0Z1bmNzID0gL1xcJFxceyhcXHcrKVxcKFxcKVxcfS9nO1xuXG4gICAgbGV0IG1hdGNoID0gMTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBtYXRjaCA9IHJlZ0tleXMuZXhlYyh0ZW1wbGF0ZSk7XG4gICAgICAgIGlmICghbWF0Y2gpIGJyZWFrO1xuXG4gICAgICAgIGxldCBrZXkgPSBtYXRjaFsxXTtcbiAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobWF0Y2hbMF0sIGl0ZW1ba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoZnVuY3MpIHtcbiAgICAgICAgbWF0Y2ggPSByZWdGdW5jcy5leGVjKHRlbXBsYXRlKTtcbiAgICAgICAgaWYgKCFtYXRjaCkgYnJlYWs7XG5cbiAgICAgICAgbGV0IGtleSA9IG1hdGNoWzFdO1xuICAgICAgICBpZiAoZnVuY3MuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobWF0Y2hbMF0sIGZ1bmNzW2tleV0oaXRlbSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgeyBjb21waWxlVGVtcGxhdGUgfTsiLCIvKipcbiAqIFBhcnNlIHRpbWUgc3RyaW5nIGFuZCBwcmVzZW50IGl0IGluIGhvdXJzIChleC4gJzEzOjMwJyA9PiAxMy41KVxuICogQHBhcmFtIHsqc3RyaW5nfSB0aW1lIC0gdGltZSBpbiBmb3JtYXQgbGlrZSAnMTM6NTAnLCAnMTE6MDAnLCAnMTQnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVRpbWUodGltZSkge1xuICAgIHJldHVybiAvXFxkezEsMn1cXDpcXGR7Mn0vLnRlc3QodGltZSkgP1xuICAgICAgICBwYXJzZUludCh0aW1lLnNwbGl0KCc6JylbMF0pICsgcGFyc2VJbnQodGltZS5zcGxpdCgnOicpWzFdKSAvIDYwIDpcbiAgICAgICAgcGFyc2VJbnQodGltZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1RpbWUodmFsdWUpIHtcbiAgICAvLyBUT0RPOiB2dnYgZml4IG1lXG4gICAgcmV0dXJuICh2YWx1ZSA8IDEwID8gJzAnIDogJycpICsgTWF0aC5mbG9vcih2YWx1ZSkgKyAoTWF0aC5jZWlsKHZhbHVlKSA+IE1hdGguZmxvb3IodmFsdWUpID8gJzozMCcgOiAnOjAwJyk7XG59Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0l2VlhObGNuTXZaR1ZqWldGelpTOVFjbTlxWldOMGN5OXFjWFZsY25rdGMydGxaSFZzWlhJdmMzSmpMMkZrWVhCMFpYSXVhbk1pTENJdlZYTmxjbk12WkdWalpXRnpaUzlRY205cVpXTjBjeTlxY1hWbGNua3RjMnRsWkhWc1pYSXZjM0pqTDJsdVpHVjRMbXB6SWl3aUwxVnpaWEp6TDJSbFkyVmhjMlV2VUhKdmFtVmpkSE12YW5GMVpYSjVMWE5yWldSMWJHVnlMM055WXk5cGRHVnRjeTlwYm1SbGVDNXFjeUlzSWk5VmMyVnljeTlrWldObFlYTmxMMUJ5YjJwbFkzUnpMMnB4ZFdWeWVTMXphMlZrZFd4bGNpOXpjbU12YzJWMGRHbHVaM011YW5NaUxDSXZWWE5sY25NdlpHVmpaV0Z6WlM5UWNtOXFaV04wY3k5cWNYVmxjbmt0YzJ0bFpIVnNaWEl2YzNKakwzTnJaV1IxYkdWeUxtcHpJaXdpTDFWelpYSnpMMlJsWTJWaGMyVXZVSEp2YW1WamRITXZhbkYxWlhKNUxYTnJaV1IxYkdWeUwzTnlZeTkwWlcxd2JHRjBaUzlwYm1SbGVDNXFjeUlzSWk5VmMyVnljeTlrWldObFlYTmxMMUJ5YjJwbFkzUnpMMnB4ZFdWeWVTMXphMlZrZFd4bGNpOXpjbU12ZFhScGJITXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN096czdPM2RDUTBGeFFpeFpRVUZaT3pzN096czdPenM3T3pzN096czdRVUZoYWtNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eFJRVUZSTEVkQlFVY3NWVUZCVXl4UFFVRlBMRVZCUVVVN1FVRkRPVUlzVFVGQlNTeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRM3BDTEUxQlFVa3NVVUZCVVN4SFFVRkhMREJDUVVGaExGVkJRVlVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXpzN1FVRkZha1FzVTBGQlR5eFJRVUZSTEVOQlFVTTdRMEZEYmtJc1EwRkJRenM3UVVGRlJpeERRVUZETEVOQlFVTXNVVUZCVVN4M1FrRkJWeXhEUVVGRE96czdPenM3T3pzN096dDNRa053UWtRc1dVRkJXVHM3T3p0MVFrRkRZaXhYUVVGWE96czdPenM3T3pzN096czdPenQzUWtORVF5eGhRVUZoT3p0eFFrRkRXQ3hWUVVGVk96dEJRVVUxUXl4SlFVRk5MRWRCUVVjc1IwRkJSeXhUUVVGT0xFZEJRVWNzUTBGQlNTeFJRVUZSTzFkQlFVc3NRMEZCUXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEVOQlFVTTdRMEZCUVN4RFFVRkRPenRCUVVVNVJDeEpRVUZOTEZkQlFWY3NSMEZCUnl4VFFVRmtMRmRCUVZjc1EwRkJTU3hSUVVGUkxFVkJRVXM3UVVGRE9VSXNVVUZCVFN4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEJRVU42UkN4UlFVRk5MRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETzBGQlF6ZENMRkZCUVUwc1VVRkJVU3hIUVVGSExDdENRVUZuUWl4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExHZENRVUZuUWl4RlFVRkZPMEZCUTNKRkxGbEJRVWtzUlVGQlJTeGpRVUZETEVsQlFVazdiVUpCUVVzc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlRTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1dVRkJUeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NSMEZCU3l4RlFVRkZPMU5CUVVFN1MwRkRlRVlzUTBGQlF5eERRVUZET3p0QlFVVklMRmRCUVU4c1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZETEVsQlFVazdaVUZCU3l4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRMnhETEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVU42UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlFVRXNRMEZEZUVJc1EwRkJRenREUVVOTUxFTkJRVUU3TzBGQlJVUXNTVUZCVFN4aFFVRmhMRWRCUVVjc1UwRkJhRUlzWVVGQllTeERRVUZKTEZGQlFWRXNSVUZCUlN4WFFVRlhMRVZCUVVVc1VVRkJVU3hGUVVGTE8wRkJRM1pFTEZsQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVTnFReXhSUVVGTkxGbEJRVmtzUjBGQlJ5eFJRVUZSTEVkQlFVY3NWMEZCVnl4RFFVRkRPenRCUVVVMVF5eFhRVUZQTEcxQ1FVRlBMRmxCUVZrc1IwRkJSeXh6UWtGQlZTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenREUVVNelJDeERRVUZCT3p0QlFVVkVMRWxCUVUwc2NVSkJRWEZDTEVkQlFVY3NVMEZCZUVJc2NVSkJRWEZDTEVOQlFVa3NVVUZCVVN4RlFVRkxPMEZCUTNoRExGRkJRVTBzVDBGQlR5eEhRVUZITEZOQlFWWXNUMEZCVHl4RFFVRkpMRXRCUVVzc1JVRkJSU3hWUVVGVkxFVkJRVXM3UVVGRGJrTXNaVUZCVHl4VlFVRlZMRWRCUTFnc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCUVN4RFFVRkRPMjFDUVVGSkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4TFFVRkxMRXRCUVVzN1UwRkJRU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SFFVTXhSQ3hSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRkJMRU5CUVVNN2JVSkJRVWtzUTBGQlF5eERRVUZETEV0QlFVc3NTMEZCU3l4TFFVRkxPMU5CUVVFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlF6RkVMRU5CUVVFN08wRkJSVVFzVVVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVU01UkN4TFFVRkxMRVZCUVVVc1EwRkRVQ3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRCUVVOdVJDeFJRVUZOTEdOQlFXTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRE5VUXNVVUZCVFN4UFFVRlBMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNiME5CUVc5RExFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTTdPMEZCUld4R0xGRkJRVTBzVlVGQlZTeEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVTnVRaXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRWRCUVVjc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMRU5CUTNSRkxGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE96dEJRVVZvUXl4UlFVRk5MSGxDUVVGNVFpeEhRVUZITEVkQlFVY3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRCUVVOMFJDeFJRVUZKTEUxQlFVMHNSMEZCUnl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGJrTXNWVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFVkJRVVVzUlVGQlNUdEJRVU5xUWl4cFEwRkJlVUlzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1MwRkRlRU1zUTBGQlF5eERRVUZETzBGQlEwZ3NOa0pCUVhsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03TzBGQlJYSkVMRkZCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6czdRVUZGY2tJc1VVRkJUU3hQUVVGUExFZEJRVWNzVTBGQlZpeFBRVUZQTEVOQlFVa3NTMEZCU3l4RlFVRkxPMEZCUTNaQ0xGbEJRVWtzVTBGQlV5eEpRVUZKTEVsQlFVa3NSVUZCUlN4UFFVRlBPenQ1UWtGRldTeFRRVUZUTzFsQlFUTkRMRmRCUVZjc1kwRkJXQ3hYUVVGWE8xbEJRVVVzUzBGQlN5eGpRVUZNTEV0QlFVczdXVUZCUlN4VFFVRlRMR05CUVZRc1UwRkJVenM3UVVGRmNrTXNXVUZCVFN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEZWQlFWVXNRMEZCUXl4RFFVRkRPenRCUVVVelJTeFpRVUZOTEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJ4RUxGbEJRVTBzVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEyeEVMRmxCUVUwc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN08wRkJSWGhETEZsQlFVa3NlVUpCUVhsQ0xFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVOcVJDeG5Ra0ZCU1N4VlFVRlZMRVZCUVVVN1FVRkRXaXgzUWtGQlVTeERRVUZETEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZCTEVOQlFVTTdNa0pCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NTMEZCU3p0cFFrRkJRU3hEUVVGRExFTkJRVU03UVVGRGJrVXNkMEpCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMkZCUXpkQ096dEJRVVZFTEhWQ1FVRlhMRU5CUTA0c1RVRkJUU3hGUVVGRkxFTkJRMUlzUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTEVOQlFVTXNRMEZEYkVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVU5rTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkRZaXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVTnVRaXhYUVVGWExFTkJRVWtzVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4blFrRkJaMElzWVVGQlZTeERRVU12UkN4WFFVRlhMRU5CUVVrc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eG5Ra0ZCWjBJc1lVRkJWU3hEUVVNdlJDeFJRVUZSTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlF6czdRVUZGZWtNc2RVSkJRVmNzUTBGQlF5eEZRVUZGTEVOQlFVTXNWMEZCVnl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRM1pETEdsQ1FVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU03VTBGRGJFSXNUVUZCVFN4SlFVRkpMRXRCUVVzc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlEzWkVMR2RDUVVGTkxGTkJRVk1zUjBGQlJ5eFJRVUZSTEVOQlFVTXNWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVNeFF5eG5Ra0ZCVFN4TlFVRk5MRWRCUVVjc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU4yUkN4blFrRkJTU3hsUVVGbExFZEJRVWNzYzBKQlFWVXNVMEZCVXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRE96dEJRVVZvUkN4blFrRkJUU3hSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVGRHTEc5Q1FVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExHOUNRVUZ2UWl4SlFVRkpMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVW9zU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCVWl4UlFVRlJMRVZCUVVVc1pVRkJaU3hGUVVGbUxHVkJRV1VzUlVGQlJTeERRVUZETEVOQlFVTTdPMEZCUlRsSUxIVkNRVUZYTEVOQlEwNHNUVUZCVFN4RlFVRkZMRU5CUTFJc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhUUVVGVExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUTNwRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRemRDTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkRZaXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVTnVRaXhYUVVGWExFTkJRVWtzVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4blFrRkJaMElzWVVGQlZTeERRVU12UkN4UlFVRlJMRU5CUVVrc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eG5Ra0ZCWjBJc1lVRkJWU3hEUVVNMVJDeFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU03TzBGQlJUbENMSFZDUVVGWExFTkJRVU1zUlVGQlJTeERRVUZETEZkQlFWY3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRCUVVOMlF5eHBRa0ZCU3l4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE96dEJRVVZtTEdkQ1FVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8wRkJRMklzZDBKQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRMmhDTERCQ1FVRk5MRVZCUVU0c1RVRkJUVHRCUVVOT0xIbENRVUZMTEVWQlFVVXNVMEZCVXp0QlFVTm9RaXgzUWtGQlNTeEZRVUZLTEVsQlFVazdhVUpCUTFBc1EwRkJReXhEUVVGRE8yRkJRMDRzVFVGQlRUdEJRVU5JTEc5Q1FVRkpMRWxCUVVrc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkJMRU5CUVVNN01rSkJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRXRCUVVzc1MwRkJTenRwUWtGQlFTeERRVUZETEVOQlFVTTdRVUZETlVRc2IwSkJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NVMEZCVXl4RlFVTnNRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0aFFVTTFRanM3UVVGRlJDeHZRa0ZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhwUWtGQmFVSXNTVUZCU1N4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRVZCUVVVc1NVRkJTU3hGUVVGS0xFbEJRVWtzUlVGQlJTeFJRVUZSTEVWQlFWSXNVVUZCVVN4RlFVRkZMR1ZCUVdVc1JVRkJaaXhsUVVGbExFVkJRVVVzUTBGQlF5eERRVUZETzFOQlF6TklMRTFCUVUwN1FVRkRTQ3gxUWtGQlZ5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTNKQ0xHbENRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1UwRkRhRUk3TzBGQlJVUXNVMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTTdRVUZEZGtRc2FVTkJRWGxDTEVOQlFVTXNWMEZCVnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8wRkJRM0pFTEdsRFFVRjVRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVGxETEdsQ1FVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRMnBDTEhOQ1FVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0QlFVTXpReXh6UWtGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03UzBGRE1VTXNRMEZCUXpzN1FVRkZSaXhSUVVGTkxGTkJRVk1zUjBGQlJ5eFRRVUZhTEZOQlFWTXNRMEZCU1N4TFFVRkxMRVZCUVVzN1FVRkRla0lzV1VGQlNTeFRRVUZUTEVsQlFVa3NTVUZCU1N4RlFVRkZMRTlCUVU4N096QkNRVVZaTEZOQlFWTTdXVUZCTTBNc1YwRkJWeXhsUVVGWUxGZEJRVmM3V1VGQlJTeFBRVUZQTEdWQlFWQXNUMEZCVHp0WlFVRkZMRTlCUVU4c1pVRkJVQ3hQUVVGUE96dEJRVVZ5UXl4WlFVRk5MRlZCUVZVc1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEU5QlFVODdXVUZEY0VNc1ZVRkJWU3hIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRPenRCUVVWMlF5eHRRa0ZCVnl4RFFVRkRMRWRCUVVjc1EwRkJRenRCUVVOYUxHVkJRVWNzUlVGQlJTeFZRVUZWTEVkQlFVY3NTVUZCU1R0QlFVTjBRaXhuUWtGQlNTeEZRVUZGTEZWQlFWVXNSMEZCUnl4SlFVRkpPMU5CUXpGQ0xFTkJRVU1zUTBGQlF6czdPMEZCUjBnc1dVRkJUU3hQUVVGUExFZEJRVWNzWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1EwRkJRenRCUVVNNVF5eFpRVUZOTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRE8wRkJRM1JDTEZsQlFVMHNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXpzN1FVRkZlRU1zV1VGQlRTeFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRMRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRE1VTXNXVUZCVFN4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF6czdRVUZGZWtNc1dVRkJUU3hMUVVGTExFZEJRVWNzVVVGQlVTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dEJRVU5zUkN4WlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVOc1JDeFpRVUZOTEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEzaERMRmxCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdRVUZETDBJc1dVRkJUU3hOUVVGTkxFZEJRVWNzVVVGQlVTeEpRVUZKTEZOQlFWTXNSMEZCUnl4WFFVRlhMRWRCUVVjc1JVRkJSU3hEUVVGQkxFRkJRVU1zUTBGQlF6czdRVUZGZWtRc2FVTkJRWGxDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrN1FVRkRka01zWjBKQlFVMHNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU4wUWl4blFrRkJUU3hsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03TzBGQlJYSkVMR2RDUVVGSkxFTkJRVU1zUjBGQlJ5eGxRVUZsTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhsUVVGbExFTkJRVU1zUzBGQlN5eEpRVU55UkN4RFFVRkRMRWRCUVVjc1pVRkJaU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSVHRCUVVOMlJDeHhRa0ZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF6dEJRVU01UWl4NVEwRkJlVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRMnBFTEUxQlFVMDdRVUZEU0N4eFFrRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0QlFVTnFReXg1UTBGQmVVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzJGQlEycEVPMU5CUTBvc1EwRkJReXhEUVVGRE8wRkJRMGdzWlVGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpPMEZCUTNKQ0xHZENRVUZOTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGRGRFSXNaMEpCUVUwc1pVRkJaU3hIUVVGSExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hEUVVGRE8wRkJRM0pFTEdkQ1FVRk5MRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN08wRkJSWEpGTEdkQ1FVRkpMRU5CUVVNc1IwRkJSeXhsUVVGbExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4bFFVRmxMRU5CUVVNc1MwRkJTeXhKUVVOeVJDeERRVUZETEVkQlFVY3NaVUZCWlN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzWlVGQlpTeERRVUZETEUxQlFVMHNSVUZCUlRzN1FVRkZka1FzYjBKQlFVMHNVMEZCVXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhsUVVGbExFTkJRVU1zUjBGQlJ5eERRVUZETzBGQlF6RkRMRzlDUVVGTkxGRkJRVkVzUjBGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVGQlFVTXNRMEZCUXp0QlFVTjZSQ3h2UWtGQlRTeEpRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkRhRUlzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1VVRkJVU3hIUVVGSExGTkJRVk1zUTBGQlF5eEZRVU5xUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGRE4wSXNRMEZCUXpzN1FVRkZSaXh2UWtGQlRTeGxRVUZsTEVkQlFVY3NSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhYUVVGWExFbEJRVWtzU1VGQlJ5eEhRVUZITEZOQlFWTXNRMEZCUVN4QlFVRkRMRU5CUVVNN1FVRkRkRVVzYjBKQlFVMHNVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnNSeXh2UWtGQlRTeFhRVUZYTEVkQlFVY3NVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNSVUZCUlN4bFFVRmxMRU5CUVVNc1EwRkJRenM3UVVGRmNrWXNlVUpCUVZNc1EwRkJReXhUUVVGVExFZEJRVWNzWVVGQllTeERRVUZETEZGQlFWRXNSVUZCUlN4WFFVRlhMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03TzBGQlJYSkZMRzFDUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVjc1JVRkJSU3hEUVVGRExFTkJRMmhDTEVkQlFVY3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUXpGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZEWkN4SlFVRkpMRVZCUVVVc1EwRkJRenM3UVVGSFdpeHRRa0ZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1lVRkRla01zVFVGQlRUdEJRVU5JTEcxQ1FVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnlRaXh0UWtGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMkZCUTJRN1UwRkRTaXhEUVVGRExFTkJRVU03UzBGRFRpeERRVUZET3p0QlFVVkdMRkZCUVUwc1UwRkJVeXhIUVVGSExGTkJRVm9zVTBGQlV5eERRVUZKTEV0QlFVc3NiMEpCUVhWQ08wRkJRek5ETEZsQlFVa3NTMEZCU3l4RFFVRkRMRXRCUVVzc1MwRkJTeXhEUVVGRExFVkJRVVU3UVVGQlJTeHRRa0ZCVHp0VFFVRkZPenRCUVVWc1F5eFpRVUZOTEdkQ1FVRm5RaXhIUVVGSExFTkJRVU1zVDBGQlN5eFJRVUZSTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVWNzUTBGQlF6dEJRVU51UlN4WlFVRk5MRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPenRCUVVWeVF5eFpRVUZOTEZkQlFWY3NSMEZEWWl4TFFVRkxMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRMUlzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlEyeERMRWxCUVVrc1EwRkJReXhWUVVGVkxFVkJRVVVzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVONFF5eFJRVUZSTEVOQlFVa3NVVUZCVVN4RFFVRkRMRmxCUVZrc1EwRkJReXhuUWtGQlowSXNZVUZCVlN4RFFVTTFSQ3hYUVVGWExFTkJRVWtzVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4blFrRkJaMElzWVVGQlZTeERRVU12UkN4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVOQlEzQkNMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4RFFVRkRPenM3TzBGQlNYQkRMRmxCUVUwc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4N1dVRkRka01zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF6czdRVUZGTVVNc2JVSkJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTTdRVUZEV2l4bFFVRkhMRVZCUVVVc1QwRkJUeXhIUVVGSExFbEJRVWs3UVVGRGJrSXNaMEpCUVVrc1JVRkJSU3hQUVVGUExFZEJRVWNzU1VGQlNUdFRRVU4yUWl4RFFVRkRMRU5CUVVNN08wRkJSVWdzYVVKQlFWTXNSMEZCUnp0QlFVTlNMR2xDUVVGTExFVkJRVXdzUzBGQlN6dEJRVU5NTEhWQ1FVRlhMRVZCUVZnc1YwRkJWenRCUVVOWUxHMUNRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4N1FVRkRkRUlzYlVKQlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUenRUUVVONlFpeERRVUZET3p0QlFVVkdMRmxCUVUwc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU03UVVGRE5VTXNXVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRiRVFzV1VGQlRTeEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRMRXRCUVVzc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6czdRVUZGZUVNc1lVRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZET3p0QlFVVmlMSE5DUVVGakxFTkJRVU1zUlVGQlJTeERRVUZETEZkQlFWY3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRenRCUVVNeFF5eHpRa0ZCWXl4RFFVRkRMRVZCUVVVc1EwRkJReXhUUVVGVExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdPMEZCUlhSRExHRkJRVXNzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0TFFVTXhRaXhEUVVGRE96dEJRVVZHTEV0QlFVTXNRMEZCUXl4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eFhRVUZYTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1EwRkRPVVVzUTBGQlFUczdjVUpCUldNc2NVSkJRWEZDT3pzN096czdPenM3TzBGRE0xQndReXhKUVVGTkxHVkJRV1VzUjBGQlJ6czdRVUZGY0VJc1YwRkJUeXhGUVVGRkxFbEJRVWs3UVVGRFlpeFRRVUZMTEVWQlFVVXNSVUZCUlRzN08wRkJSMVFzVTBGQlN5eEZRVUZGTEVWQlFVVTdPMEZCUlZRc2NVSkJRV2xDTEVWQlFVVXNaVUZCWlRzN096dEJRVWxzUXl4blFrRkJXU3hGUVVGRkxHdENRVUZyUWpzN08wRkJSMmhETERKQ1FVRjFRaXhGUVVGRkxHdENRVUZyUWp0QlFVTXpReXh4UWtGQmFVSXNSVUZCUlN4dlFrRkJiMEk3UVVGRGRrTXNNa0pCUVhWQ0xFVkJRVVVzYTBKQlFXdENPMEZCUXpORExEaENRVUV3UWl4RlFVRkZMR1ZCUVdVN1FVRkRNME1zTWtKQlFYVkNMRVZCUVVVc01rSkJRVEpDTzBGQlEzQkVMSGREUVVGdlF5eEZRVUZGTEN0Q1FVRXJRanRCUVVOeVJTeG5Ra0ZCV1N4RlFVRkZMR1ZCUVdVN1FVRkROMElzTkVKQlFYZENMRVZCUVVVc2JVSkJRVzFDTzBGQlF6ZERMREpDUVVGMVFpeEZRVUZGTEd0Q1FVRnJRanM3UVVGRk0wTXNZMEZCVlN4RlFVRkZMRVZCUVVVN1FVRkRaQ3hsUVVGWExFVkJRVVVzUTBGQlF6dEJRVU5rTEdWQlFWY3NSVUZCUlN4SFFVRkhPMEZCUTJoQ0xHdENRVUZqTEVWQlFVVXNSMEZCUnpzN1FVRkZia0lzWlVGQlZ5eEZRVUZGTEVOQlFVTTdPMEZCUldRc2RVSkJRVzFDTEVWQlFVVXNTVUZCU1RzN1FVRkZla0lzVTBGQlN5eEZRVUZGTEV0QlFVczdPMEZCUlZvc1owSkJRVmtzUlVGQlJUdEJRVU5XTEdWQlFVOHNSVUZCUlN4TFFVRkxPMEZCUTJRc2NVSkJRV0VzUlVGQlJTeG5Ra0ZCWjBJN1FVRkRMMElzZDBKQlFXZENMRVZCUVVVc2JVSkJRVzFDTzBGQlEzSkRMSGxDUVVGcFFpeEZRVUZGTEdsQ1FVRnBRanRCUVVOd1F5eDNRa0ZCWjBJc1JVRkJSU3hUUVVGVE8wRkJRek5DTEhkQ1FVRm5RaXhGUVVGRkxIZENRVUYzUWp0QlFVTXhReXhoUVVGTExFVkJRVVVzVDBGQlR6dEJRVU5rTERSQ1FVRnZRaXhGUVVGRkxHZERRVUZOTzBGQlFVVXNiVUpCUVU4c1EwRkJReXhIUVVGSExGbEJRVmNzUTBGQlF6dFRRVUZGTzBGQlEzWkVMSGxDUVVGcFFpeEZRVUZGTERaQ1FVRk5PMEZCUVVVc2JVSkJRVThzUTBGQlF5eEhRVUZITEZsQlFWY3NRMEZCUXp0VFFVRkZPMEZCUTNCRUxHbENRVUZUTEVWQlFVVXNjVUpCUVUwN1FVRkJSU3h0UWtGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJRVHRUUVVGRk8wdEJRemxETzBOQlEwb3NRMEZCUXpzN1VVRkZUeXhsUVVGbExFZEJRV1lzWlVGQlpUczdPenM3T3pzN096czdPenM3TzNkQ1EyeEVVU3haUVVGWk96dHhRa0ZEVml4VFFVRlRPenM3TzNkQ1FVTllMRmxCUVZrN08zRkNRVU5zUWl4VFFVRlRPenRCUVVWdVF5eEpRVUZOTEVkQlFVY3NSMEZCUnl4VFFVRk9MRWRCUVVjc1EwRkJTU3hSUVVGUk8xZEJRVXNzUTBGQlF5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU03UTBGQlFTeERRVUZET3p0SlFVVjRSQ3hSUVVGUk8wRkJRME1zWVVGRVZDeFJRVUZSTEVOQlEwVXNWVUZCVlN4RlFVRkZMRTlCUVU4c1JVRkJSVHM0UWtGRUwwSXNVVUZCVVRzN1FVRkZUaXhaUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3cyUWtGQmJVSXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRla1FzV1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkROMElzV1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxGbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRE4wSXNXVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVUU3UVVGRGRrSXNXVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRGRFSXNXVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVsQlFVa3NRMEZCUXpzN1FVRkZOMElzV1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSVHRCUVVOeVFpeHRRa0ZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFRRVU0xUWpzN1FVRkZSQ3haUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTTdPMEZCUldZc1dVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlR0QlFVTnlRaXh0UWtGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRUUVVNdlFqdExRVU5LT3p0cFFrRnVRa01zVVVGQlVUczdaVUZ4UWtrc2QwSkJRVU1zVjBGQlZ5eEZRVUZGTzBGQlEzaENMR2RDUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNN1FVRkRlRU1zWjBKQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRUUVVOc1FqczdPMlZCUld0Q0xEWkNRVUZETEdkQ1FVRm5RaXhGUVVGRk8wRkJRMnhETEdkQ1FVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03VTBGRE5VTTdPenRsUVVWTkxHMUNRVUZIT3pzN1FVRkRUaXhuUWtGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVU5vUlN4VlFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTE8zVkNRVUZMTEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVU1zUzBGQlN5eEZRVUZNTEV0QlFVc3NSVUZCUXl4RlFVRkZMRWxCUVVrc1EwRkJRenRoUVVGQkxFTkJRM0JFTEVsQlFVa3NSVUZCUlN4RFFVRkRPMEZCUTFJc1owSkJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGRGFFVXNWVUZCUXl4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGTE8wRkJRMklzYjBKQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhIUVVGSExFMUJRVXNzVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEZEVZc2RVSkJRVThzU1VGQlNTeERRVUZETzJGQlEyWXNRMEZEU2l4SlFVRkpMRVZCUVVVc1EwRkJRenM3UVVGRlVpeG5Ra0ZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRMmhDTEdkQ1FVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSVUZCUlR0QlFVTndReXgzUTBGQmMwSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8yRkJRM2hETzFOQlEwbzdPenRsUVVWUExHOUNRVUZIT3pzN1FVRkRVQ3huUWtGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRCUVVONFFpeG5Ra0ZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZET3p0QlFVVXhSQ3huUWtGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFZEJRMnBETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhIUVVOeVFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenM3TzBGQlIzQkVMR2RDUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUTBGQlF6dEJRVU51UlN4dFFrRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZETEU5QlFVOHNSVUZCU3p0QlFVTjZRaXh0UWtGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVOa0xGRkJRVkVzUTBGQlF5eFBRVUZMTEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03WVVGRGVFTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRCUVVOVUxHZENRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenM3TzBGQlJ6bERMR2RDUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMRU5CUVVNN1FVRkRha1VzWjBKQlFVMHNhMEpCUVd0Q0xFZEJRVWNzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc01FSkJRVEJDTEVkQlFVY3NWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRka1lzWjBKQlFVMHNZMEZCWXl4SFFVRkhMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETERCQ1FVRXdRaXhIUVVGSExFOUJRVThzUTBGQlF5eERRVUZET3p0QlFVVXZSU3huUWtGQlRTeHBRa0ZCYVVJc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF6czdRVUZGYUVNc2FVSkJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdPMEZCUlhwQ0xIRkNRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3UVVGRGFFUXNkMEpCUVVrc1dVRkJXU3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVU51UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZEYUVNc1VVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1IwRkJSeXhEUVVGRExFZEJRVWNzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVWb1JTeDNRa0ZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRMUlzYjBOQlFWa3NSMEZCUnl4WlFVRlpMRU5CUTNSQ0xFZEJRVWNzUTBGQlF5eGhRVUZoTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlEyNUVMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdjVUpCUTJwRU8wRkJRMFFzWjBOQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXpzN1FVRkZNVU1zZFVKQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVU14UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZEYUVNc1VVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1IwRkJSeXhEUVVGRExFZEJRVWNzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVTXhSQ3hSUVVGUkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRwUWtGRGNFTTdZVUZEU2pzN08wRkJSMFFzYVVKQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRM0pETEc5Q1FVRk5MRVZCUVVVc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenM3TzBGQlIzSkRMRzlDUVVGTkxEWkNRVUUyUWl4SFFVRkhMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEc5RFFVRnZReXhEUVVGRExFTkJRVU03UVVGRE9VWXNiMEpCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMEZCUXpORUxHOUNRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zTmtKQlFUWkNMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZET3p0QlFVVXhSU3hyUWtGQlJTeERRVUZETEU5QlFVOHNRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eERRVUZETzBGQlF6RkRMR3RDUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRPenRCUVVVMVFpeHZRa0ZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzJGQlEzaEVPenRCUVVWRUxHZENRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMEZCUXpWRExHZENRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6czdRVUZGZUVNc1owSkJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6czdPMEZCUjNwRExHbENRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOeVF5eHZRa0ZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzJGQlEzaEVPenM3UVVGSFJDeG5Ra0ZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHMUNRVUZ0UWl4RlFVRkZPMEZCUTI1RExHOUNRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dGhRVU0xUWp0VFFVTktPenM3WlVGRlNTeHBRa0ZCUnp0QlFVTktMRzFDUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRPMU5CUXpsQ096czdaVUZGWjBJc05rSkJRVWM3T3p0QlFVTm9RaXhuUWtGQlRTd3dRa0ZCTUVJc1IwRkJSeXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4M1FrRkJkMElzUTBGQlF5eERRVUZET3p0QlFVVXZSU3huUWtGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUXpzN1FVRkZjRVFzYzBOQlFUQkNMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJRenM3UVVGRk1VUXNaMEpCUVUwc2NVSkJRWEZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdRVUZEZWtZc1owSkJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTmtMR2RDUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVXM3UVVGRE9VTXNiVUpCUVVjc1EwRkJReXhQUVVGTExGRkJRVkVzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhEUVVOeVF5eEhRVUZITEVOQlFVTXNUVUZCVFN4RlFVRkZMRVZCUVVVc1EwRkJReXhWUVVGVkxFZEJRVWNzUlVGQlJTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVTXpReXhOUVVGTkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkROMElzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVNeFFpeFJRVUZSTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zUTBGQlFUdGhRVU0xUXl4RFFVRkRMRU5CUVVNN08wRkJSVWdzYzBOQlFUQkNMRU5CUVVNc1JVRkJSU3hEUVVGRExGZEJRVmNzUlVGQlJTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXgxUWtGQmRVSXNSVUZCUlN4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGFFazdPenRsUVVWelFpeHBRMEZCUXl4WFFVRlhMRVZCUVVVc1UwRkJVeXhGUVVGRkxFMUJRVTBzUlVGQlJUczdPMEZCUTNCRUxIRkNRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVNc1VVRkJVU3hGUVVGRkxFdEJRVXNzUlVGQlN6dEJRVU51UXl4dlFrRkJUU3haUVVGWkxFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVVzc1VVRkJVU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1FVRkRha1VzYjBKQlFVMHNSMEZCUnl4SFFVRkhMRTlCUVVzc2EwSkJRV3RDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEJRVU40UkN4dlFrRkJUU3hSUVVGUkxFZEJRVWNzYzBKQlFWVXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExITkNRVUZWTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOeVJTeHZRa0ZCVFN4TlFVRk5MRWRCUVVjc1QwRkJTeXhoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPenRCUVVWb1JDeHZRa0ZCVFN4dFFrRkJiVUlzUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCU3l4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03TzBGQlJYQkdMRzlDUVVGTkxGRkJRVkVzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZEYWtJc1NVRkJTU3hEUVVGRE8wRkJRMFlzZVVKQlFVc3NSVUZCUlN4UFFVRlBMRWRCUVVjc1IwRkJSeXhIUVVGSExHTkJRV01zUjBGQlJ5eE5RVUZOTEVkQlFVY3NTVUZCU1R0cFFrRkRlRVFzUTBGQlF5eERRVUZET3p0QlFVVlFMSGRDUVVGUkxFTkJRMGdzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4TlFVRk5MRU5CUVVNc1EwRkRkRUlzU1VGQlNTeERRVUZETEZsQlFWa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkRla0lzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVTndRaXhOUVVGTkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1EwRkRNMElzVVVGQlVTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPenRCUVVVelFpeDFRa0ZCU3l4WFFVRlhMRU5CUTFvc1VVRkJVU3hGUVVOU0xGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlEyUXNUMEZCU3l4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZCTEVOQlFVTTdNa0pCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzU1VGQlNTeE5RVUZOTzJsQ1FVRkJMRU5CUVVNc1EwRkJReXhEUVVGRE96dGhRVWMxUkN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRMW83T3pzN096czdaVUZMVlN4eFFrRkJReXhYUVVGWExFVkJRVVVzWVVGQllTeEZRVUZGTEV0QlFVc3NSVUZCUlRzN08wRkJRek5ETEdsQ1FVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVU1zU1VGQlNTeEZRVUZMTzBGQlEzQkNMRzlDUVVGSkxFZEJRVWNzUjBGQlJ5eFBRVUZMTEd0Q1FVRnJRaXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNZVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkROMFFzYjBKQlFVa3NUVUZCVFN4SFFVRkhMRTlCUVVzc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVY2UkN4MVFrRkJTeXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTnlRaXhKUVVGSkxFTkJRVU03UVVGRFJpeDVRa0ZCU3l4RlFVRkZMRTlCUVU4c1IwRkJSeXhIUVVGSExFZEJRVWNzWTBGQll5eEhRVUZITEUxQlFVMHNSMEZCUnl4SlFVRkpPMmxDUVVONFJDeERRVUZETEVOQlEwUXNVVUZCVVN4TlFVRkpMRTlCUVVzc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJSeXhEUVVNeFJDeFJRVUZSTEVOQlFVa3NUMEZCU3l4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGRExHZENRVUZuUWl4aFFVRlZMRU5CUTJwRkxFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZEWWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUXpsQ0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUTI1Q0xGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0aFFVTTVRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFOQlExbzdPenRsUVVWblFpd3lRa0ZCUXl4TFFVRkxMRVZCUVVVN1FVRkRja0lzWjBKQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU03UVVGRGVFSXNaMEpCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlFVVXNkVUpCUVU4N1lVRkJSVHM3UVVGRmFFTXNaMEpCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMEZCUTI1RExHZENRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6czdRVUZGY2tNc1owSkJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPMU5CUTNwQ096czdaVUZGYTBJc05rSkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEzWkNMR2RDUVVGSkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTNoQ0xHZENRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVGRkxIVkNRVUZQTzJGQlFVVTdPenRCUVVkb1F5eG5Ra0ZCU1N4VlFVRlZMRWRCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNUVUZCVFN4QlFVRkRMRU5CUVVNN1FVRkRNME1zWjBKQlFVa3NWVUZCVlN4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVOc1FpeDFRa0ZCVHp0aFFVTldPenRCUVVWRUxHZENRVUZKTEZsQlFWa3NSMEZCUnl4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRE8wRkJRMjVETEdkQ1FVRkpMRXRCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eEhRVUZITEZWQlFWVXNRMEZCUXp0QlFVTnNReXhuUWtGQlNTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVU3UVVGRGRrSXNjVUpCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkRhRVFzZDBKQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJsQ1FVTXZRenRoUVVOS0xFMUJRVTA3UVVGRFNDeHZRa0ZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZsQlFWa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdZVUZETVVRN1UwRkRTanM3TzJWQlJXdENMRFpDUVVGRExFdEJRVXNzUlVGQlJUczdRVUZGZGtJc1owSkJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkJSU3gxUWtGQlR6dGhRVUZGT3pzN096dEJRVXRzUXl4blFrRkJTU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlEyaENMRzlDUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMkZCUTNSQ096dEJRVVZFTEdkQ1FVRkpMRmxCUVZrc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUXpGRExHZENRVUZKTEZsQlFWa3NSMEZCUnl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZET3p0QlFVVnNSQ3huUWtGQlNTeFRRVUZUTEVkQlFVY3NXVUZCV1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE8wRkJRM0pETEdkQ1FVRkpMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenM3UVVGRmJFVXNaMEpCUVVrc1UwRkJVeXhIUVVGSExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNN08wRkJSVE5ETEdkQ1FVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSE8wRkJRMklzTkVKQlFWa3NSVUZCV2l4WlFVRlpPMEZCUTFvc2MwSkJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3p0QlFVTnVRaXh4UWtGQlN5eEZRVUZGTEZOQlFWTTdZVUZEYmtJc1EwRkJRenM3UVVGRlJpeG5Ra0ZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhGUVVGRkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVONlJTeG5Ra0ZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhGUVVGRkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTTdPMEZCUlRGRUxHbENRVUZMTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1UwRkRNVUk3T3p0bFFVVm5RaXd5UWtGQlF5eFpRVUZaTEVWQlFVVXNTMEZCU3l4RlFVRkZPMEZCUTI1RExHbENRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRCUVVOMFJDeGhRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zZFVKQlFYVkNMRWRCUVVjc1dVRkJXU3hIUVVGSExGbEJRVmtzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZETjBVc1IwRkJSeXhEUVVGRExGbEJRVmtzUlVGQlJTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSWEpETEdkQ1FVRkpMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc01FSkJRVEJDTEVkQlFVY3NhVUpCUVdsQ0xFZEJRVWNzV1VGQldTeEhRVUZITEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzBGQlEzcEpMR2RDUVVGSkxFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRMnhETEd0Q1FVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVndRaXhoUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2QwSkJRWGRDTEVkQlFVY3NVVUZCVVN4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNSVUZCU3p0QlFVTXpSU3h2UWtGQlNTeExRVUZMTEVsQlFVa3NXVUZCV1N4RlFVRkZPMEZCUTNaQ0xIZENRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGRGFFSXNkMEpCUVVrc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVOMlJDeDFRa0ZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRPMmxDUVVOb1F6dGhRVU5LTEVOQlFVTXNRMEZCUXp0VFFVTk9PenM3WlVGRlV5eHZRa0ZCUXl4SlFVRkpMRVZCUVVVN1FVRkRZaXhuUWtGQlRTeEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03UVVGRE9VUXNaMEpCUVUwc1VVRkJVU3hIUVVGSExDdENRVUZuUWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHRCUVVNeFJTeHZRa0ZCU1N4RlFVRkZMR05CUVVNc1NVRkJTVHN5UWtGQlN5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRk5MRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eFpRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhIUVVGTExFVkJRVVU3YVVKQlFVRTdZVUZEZUVZc1EwRkJReXhEUVVGRE96dEJRVVZJTEcxQ1FVRlBMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOeVF6czdPenM3T3p0bFFVdFhMSE5DUVVGRExFdEJRVXNzUlVGQlJUdEJRVU5vUWl4dFFrRkJUeXhEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJRU3hIUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVFc1FVRkJReXhEUVVGRE8xTkJReTlIT3pzN096czdPenRsUVUxWkxIVkNRVUZETEZGQlFWRXNSVUZCUlR0QlFVTndRaXhuUWtGQlRTeHBRa0ZCYVVJc1IwRkJSeXhSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzaERMR2RDUVVGTkxHTkJRV01zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkJMRWRCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVkQlFVY3NSVUZCUlN4RFFVRkRPMEZCUXk5SExHMUNRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVNN1UwRkRlRVE3T3pzN096czdPMlZCVFdsQ0xEUkNRVUZETEZOQlFWTXNSVUZCUlN4VlFVRlZMRVZCUVVVN1FVRkRkRU1zWjBKQlFVa3NXVUZCV1N4SFFVRkhMSE5DUVVGVkxGTkJRVk1zUTBGQlF5eERRVUZETzBGQlEzaERMR2RDUVVGSkxGVkJRVlVzUlVGQlJUdEJRVU5hTERSQ1FVRlpMRWxCUVVrc2MwSkJRVlVzVlVGQlZTeERRVUZETEVOQlFVTTdZVUZEZWtNN1FVRkRSQ3h0UWtGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkJMRWxCUVVzc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkJMRUZCUVVNc1EwRkJRenRUUVVNNVJ6czdPMWRCZWxSRExGRkJRVkU3T3p0eFFrRTBWRU1zVVVGQlVUczdPenM3T3pzN08wRkRibFYyUWl4SlFVRk5MR1ZCUVdVc1IwRkJSeXhUUVVGc1FpeGxRVUZsTEVOQlFVa3NVVUZCVVN4RlFVRkZMRXRCUVVzN1YwRkJTeXhWUVVGQkxFbEJRVWtzUlVGQlNUdEJRVU5xUkN4WlFVRkpMRTFCUVUwc1IwRkJSeXhSUVVGUkxFTkJRVU03UVVGRGRFSXNXVUZCVFN4UFFVRlBMRWRCUVVjc1kwRkJZeXhEUVVGRE8wRkJReTlDTEZsQlFVMHNVVUZCVVN4SFFVRkhMR3RDUVVGclFpeERRVUZET3p0QlFVVndReXhaUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEWkN4bFFVRlBMRWxCUVVrc1JVRkJSVHRCUVVOVUxHbENRVUZMTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVU12UWl4blFrRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOT3p0QlFVVnNRaXhuUWtGQlNTeEhRVUZITEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMjVDTEdkQ1FVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZETVVJc2MwSkJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRoUVVOb1JEdFRRVU5LT3p0QlFVVkVMR1ZCUVU4c1MwRkJTeXhGUVVGRk8wRkJRMVlzYVVKQlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEyaERMR2RDUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMDdPMEZCUld4Q0xHZENRVUZKTEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJrSXNaMEpCUVVrc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0QlFVTXpRaXh6UWtGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzJGQlEzWkVPMU5CUTBvN08wRkJSVVFzWlVGQlR5eE5RVUZOTEVOQlFVTTdTMEZEYWtJN1EwRkJRU3hEUVVGQk96dHhRa0ZGWXl4RlFVRkZMR1ZCUVdVc1JVRkJaaXhsUVVGbExFVkJRVVU3T3pzN096czdPenM3T3pzN096czdRVU42UWpOQ0xGTkJRVk1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlR0QlFVTTFRaXhYUVVGUExHbENRVUZuUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGRE9VSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZEYUVVc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF6dE5RVUZETzBOQlEzUkNPenRCUVVWTkxGTkJRVk1zVFVGQlRTeERRVUZETEV0QlFVc3NSVUZCUlRzN1FVRkZNVUlzVjBGQlR5eERRVUZETEV0QlFVc3NSMEZCUnl4RlFVRkZMRWRCUVVjc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlFTeEhRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVUVzUVVGQlF5eERRVUZETzBOQlF5OUhJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0Z1pTaDBMRzRzY2lsN1puVnVZM1JwYjI0Z2N5aHZMSFVwZTJsbUtDRnVXMjlkS1h0cFppZ2hkRnR2WFNsN2RtRnlJR0U5ZEhsd1pXOW1JSEpsY1hWcGNtVTlQVndpWm5WdVkzUnBiMjVjSWlZbWNtVnhkV2x5WlR0cFppZ2hkU1ltWVNseVpYUjFjbTRnWVNodkxDRXdLVHRwWmlocEtYSmxkSFZ5YmlCcEtHOHNJVEFwTzNaaGNpQm1QVzVsZHlCRmNuSnZjaWhjSWtOaGJtNXZkQ0JtYVc1a0lHMXZaSFZzWlNBblhDSXJieXRjSWlkY0lpazdkR2h5YjNjZ1ppNWpiMlJsUFZ3aVRVOUVWVXhGWDA1UFZGOUdUMVZPUkZ3aUxHWjlkbUZ5SUd3OWJsdHZYVDE3Wlhod2IzSjBjenA3ZlgwN2RGdHZYVnN3WFM1allXeHNLR3d1Wlhod2IzSjBjeXhtZFc1amRHbHZiaWhsS1h0MllYSWdiajEwVzI5ZFd6RmRXMlZkTzNKbGRIVnliaUJ6S0c0L2JqcGxLWDBzYkN4c0xtVjRjRzl5ZEhNc1pTeDBMRzRzY2lsOWNtVjBkWEp1SUc1YmIxMHVaWGh3YjNKMGMzMTJZWElnYVQxMGVYQmxiMllnY21WeGRXbHlaVDA5WENKbWRXNWpkR2x2Ymx3aUppWnlaWEYxYVhKbE8yWnZjaWgyWVhJZ2J6MHdPMjg4Y2k1c1pXNW5kR2c3YnlzcktYTW9jbHR2WFNrN2NtVjBkWEp1SUhOOUtTSXNJbWx0Y0c5eWRDQlRhMlZrZFd4bGNpQm1jbTl0SUNjdUwzTnJaV1IxYkdWeUp6dGNibHh1THlvcVhHNGdLaUJIWlc1bGNtRjBaU0J6WTJobFpIVnNaWElnWjNKcFpDQjNhWFJvSUhSaGMyc2dZMkZ5WkhOY2JpQXFJRzl3ZEdsdmJuTTZYRzRnS2lBdElHaGxZV1JsY25NNklITjBjbWx1WjF0ZElDMGdZWEp5WVhrZ2IyWWdhR1ZoWkdWeWMxeHVJQ29nTFNCMFlYTnJjem9nVkdGemExdGRJQzBnWVhKeVlYa2diMllnZEdGemEzTmNiaUFxSUMwZ1kyOXVkR0ZwYm1WeVEzTnpRMnhoYzNNNklITjBjbWx1WnlBdElHTnpjeUJqYkdGemN5QnZaaUJ0WVdsdUlHTnZiblJoYVc1bGNseHVJQ29nTFNCb1pXRmtaWEpEYjI1MFlXbHVaWEpEYzNORGJHRnpjem9nYzNSeWFXNW5JQzBnWTNOeklHTnNZWE56SUc5bUlHaGxZV1JsY2lCamIyNTBZV2x1WlhKY2JpQXFJQzBnYzJOb1pXUjFiR1Z5UTI5dWRHRnBibVZ5UTNOelEyeGhjM002SUhOMGNtbHVaeUF0SUdOemN5QmpiR0Z6Y3lCdlppQnpZMmhsWkhWc1pYSmNiaUFxSUMwZ2JHbHVaVWhsYVdkb2RDQXRJR2hsYVdkb2RDQnZaaUJ2Ym1VZ2FHRnNaaTFvYjNWeUlHTmxiR3dnYVc0Z1ozSnBaRnh1SUNvZ0xTQmliM0prWlhKWGFXUjBhQ0F0SUhkcFpIUm9JRzltSUdKdmNtUmxjaUJ2WmlCalpXeHNJR2x1SUdkeWFXUmNiaUFxTDF4dUpDNW1iaTV6YTJWa2RXeGxjaUE5SUdaMWJtTjBhVzl1S0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0JzWlhRZ0pHTnZiblJoYVc1bGNpQTlJQ1FvZEdocGN5azdYRzRnSUNBZ2RtRnlJSE5yWldSMWJHVnlJRDBnYm1WM0lGTnJaV1IxYkdWeUtDUmpiMjUwWVdsdVpYSXNJRzl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlITnJaV1IxYkdWeU8xeHVmVHRjYmx4dUpDNXphMlZrZFd4bGNpQTlJRk5yWldSMWJHVnlPeUlzSW1sdGNHOXlkQ0JUYTJWa2RXeGxjaUJtY205dElDY3VMM05yWldSMWJHVnlKenRjYm1sdGNHOXlkQ0JoWkdGd2RHVnlJR1p5YjIwZ0p5NHZZV1JoY0hSbGNpYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk5yWldSMWJHVnlPeUlzSW1sdGNHOXlkQ0I3SUdOdmJYQnBiR1ZVWlcxd2JHRjBaU0I5SUdaeWIyMGdKeTR1TDNSbGJYQnNZWFJsSnp0Y2JtbHRjRzl5ZENCN0lIQmhjbk5sVkdsdFpTd2dkRzlVYVcxbElIMGdabkp2YlNBbkxpNHZkWFJwYkhNbk8xeHVYRzVqYjI1emRDQmthWFlnUFNBb1kzTnpRMnhoYzNNcElEMCtJQ1FvSnp4a2FYWStQQzlrYVhZK0p5a3VZV1JrUTJ4aGMzTW9ZM056UTJ4aGMzTXBPMXh1WEc1amIyNXpkQ0JuWlhSSmRHVnRSR2wyY3lBOUlDaHpaWFIwYVc1bmN5a2dQVDRnZTF4dUlDQWdJR052Ym5OMElDUmthWFlnUFNCa2FYWW9jMlYwZEdsdVozTXVhWFJsYlhOUGNIUnBiMjV6TG1sMFpXMURZWEprUTNOelEyeGhjM01wTzF4dUlDQWdJR052Ym5OMElHbDBaVzF6SUQwZ2MyVjBkR2x1WjNNdWFYUmxiWE03WEc0Z0lDQWdZMjl1YzNRZ2RHVnRjR3hoZEdVZ1BTQmpiMjF3YVd4bFZHVnRjR3hoZEdVb2MyVjBkR2x1WjNNdWFYUmxiWE5QY0hScGIyNXpMbWwwWlcxRFlYSmtWR1Z0Y0d4aGRHVXNJSHRjYmlBZ0lDQWdJQ0FnZEdsdFpUb2dLR2wwWlcwcElEMCtJR2wwWlcwdWFXNTBaWEoyWVd3Z1B5QmdKSHRwZEdWdExtbHVkR1Z5ZG1Gc0xuTjBZWEowZlNCMGJ5QWtlMmwwWlcwdWFXNTBaWEoyWVd3dVpXNWtmV0FnT2lBbkoxeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdsMFpXMXpMbTFoY0Nnb2FYUmxiU2tnUFQ0Z0pHUnBkaTVqYkc5dVpTZ3BYRzRnSUNBZ0lDQWdJQzVrWVhSaEtDZHBibVJsZUNjc0lHbDBaVzB1YVc1a1pYZ3BYRzRnSUNBZ0lDQWdJQzVvZEcxc0tIUmxiWEJzWVhSbEtHbDBaVzBwS1Z4dUlDQWdJQ2s3WEc1OVhHNWNibU52Ym5OMElHWnBibVJUZEdGeWRGUnBiV1VnUFNBb2NtOTNTVzVrWlhnc0lISnZkM05RWlhKSWIzVnlMQ0JwYm5SbGNuWmhiQ2tnUFQ0Z2UxeHVJQ0FnSUhKdmQwbHVaR1Y0SUQwZ1RXRjBhQzV0WVhnb01Dd2djbTkzU1c1a1pYZ3BPMXh1SUNBZ0lHTnZibk4wSUdodmRYSnpSbkp2YlZSdmNDQTlJSEp2ZDBsdVpHVjRJQzhnY205M2MxQmxja2h2ZFhJN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEc5VWFXMWxLR2h2ZFhKelJuSnZiVlJ2Y0NBcklIQmhjbk5sVkdsdFpTaHBiblJsY25aaGJDNXpkR0Z5ZENrcE8xeHVmVnh1WEc1amIyNXpkQ0J3YjNCMWJHRjBaVk5yWldSMWJHVnlTWFJsYlhNZ1BTQW9jMlYwZEdsdVozTXBJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQm5aWFJKZEdWdElEMGdLR2x1WkdWNExDQnBjMEZ6YzJsbmJtVmtLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGMwRnpjMmxuYm1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUhObGRIUnBibWR6TG5SaGMydHpMbVpwYkhSbGNpaDBJRDArSUhRdWFYUmxiUzVwYm1SbGVDQTlQVDBnYVc1a1pYZ3BXekJkTG1sMFpXMWNiaUFnSUNBZ0lDQWdJQ0FnSURvZ2MyVjBkR2x1WjNNdWFYUmxiWE11Wm1sc2RHVnlLR2tnUFQ0Z2FTNXBibVJsZUNBOVBUMGdhVzVrWlhncFd6QmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wSUNSemEyVmtkV3hsY2tsMFpXMXpSV3dnUFNBa0tITmxkSFJwYm1kekxtbDBaVzF6VDNCMGFXOXVjeTVqYjI1MFlXbHVaWEpUWld4bFkzUnZjaWxjYmlBZ0lDQWdJQ0FnTG1WdGNIUjVLQ2xjYmlBZ0lDQWdJQ0FnTG1Ga1pFTnNZWE56S0hObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NXBkR1Z0YzBOemMwTnNZWE56S1R0Y2JpQWdJQ0JqYjI1emRDQWtiM2R1WlhKRWIyTjFiV1Z1ZENBOUlDUW9KSE5yWldSMWJHVnlTWFJsYlhORmJGc3dYUzV2ZDI1bGNrUnZZM1Z0Wlc1MEtUdGNiaUFnSUNCamIyNXpkQ0FrYzJocFpuUnpJRDBnSkNnbkxpY2dLeUJ6WlhSMGFXNW5jeTVoZG1GcGJHRmliR1ZKYm5SbGNuWmhiRkJzWVdObGFHOXNaR1Z5UTNOelEyeGhjM01nS3lBbklENGdaR2wySnlrN1hHNWNiaUFnSUNCamIyNXpkQ0FrYUdWaFpHVnlSR2wySUQwZ1pHbDJLQ2xjYmlBZ0lDQWdJQ0FnTG1oMGJXd29KenhvTVNCamJHRnpjejFjSW5OcExXaGxZV1JsY2x3aVBpY2dLeUJ6WlhSMGFXNW5jeTVwZEdWdGMwOXdkR2x2Ym5NdWRHbDBiR1VnS3lBblBDOW9NVDRuS1Z4dUlDQWdJQ0FnSUNBdVlYQndaVzVrVkc4b0pITnJaV1IxYkdWeVNYUmxiWE5GYkNrN1hHNWNiaUFnSUNCamIyNXpkQ0FrYzJ0bFpIVnNaWEpKZEdWdGMwTnZiblJoYVc1bGNrVnNJRDBnWkdsMktDZHphUzFqYjI1MFlXbHVaWEluS1R0Y2JpQWdJQ0IyWVhJZ0pHbDBaVzF6SUQwZ1oyVjBTWFJsYlVScGRuTW9jMlYwZEdsdVozTXBPMXh1SUNBZ0lDUnBkR1Z0Y3k1bWIzSkZZV05vS0dWc0lEMCtJSHRjYmlBZ0lDQWdJQ0FnSkhOclpXUjFiR1Z5U1hSbGJYTkRiMjUwWVdsdVpYSkZiQzVoY0hCbGJtUW9aV3dwTzF4dUlDQWdJSDBwTzF4dUlDQWdJQ1J6YTJWa2RXeGxja2wwWlcxelEyOXVkR0ZwYm1WeVJXd3VZWEJ3Wlc1a1ZHOG9KSE5yWldSMWJHVnlTWFJsYlhORmJDazdYRzVjYmlBZ0lDQnNaWFFnYjNCbGNtRjBhVzl1SUQwZ2JuVnNiRHRjYmx4dUlDQWdJR052Ym5OMElHMXZkWE5sVlhBZ1BTQW9aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdaWEpoZEdsdmJpQTlQU0J1ZFd4c0tTQnlaWFIxY200N1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QWtiVzkyYVc1blEyRnlaQ3dnSkdOaGNtUXNJSE4wWVhKMFZHbHRaU0I5SUQwZ2IzQmxjbUYwYVc5dU8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElDUnphVVZzSUQwZ0pDZ25MaWNnS3lCelpYUjBhVzVuY3k1cGRHVnRjMDl3ZEdsdmJuTXVhR2xuYUd4cFoyaDBTWFJsYlVOemN5QXJJQ2M2ZG1semFXSnNaU2NwT3lBdkx5Qm1hWGh0WlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnY0dGeWMyVkpiblFvSkcxdmRtbHVaME5oY21RdVpHRjBZU2duYVc1a1pYZ25LU2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x6UVhOemFXZHVaV1FnUFNBaElTUnRiM1pwYm1kRFlYSmtMbVJoZEdFb0oyRnpjMmxuYm1Wa0p5azdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbDBaVzBnUFNCblpYUkpkR1Z0S0dsdVpHVjRMQ0JwYzBGemMybG5ibVZrS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSkhOclpXUjFiR1Z5U1hSbGJYTkRiMjUwWVdsdVpYSkZiQzVrWVhSaEtDZHpaV3hsWTNSbFpDY3BJRDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBjMEZ6YzJsbmJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM011ZEdGemEzTWdQU0J6WlhSMGFXNW5jeTUwWVhOcmN5NW1hV3gwWlhJb2RDQTlQaUIwTG1sMFpXMHVhVzVrWlhnZ0lUMGdhVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kekxtbDBaVzF6TG5CMWMyZ29hWFJsYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1J0YjNacGJtZERZWEprWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1SbGRHRmphQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1OemN5aDdJSFJ2Y0RvZ0oyRjFkRzhuTENCc1pXWjBPaUFuWVhWMGJ5Y2dmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YUdWcFoyaDBLQ2RoZFhSdkp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVkMmxrZEdnb0oyRjFkRzhuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1a1lYUmhLQ2RoYzNOcFoyNWxaQ2NzSURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxiVzkyWlVOc1lYTnpLR0FrZTNObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NXBkR1Z0UTJGeVpFTnpjME5zWVhOemZTMXRiM1pwYm1kZ0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXlaVzF2ZG1WRGJHRnpjeWhnSkh0elpYUjBhVzVuY3k1cGRHVnRjMDl3ZEdsdmJuTXVhWFJsYlVOaGNtUkRjM05EYkdGemMzMHRjR2x1Ym1Wa1lDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZWEJ3Wlc1a1ZHOG9KSE5yWldSMWJHVnlTWFJsYlhORGIyNTBZV2x1WlhKRmJDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDUnRiM1pwYm1kRFlYSmtMbTl1S0NkdGIzVnpaV1J2ZDI0bkxDQnRiM1Z6WlVSdmQyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pHTmhjbVF1Y21WdGIzWmxLQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb0pITnBSV3d1YkdWdVozUm9JQ0U5UFNBd0lDWW1JQ1J6YVVWc0xtUmhkR0VvSjIxaGRHTm9KeWtnUFQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY205M1NHVnBaMmgwSUQwZ2MyVjBkR2x1WjNNdWJHbHVaVWhsYVdkb2RDQXJJREU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamIyeDFiVzRnUFNCd1lYSnpaVWx1ZENna2MybEZiQzV3WVhKbGJuUW9LUzVrWVhSaEtDZGpiMngxYlc0bktTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiMlptYzJWMFNXNU5hVzUxZEdWeklEMGdjR0Z5YzJWVWFXMWxLSE4wWVhKMFZHbHRaU2tnS2lBMk1EdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYVc1MFpYSjJZV3dnUFNCelpYUjBhVzVuY3k1a1lYUmhXMk52YkhWdGJsMHVZWFpoYVd4aFlteGxTVzUwWlhKMllXeHpXeVJ6YVVWc0xuQmhjbVZ1ZENncExtUmhkR0VvSjJsMFpXMHRhVzVrWlhnbktWMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kekxtbDBaVzF6VDNCMGFXOXVjeTV2YmtsMFpXMVhhV3hzUW1WQmMzTnBaMjVsWkNBbUppQnpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YjI1SmRHVnRWMmxzYkVKbFFYTnphV2R1WldRb2V5QnBkR1Z0TENCcGJuUmxjblpoYkN3Z2IyWm1jMlYwU1c1TmFXNTFkR1Z6SUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBa2JXOTJhVzVuUTJGeVpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWtaWFJoWTJnb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWpjM01vZXlCMGIzQTZJQ1J6YVVWc1d6QmRMbTltWm5ObGRGUnZjQ3dnYkdWbWREb2dNQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1b1pXbG5hSFFvSkhOcFJXeGJNRjB1WTJ4cFpXNTBTR1ZwWjJoMEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTNhV1IwYUNnbllYVjBieWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1SaGRHRW9KMkZ6YzJsbmJtVmtKeXdnTVNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWNtVnRiM1psUTJ4aGMzTW9ZQ1I3YzJWMGRHbHVaM011YVhSbGJYTlBjSFJwYjI1ekxtbDBaVzFEWVhKa1EzTnpRMnhoYzNOOUxXMXZkbWx1WjJBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtRmtaRU5zWVhOektHQWtlM05sZEhScGJtZHpMbWwwWlcxelQzQjBhVzl1Y3k1cGRHVnRRMkZ5WkVOemMwTnNZWE56ZlMxd2FXNXVaV1JnS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aGNIQmxibVJVYnlna2MybEZiQzV3WVhKbGJuUW9LU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1J0YjNacGJtZERZWEprTG05dUtDZHRiM1Z6WldSdmQyNG5MQ0J0YjNWelpVUnZkMjRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdKR05oY21RdWNtVnRiM1psS0NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hhWE5CYzNOcFoyNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6TG5SaGMydHpMbkIxYzJnb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4MWJXNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBPaUJ6ZEdGeWRGUnBiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhSaGMyc2dQU0J6WlhSMGFXNW5jeTUwWVhOcmN5NW1hVzVrS0hRZ1BUNGdkQzVwZEdWdExtbHVaR1Y0SUQwOVBTQnBibVJsZUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnpheTV6ZEdGeWRDQTlJSE4wWVhKMFZHbHRaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnpheTVqYjJ4MWJXNGdQU0JqYjJ4MWJXNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NXZia2wwWlcxRWFXUkJjM05wWjI1bFpDQW1KaUJ6WlhSMGFXNW5jeTVwZEdWdGMwOXdkR2x2Ym5NdWIyNUpkR1Z0Ukdsa1FYTnphV2R1WldRb2V5QnBkR1Z0TENCcGJuUmxjblpoYkN3Z2IyWm1jMlYwU1c1TmFXNTFkR1Z6SUgwcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSkcxdmRtbHVaME5oY21RdWNtVnRiM1psS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrWTJGeVpDNXphRzkzS0NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FrS0NjdUp5QXJJSE5sZEhScGJtZHpMbWwwWlcxelQzQjBhVzl1Y3k1b2FXZG9iR2xuYUhSSmRHVnRRM056S1M1b2FXUmxLQ2s3WEc0Z0lDQWdJQ0FnSUNSemEyVmtkV3hsY2tsMFpXMXpRMjl1ZEdGcGJtVnlSV3d1Y21WdGIzWmxRMnhoYzNNb0oyaHBaMmhzYVdkb2RHVmtKeWs3WEc0Z0lDQWdJQ0FnSUNSemEyVmtkV3hsY2tsMFpXMXpRMjl1ZEdGcGJtVnlSV3d1WkdGMFlTZ25jMlZzWldOMFpXUW5MQ0F3S1R0Y2JseHVJQ0FnSUNBZ0lDQnZjR1Z5WVhScGIyNGdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWtiM2R1WlhKRWIyTjFiV1Z1ZEM1dlptWW9KMjF2ZFhObGJXOTJaU2NzSUcxdmRYTmxUVzkyWlNrN1hHNGdJQ0FnSUNBZ0lDUnZkMjVsY2tSdlkzVnRaVzUwTG05bVppZ25iVzkxYzJWMWNDY3NJRzF2ZFhObFZYQXBPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmpiMjV6ZENCdGIzVnpaVTF2ZG1VZ1BTQW9aWFpsYm5RcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdaWEpoZEdsdmJpQTlQU0J1ZFd4c0tTQnlaWFIxY200N1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QWtiVzkyYVc1blEyRnlaQ3dnYjJabWMyVjBXQ3dnYjJabWMyVjBXU0I5SUQwZ2IzQmxjbUYwYVc5dU8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWxkMDltWm5ObGRGZ2dQU0JsZG1WdWRDNXdZV2RsV0NBdElHOW1abk5sZEZnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhkUFptWnpaWFJaSUQwZ1pYWmxiblF1Y0dGblpWa2dMU0J2Wm1aelpYUlpPMXh1WEc0Z0lDQWdJQ0FnSUNSdGIzWnBibWREWVhKa0xtTnpjeWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiM0E2SUc1bGQwOW1abk5sZEZrZ0t5QW5jSGduTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1ZtZERvZ2JtVjNUMlptYzJWMFdDQXJJQ2R3ZUNkY2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NHbG5iR2xuYUhRZ2MyaHBablJ6WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRjkzYVc1a2IzY2dQU0FrYjNkdVpYSkViMk4xYldWdWRGc3dYUzVrWldaaGRXeDBWbWxsZHp0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZUNBOUlHVjJaVzUwTG5CaFoyVllPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjVJRDBnWlhabGJuUXVjR0ZuWlZrZ0xTQmZkMmx1Wkc5M0xuTmpjbTlzYkZrN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtOTNTR1ZwWjJoMElEMGdjMlYwZEdsdVozTXViR2x1WlVobGFXZG9kQ0FySURFN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKdmQzTlFaWEpJYjNWeUlEMGdjMlYwZEdsdVozTXVjbTkzYzFCbGNraHZkWEk3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVc1a1pYZ2dQU0J3WVhKelpVbHVkQ2drYlc5MmFXNW5RMkZ5WkM1a1lYUmhLQ2RwYm1SbGVDY3BLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhWE5CYzNOcFoyNWxaQ0E5SUNFaEpHMXZkbWx1WjBOaGNtUXVaR0YwWVNnbllYTnphV2R1WldRbktUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FYUmxiU0E5SUdkbGRFbDBaVzBvYVc1a1pYZ3NJR2x6UVhOemFXZHVaV1FwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrZFhKaGRHbHZiaUE5SUdsMFpXMHVaSFZ5WVhScGIyNDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHaGxhV2RvZENBOUlHUjFjbUYwYVc5dUlDb2dLSEp2ZDBobGFXZG9kQ0FxSUhKdmQzTlFaWEpJYjNWeUlDOGdOakFwTzF4dVhHNGdJQ0FnSUNBZ0lDUnphMlZrZFd4bGNrbDBaVzF6UTI5dWRHRnBibVZ5Uld3dVpXRmphQ2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQWtkR2hwY3lBOUlDUW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmxiR1Z0Wlc1MFFtOTFibVJwYm1jZ1BTQjBhR2x6TG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZUNBK0lHVnNaVzFsYm5SQ2IzVnVaR2x1Wnk1c1pXWjBJQ1ltSUhnZ1BDQmxiR1Z0Wlc1MFFtOTFibVJwYm1jdWNtbG5hSFFnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNUlENGdaV3hsYldWdWRFSnZkVzVrYVc1bkxuUnZjQ0FtSmlCNUlEd2daV3hsYldWdWRFSnZkVzVrYVc1bkxtSnZkSFJ2YlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUjBhR2x6TG1Ga1pFTnNZWE56S0Nkb2FXZG9iR2xuYUhSbFpDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J6YTJWa2RXeGxja2wwWlcxelEyOXVkR0ZwYm1WeVJXd3VaR0YwWVNnbmMyVnNaV04wWldRbkxDQXhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pIUm9hWE11Y21WdGIzWmxRMnhoYzNNb0oyaHBaMmhzYVdkb2RHVmtKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkhOclpXUjFiR1Z5U1hSbGJYTkRiMjUwWVdsdVpYSkZiQzVrWVhSaEtDZHpaV3hsWTNSbFpDY3NJREFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0pITm9hV1owY3k1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElDUjBhR2x6SUQwZ0pDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVnNaVzFsYm5SQ2IzVnVaR2x1WnlBOUlIUm9hWE11WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0FrWld3Z1BTQWtkR2hwY3k1bWFXNWtLQ2N1SnlBcklITmxkSFJwYm1kekxtbDBaVzF6VDNCMGFXOXVjeTVvYVdkb2JHbG5hSFJKZEdWdFEzTnpLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hnZ1BpQmxiR1Z0Wlc1MFFtOTFibVJwYm1jdWJHVm1kQ0FtSmlCNElEd2daV3hsYldWdWRFSnZkVzVrYVc1bkxuSnBaMmgwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQStJR1ZzWlcxbGJuUkNiM1Z1WkdsdVp5NTBiM0FnSmlZZ2VTQThJR1ZzWlcxbGJuUkNiM1Z1WkdsdVp5NWliM1IwYjIwcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHOW1abk5sZEZSdmNDQTlJSGtnTFNCbGJHVnRaVzUwUW05MWJtUnBibWN1ZEc5d08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKdmQwbHVaR1Y0SUQwZ0tFMWhkR2d1Wm14dmIzSW9iMlptYzJWMFZHOXdJQzhnY205M1NHVnBaMmgwS1NBdElERXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnZjQ0E5SUUxaGRHZ3ViV2x1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk5ZWFJvTG0xaGVDZ3dMQ0J5YjNkSmJtUmxlQ0FxSUhKdmQwaGxhV2RvZENrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyeHBaVzUwU0dWcFoyaDBJQzBnYUdWcFoyaDBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzltWm5ObGRFbHVUV2x1ZFhSbGN5QTlJRFl3SUM4Z2MyVjBkR2x1WjNNdWNtOTNjMUJsY2todmRYSWdLaUFvZEc5d0lDOGdjbTkzU0dWcFoyaDBLVHNnTHk4Z1BEdzlQU0JHU1ZoTlJWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdsdWRHVnlkbUZzSUQwZ2MyVjBkR2x1WjNNdVpHRjBZVnNrZEdocGN5NWtZWFJoS0NkamIyeDFiVzRuS1YwdVlYWmhhV3hoWW14bFNXNTBaWEoyWVd4eld5UjBhR2x6TG1SaGRHRW9KMmwwWlcwdGFXNWtaWGduS1YwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYldGMFkyaFNaWE4xYkhRZ1BTQnpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YldGMFkyaEdkVzVqS0dsMFpXMHNJR2x1ZEdWeWRtRnNMQ0J2Wm1aelpYUkpiazFwYm5WMFpYTXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNCbGNtRjBhVzl1TG5OMFlYSjBWR2x0WlNBOUlHWnBibVJUZEdGeWRGUnBiV1VvY205M1NXNWtaWGdzSUhKdmQzTlFaWEpJYjNWeUxDQnBiblJsY25aaGJDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrWld3dVkzTnpLSHNnZEc5d09pQjBiM0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbU56Y3lnblltRmphMmR5YjNWdVpDMWpiMnh2Y2ljc0lHMWhkR05vVW1WemRXeDBMbU52Ykc5eUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YUdWcFoyaDBLR2hsYVdkb2RDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5Ob2IzY29LVHRjYmx4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHVnNMbVJoZEdFb0oyMWhkR05vSnl3Z0syMWhkR05vVW1WemRXeDBMbTFoZEdOb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdWc0xtUmhkR0VvSjIxaGRHTm9KeXdnTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHVnNMbWhwWkdVb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk4wSUcxdmRYTmxSRzkzYmlBOUlDaGxkbVZ1ZENBdktqb2dUVzkxYzJWRmRtVnVkQ0FxTHlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblF1ZDJocFkyZ2dJVDA5SURFcElIc2djbVYwZFhKdU95QjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdKSE5yWldSMWJHVnlWM0poY0hCbGNpQTlJQ1FvWUM0a2UzTmxkSFJwYm1kekxuTnJaV1IxYkdWeVYzSmhjSEJsY2tOemMwTnNZWE56ZldBcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENBa1kyRnlaQ0E5SUNRb1pYWmxiblF1WTNWeWNtVnVkRlJoY21kbGRDazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdKRzF2ZG1sdVowTmhjbVFnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdKR05oY21RdVkyeHZibVVvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1a1lYUmhLQ2RwYm1SbGVDY3NJQ1JqWVhKa0xtUmhkR0VvSjJsdVpHVjRKeWtwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1SaGRHRW9KMkZ6YzJsbmJtVmtKeXdnSkdOaGNtUXVaR0YwWVNnbllYTnphV2R1WldRbktTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZV1JrUTJ4aGMzTW9ZQ1I3YzJWMGRHbHVaM011YVhSbGJYTlBjSFJwYjI1ekxtbDBaVzFEWVhKa1EzTnpRMnhoYzNOOUxXMXZkbWx1WjJBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxiVzkyWlVOc1lYTnpLR0FrZTNObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NXBkR1Z0UTJGeVpFTnpjME5zWVhOemZTMXdhVzV1WldSZ0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTNhV1IwYUNna1kyRnlaQzUzYVdSMGFDZ3BLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVoY0hCbGJtUlVieWdrYzJ0bFpIVnNaWEpYY21Gd2NHVnlLVHRjYmx4dUlDQWdJQ0FnSUNBdkwzWmhjaUJpYjNWdVkyVWdQU0FrWTJGeVpGc3dYUzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tUdGNiaUFnSUNBZ0lDQWdMeThnWm1sNGJXVWdYbDVlWEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzltWm5ObGRGZ2dQU0JsZG1WdWRDNXdZV2RsV0NBdElHVjJaVzUwTG05bVpuTmxkRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhSWklEMGdaWFpsYm5RdWNHRm5aVmtnTFNCbGRtVnVkQzV2Wm1aelpYUlpPMXh1WEc0Z0lDQWdJQ0FnSUNSdGIzWnBibWREWVhKa0xtTnpjeWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiM0E2SUc5bVpuTmxkRmtnS3lBbmNIZ25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRG9nYjJabWMyVjBXQ0FySUNkd2VDZGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2IzQmxjbUYwYVc5dUlEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0pHTmhjbVFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWtiVzkyYVc1blEyRnlaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEZnNklHVjJaVzUwTG05bVpuTmxkRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhSWk9pQmxkbVZ1ZEM1dlptWnpaWFJaWEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FXNWtaWGdnUFNCd1lYSnpaVWx1ZENna1kyRnlaQzVrWVhSaEtDZHBibVJsZUNjcEtUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FYTkJjM05wWjI1bFpDQTlJQ0VoSkcxdmRtbHVaME5oY21RdVpHRjBZU2duWVhOemFXZHVaV1FuS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVhSbGJTQTlJR2RsZEVsMFpXMG9hVzVrWlhnc0lHbHpRWE56YVdkdVpXUXBPMXh1WEc0Z0lDQWdJQ0FnSUNSallYSmtMbWhwWkdVb0tUdGNibHh1SUNBZ0lDQWdJQ0FrYjNkdVpYSkViMk4xYldWdWRDNXZiaWduYlc5MWMyVnRiM1psSnl3Z2JXOTFjMlZOYjNabEtUdGNiaUFnSUNBZ0lDQWdKRzkzYm1WeVJHOWpkVzFsYm5RdWIyNG9KMjF2ZFhObGRYQW5MQ0J0YjNWelpWVndLVHRjYmx4dUlDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQWtLQ2N1SnlBcklITmxkSFJwYm1kekxtbDBaVzF6VDNCMGFXOXVjeTVwZEdWdFEyRnlaRU56YzBOc1lYTnpLUzV2YmlnbmJXOTFjMlZrYjNkdUp5d2diVzkxYzJWRWIzZHVLVHRjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2NHOXdkV3hoZEdWVGEyVmtkV3hsY2tsMFpXMXpPeUlzSW1OdmJuTjBJR1JsWm1GMWJIUlRaWFIwYVc1bmN5QTlJSHRjYmlBZ0lDQXZMeUJFWVhSaElHRjBkSEpwWW5WMFpYTmNiaUFnSUNCb1pXRmtaWEp6T2lCdWRXeHNMQ0FnTHk4Z2MzUnlhVzVuVzEwZ0xTQkJjbkpoZVNCdlppQmpiMngxYlc0Z2FHVmhaR1Z5YzF4dUlDQWdJSFJoYzJ0ek9pQmJYU3dnSUNBZ0lDQXZMeUJVWVhOclcxMGdMU0JCY25KaGVTQnZaaUIwWVhOcmN5NGdVbVZ4ZFdseVpXUWdabWxsYkdSek9pQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXUTZJRzUxYldKbGNpd2djM1JoY25SVWFXMWxPaUJ1ZFcxaVpYSXNJR1IxY21GMGFXOXVPaUJ1ZFcxaVpYSXNJR052YkhWdGJqb2diblZ0WW1WeVhHNWNiaUFnSUNCcGRHVnRjem9nVzEwc0lDQWdJQ0FnTHk4Z1NYUmxiVnRkSUMwZ1FYSnlZWGtnYjJZZ2JtOTBMV0Z6YzJsdVoyNWxaQ0IwWVhOcmMxeHVYRzRnSUNBZ2JtOTBRV3hzYjJOaGRHVmtUR0ZpWld3NklDZE9iM1FnWVd4c2IyTmhkR1ZrSnl4Y2JseHVJQ0FnSUM4dklFTmhjbVFnZEdWdGNHeGhkR1VnTFNCSmJtNWxjaUJqYjI1MFpXNTBJRzltSUhSaGMyc2dZMkZ5WkM0Z1hHNGdJQ0FnTHk4Z1dXOTFKM0psSUdGaWJHVWdkRzhnZFhObElDUjdhMlY1ZlNCcGJuTnBaR1VnZEdWdGNHeGhkR1VzSUhkb1pYSmxJR3RsZVNCcGN5QmhibmtnY0hKdmNHVnlkSGtnWm5KdmJTQjBZWE5yTGx4dUlDQWdJR05oY21SVVpXMXdiR0YwWlRvZ0p6eGthWFkrSkh0cFpIMDhMMlJwZGo0bkxGeHVYRzRnSUNBZ0x5OGdRM056SUdOc1lYTnpaWE5jYmlBZ0lDQnphMlZrZFd4bGNsZHlZWEJ3WlhKRGMzTkRiR0Z6Y3pvZ0ozTnJaV1IxYkdWeUxYZHlZWEJ3WlhJbkxGeHVJQ0FnSUdOdmJuUmhhVzVsY2tOemMwTnNZWE56T2lBbmMydGxaSFZzWlhJdFkyOXVkR0ZwYm1WeUp5eGNiaUFnSUNCb1pXRmtaWEpEYjI1MFlXbHVaWEpEYzNORGJHRnpjem9nSjNOclpXUjFiR1Z5TFdobFlXUmxjbk1uTEZ4dUlDQWdJSE5qYUdWa2RXeGxja052Ym5SaGFXNWxja056YzBOc1lYTnpPaUFuYzJ0bFpIVnNaWEl0YldGcGJpY3NYRzRnSUNBZ2RHRnphMUJzWVdObGFHOXNaR1Z5UTNOelEyeGhjM002SUNkemEyVmtkV3hsY2kxMFlYTnJMWEJzWVdObGFHOXNaR1Z5Snl4Y2JpQWdJQ0JoZG1GcGJHRmliR1ZKYm5SbGNuWmhiRkJzWVdObGFHOXNaR1Z5UTNOelEyeGhjM002SUNkemEyVmtkV3hsY2kxcGJuUmxjblpoYkMxd2JHRmpaV2h2YkdSbGNpY3NYRzRnSUNBZ1kyVnNiRU56YzBOc1lYTnpPaUFuYzJ0bFpIVnNaWEl0WTJWc2JDY3NYRzRnSUNBZ2NtVnphWHBoWW14bFNHRnVaR3hsY2tOemMwTnNZWE56T2lBbmNtVnphWHBoWW14bExXaGhibVJzWlhJbkxGeHVJQ0FnSUhKbGMybDZZV0pzWlZOc2FXUmxja056YzBOc1lYTnpPaUFuY21WemFYcGhZbXhsTFhOc2FXUmxjaWNzWEc1Y2JpQWdJQ0JzYVc1bFNHVnBaMmgwT2lBek1Dd2dJQ0FnSUNBZ0lDQXZMeUJvWldsbmFIUWdiMllnYjI1bElHeHBibVVnYVc0Z1ozSnBaRnh1SUNBZ0lHSnZjbVJsY2xkcFpIUm9PaUF4TENBZ0lDQWdJQ0FnSUM4dklIZHBaSFJvSUc5bUlHSnZZWEprSUc5bUlHZHlhV1FnWTJWc2JGeHVJQ0FnSUdOdmJIVnRibGRwWkhSb09pQXlNREFzWEc0Z0lDQWdiV2x1UTI5c2RXMXVWMmxrZEdnNklERXdNQ3hjYmx4dUlDQWdJSEp2ZDNOUVpYSkliM1Z5T2lBeUxDQWdJQ0FnSUNBZ0lDOHZJR052ZFc1MElHOW1JSEp2ZDNNZ1ptOXlJRzl1WlNCb2IzVnlYRzVjYmlBZ0lDQmpiMngxYlc1U1pYTnBlbVZGYm1GaWJHVmtPaUIwY25WbExDQXZMeUJwY3lCamIyeDFiVzV6SUhKbGMybDZZV0pzWlZ4dVhHNGdJQ0FnWkdWaWRXYzZJR1poYkhObExGeHVYRzRnSUNBZ2FYUmxiWE5QY0hScGIyNXpPaUI3WEc0Z0lDQWdJQ0FnSUdWdVlXSnNaV1E2SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0JwZEdWdGMwTnpjME5zWVhOek9pQW5jMnRsWkhWc1pYSXRhWFJsYlhNbkxGeHVJQ0FnSUNBZ0lDQm9hV2RvYkdsbmFIUkpkR1Z0UTNOek9pQW5jMmt0YUdsbmFHeHBaMmgwTFdsMFpXMG5MRnh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEpUWld4bFkzUnZjam9nWENJamMydGxaSFZzWlhJdGFYUmxiWE5jSWl4Y2JpQWdJQ0FnSUNBZ2FYUmxiVU5oY21SRGMzTkRiR0Z6Y3pvZ0ozTnBMV05oY21RbkxGeHVJQ0FnSUNBZ0lDQnBkR1Z0UTJGeVpGUmxiWEJzWVhSbE9pQW5QR1JwZGo0a2UyUjFjbUYwYVc5dWZUd3ZaR2wyUGljc1hHNGdJQ0FnSUNBZ0lIUnBkR3hsT2lBblNYUmxiWE1uTEZ4dUlDQWdJQ0FnSUNCdmJrbDBaVzFYYVd4c1FtVkJjM05wWjI1bFpEb2dLQ2tnUFQ0Z2V5QmpiMjV6YjJ4bExteHZaeWhoY21kMWJXVnVkSE1wT3lCOUxGeHVJQ0FnSUNBZ0lDQnZia2wwWlcxRWFXUkJjM05wWjI1bFpEb2dLQ2tnUFQ0Z2V5QmpiMjV6YjJ4bExteHZaeWhoY21kMWJXVnVkSE1wT3lCOUxGeHVJQ0FnSUNBZ0lDQnRZWFJqYUVaMWJtTTZJQ2dwSUQwK0lIc2djbVYwZFhKdUlIc2diV0YwWTJnNklIUnlkV1VnZlNCOVhHNGdJQ0FnZlZ4dWZUdGNibHh1Wlhod2IzSjBJSHNnWkdWbVlYVnNkRk5sZEhScGJtZHpJSDA3SWl3aWFXMXdiM0owSUhzZ1pHVm1ZWFZzZEZObGRIUnBibWR6SUgwZ1puSnZiU0FuTGk5elpYUjBhVzVuY3ljN1hHNXBiWEJ2Y25RZ2NHOXdkV3hoZEdWVGEyVmtkV3hsY2tsMFpXMXpJR1p5YjIwZ0p5NHZhWFJsYlhNbk8xeHVhVzF3YjNKMElIc2dZMjl0Y0dsc1pWUmxiWEJzWVhSbElIMGdabkp2YlNBbkxpOTBaVzF3YkdGMFpTYzdYRzVwYlhCdmNuUWdleUJ3WVhKelpWUnBiV1VnZlNCbWNtOXRJQ2N1TDNWMGFXeHpKenRjYmx4dVkyOXVjM1FnWkdsMklEMGdLR056YzBOc1lYTnpLU0E5UGlBa0tDYzhaR2wyUGp3dlpHbDJQaWNwTG1Ga1pFTnNZWE56S0dOemMwTnNZWE56S1R0Y2JseHVZMnhoYzNNZ1UydGxaSFZzWlhJZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDUmpiMjUwWVdsdVpYSXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWFIwYVc1bmN5QTlJQ1F1WlhoMFpXNWtLSFJ5ZFdVc0lHUmxabUYxYkhSVFpYUjBhVzVuY3l3Z2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11SkdOdmJuUmhhVzVsY2lBOUlDUmpiMjUwWVdsdVpYSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHOTNibVZ5Ukc5amRXMWxiblFnUFNBa0tDUmpiMjUwWVdsdVpYSmJNRjB1YjNkdVpYSkViMk4xYldWdWRDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHaGxZV1JsY2tOdmJuUmhhVzVsY2lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKSE5qYUdWa2RXeGxSV3dnUFNCdWRXeHNYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzQmxjbUYwYVc5dUlEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOcGVtVkJiR3hEYjJ4MWJXNXpJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6WlhSMGFXNW5jeTVrWldKMVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1MGFXMWxLQ2R6YTJWa2RXeGxjaWNwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1eVpXWnlaWE5vS0NrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjMlYwZEdsdVozTXVaR1ZpZFdjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZEdsdFpVVnVaQ2duYzJ0bFpIVnNaWEluS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhObGRGSnZkM05RWlhKSWIzVnlLSEp2ZDNOUVpYSkliM1Z5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMGRHbHVaM011Y205M2MxQmxja2h2ZFhJZ1BTQnliM2R6VUdWeVNHOTFjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV1p5WlhOb0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MyVjBVbVZ6YVhwbFFXeHNRMjlzZFcxdWN5aHlaWE5wZW1WQmJHeERiMngxYlc1ektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnphWHBsUVd4c1EyOXNkVzF1Y3lBOUlISmxjMmw2WlVGc2JFTnZiSFZ0Ym5NN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WbWNtVnphQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSMGFXNW5jeTVwZEdWdGN5QTlJSFJvYVhNdWMyVjBkR2x1WjNNdWFYUmxiWE1nSmlZZ2RHaHBjeTV6WlhSMGFXNW5jeTVwZEdWdGN5NXRZWEFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9hWFJsYlN3Z2FXNWtaWGdwSUQwK0lFOWlhbVZqZEM1aGMzTnBaMjRvZTMwc0lIdHBibVJsZUgwc0lHbDBaVzBwWEc0Z0lDQWdJQ0FnSUNrZ2ZId2dXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwZEdsdVozTXVkR0Z6YTNNZ1BTQjBhR2x6TG5ObGRIUnBibWR6TG5SaGMydHpJQ1ltSUhSb2FYTXVjMlYwZEdsdVozTXVkR0Z6YTNNdWJXRndLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tIUmhjMnNzSUdsdVpHVjRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnpheTVwZEdWdElEMGdUMkpxWldOMExtRnpjMmxuYmloN2ZTd2dlMmx1WkdWNE9pQnBibVJsZUNBcklIUm9hWE11YzJWMGRHbHVaM011YVhSbGJYTXViR1Z1WjNSb2ZTd2dkR0Z6YXk1cGRHVnRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR0Z6YXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnS1NCOGZDQmJYVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ2Y0hWc1lYUmxLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5ObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NWxibUZpYkdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzQjFiR0YwWlZOclpXUjFiR1Z5U1hSbGJYTW9kR2hwY3k1elpYUjBhVzVuY3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCd2IzQjFiR0YwWlNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a1kyOXVkR0ZwYm1WeUxtVnRjSFI1S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11SkdOdmJuUmhhVzVsY2k1aFpHUkRiR0Z6Y3loMGFHbHpMbk5sZEhScGJtZHpMbU52Ym5SaGFXNWxja056YzBOc1lYTnpLVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JvWldGa1pYSnpJRDBnZEdocGN5NXpaWFIwYVc1bmN5NW9aV0ZrWlhKeklEOWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwZEdsdVozTXVhR1ZoWkdWeWN5QTZYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEhScGJtZHpMbVJoZEdFdWJXRndLSFJvYVhNdWMyVjBkR2x1WjNNdVoyVjBTR1ZoWkdWeUtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCQlpHUWdhR1ZoWkdWeWMxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSb1pXRmtaWEpEYjI1MFlXbHVaWElnUFNCa2FYWW9kR2hwY3k1elpYUjBhVzVuY3k1b1pXRmtaWEpEYjI1MFlXbHVaWEpEYzNORGJHRnpjeWs3WEc0Z0lDQWdJQ0FnSUdobFlXUmxjbk11Wm05eVJXRmphQ2dvWld4bGJXVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsMktDa3VkR1Y0ZENobGJHVnRaVzUwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aGNIQmxibVJVYnloMGFHbHpMaVJvWldGa1pYSkRiMjUwWVdsdVpYSXBPMXh1SUNBZ0lDQWdJQ0I5TENCMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NGtZMjl1ZEdGcGJtVnlMbUZ3Y0dWdVpDaDBhR2x6TGlSb1pXRmtaWEpEYjI1MFlXbHVaWElwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRUZrWkNCelkyaGxaSFZzWlhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTRrYzJOb1pXUjFiR1ZGYkNBOUlHUnBkaWgwYUdsekxuTmxkSFJwYm1kekxuTmphR1ZrZFd4bGNrTnZiblJoYVc1bGNrTnpjME5zWVhOektUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MyTm9aV1IxYkdWVWFXMWxiR2x1WlVWc0lEMGdaR2wyS0hSb2FYTXVjMlYwZEdsdVozTXVjMk5vWldSMWJHVnlRMjl1ZEdGcGJtVnlRM056UTJ4aGMzTWdLeUFuTFhScGJXVnNhVzVsSnlrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhOamFHVmtkV3hsUW05a2VVVnNJRDBnWkdsMktIUm9hWE11YzJWMGRHbHVaM011YzJOb1pXUjFiR1Z5UTI5dWRHRnBibVZ5UTNOelEyeGhjM01nS3lBbkxXSnZaSGtuS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbmNtbGtRMjlzZFcxdVJXeGxiV1Z1ZENBOUlHUnBkaWdwTzF4dVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dNalE3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVRzl3ZFd4aGRHVWdkR2x0Wld4cGJtVmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdvZ1BTQXdPeUJxSUR3Z2RHaHBjeTV6WlhSMGFXNW5jeTV5YjNkelVHVnlTRzkxY2pzZ2Fpc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUnBiV1ZzYVc1bFEyVnNiQ0E5SUdScGRpZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1b1pXbG5hSFFvZEdocGN5NXpaWFIwYVc1bmN5NXNhVzVsU0dWcFoyaDBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVlXUmtRMnhoYzNNb2FpQTlQU0IwYUdsekxuTmxkSFJwYm1kekxuSnZkM05RWlhKSWIzVnlJQzBnTVNBL0lGd2liR0Z6ZEZ3aUlEb2dYQ0pjSWlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYWlBOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1ZzYVc1bFEyVnNiQ0E5SUhScGJXVnNhVzVsUTJWc2JGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtTnpjeWhjSW14cGJtVXRhR1ZwWjJoMFhDSXNJSFJvYVhNdWMyVjBkR2x1WjNNdWJHbHVaVWhsYVdkb2RDQXJJQ2R3ZUNjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWRHVjRkQ2hxSUQwOUlEQWdQeUIwYUdsekxuUnZWR2x0WlZOMGNtbHVaeWhwS1NBNklGd2lYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFXMWxiR2x1WlVObGJHd3VZWEJ3Wlc1a1ZHOG9jMk5vWldSMWJHVlVhVzFsYkdsdVpVVnNLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGRpaDBhR2x6TG5ObGRIUnBibWR6TG1ObGJHeERjM05EYkdGemN5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1obGFXZG9kQ2gwYUdsekxuTmxkSFJwYm1kekxteHBibVZJWldsbmFIUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aFpHUkRiR0Z6Y3locUlEMDlJSFJvYVhNdWMyVjBkR2x1WjNNdWNtOTNjMUJsY2todmRYSWdMU0F4SUQ4Z1hDSnNZWE4wWENJZ09pQmNJbHdpS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZWEJ3Wlc1a1ZHOG9aM0pwWkVOdmJIVnRia1ZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VHOXdkV3hoZEdVZ1ozSnBaRnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ01Ec2dhaUE4SUdobFlXUmxjbk11YkdWdVozUm9PeUJxS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1ZzSUQwZ1ozSnBaRU52YkhWdGJrVnNaVzFsYm5RdVkyeHZibVVvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ptbDRiV1VnVzJGMllXbHNZV0pzWlVsdWRHVnlkbUZzY3lCdGRYTjBJRzV2ZENCMWMyVWdhVzVrWlhoZFhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmhkbUZwYkdGaWJHVkpiblJsY25aaGJITlFiR0ZqWldodmJHUmxjaUE5SUdScGRpaDBhR2x6TG5ObGRIUnBibWR6TG1GMllXbHNZV0pzWlVsdWRHVnlkbUZzVUd4aFkyVm9iMnhrWlhKRGMzTkRiR0Z6Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBiblJsY25aaGJITWdQU0IwYUdsekxuTmxkSFJwYm1kekxtUmhkR0ZiYWwwdVlYWmhhV3hoWW14bFNXNTBaWEoyWVd4ek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhjSEJsYm1SQmRtRnBiR0ZpYkdWSmJuUmxjblpoYkNoaGRtRnBiR0ZpYkdWSmJuUmxjblpoYkhOUWJHRmpaV2h2YkdSbGNpd2dhVzUwWlhKMllXeHpMQ0JxS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWld3dWNISmxjR1Z1WkNoaGRtRnBiR0ZpYkdWSmJuUmxjblpoYkhOUWJHRmpaV2h2YkdSbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNWhjSEJsYm1SVWJ5aHpZMmhsWkhWc1pVSnZaSGxGYkNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFEyOXNkVzF1VjJsa2RHZ29haXdnZEdocGN5NXpaWFIwYVc1bmN5NWpiMngxYlc1WGFXUjBhQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGlSelkyaGxaSFZzWlVWc0xtRndjR1Z1WkNoelkyaGxaSFZzWlZScGJXVnNhVzVsUld3cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSelkyaGxaSFZzWlVWc0xtRndjR1Z1WkNoelkyaGxaSFZzWlVKdlpIbEZiQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTRrWTI5dWRHRnBibVZ5TG1Gd2NHVnVaQ2gwYUdsekxpUnpZMmhsWkhWc1pVVnNLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlRaWFFnWkdWbVlYVnNkQ0IzYVdSMGFDQm1iM0lnWTI5c2RXMXVjMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ01Ec2dhaUE4SUdobFlXUmxjbk11YkdWdVozUm9PeUJxS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFEyOXNkVzF1VjJsa2RHZ29haXdnZEdocGN5NXpaWFIwYVc1bmN5NWpiMngxYlc1WGFXUjBhQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJEYjI1bWFXZDFjbVVnY21WemFYcHBibWRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YzJWMGRHbHVaM011WTI5c2RXMXVVbVZ6YVhwbFJXNWhZbXhsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdkMWNtVlNaWE5wZW1sdVp5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR0Z6YTNNb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5ObGRIUnBibWR6TG5SaGMydHpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibVpwWjNWeVpWSmxjMmw2YVc1bktDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnphMlZrZFd4bGNrVnNVbVZ6YVhwaFlteGxTR0Z1Wkd4bGNpQTlJR1JwZGloMGFHbHpMbk5sZEhScGJtZHpMbkpsYzJsNllXSnNaVWhoYm1Sc1pYSkRjM05EYkdGemN5azdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NGtZMjl1ZEdGcGJtVnlMbkJ5WlhCbGJtUW9jMnRsWkhWc1pYSkZiRkpsYzJsNllXSnNaVWhoYm1Sc1pYSXBPMXh1WEc0Z0lDQWdJQ0FnSUhOclpXUjFiR1Z5Uld4U1pYTnBlbUZpYkdWSVlXNWtiR1Z5TG5kcFpIUm9LSFJvYVhNdUpHTnZiblJoYVc1bGNpNTNhV1IwYUNncEtUdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE5wZW1GaWJHVlRiR2xrWlhKSVpXbG5hSFFnUFNCMGFHbHpMaVJ6WTJobFpIVnNaVVZzTG1obGFXZG9kQ2dwSUNzZ2RHaHBjeTRrYUdWaFpHVnlRMjl1ZEdGcGJtVnlMbWhsYVdkb2RDZ3BPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSb1pXRmtaWEpEYjI1MFlXbHVaWEl1Wm1sdVpDZ25aR2wySnlrdVpXRmphQ2dvWHl3Z1pXd3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JwZGloMGFHbHpMbk5sZEhScGJtZHpMbkpsYzJsNllXSnNaVk5zYVdSbGNrTnpjME5zWVhOektWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWpjM01vSjJ4bFpuUW5MQ0JsYkM1dlptWnpaWFJNWldaMElDc2daV3d1WTJ4cFpXNTBWMmxrZEdncFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtaGxhV2RvZENoeVpYTnBlbUZpYkdWVGJHbGtaWEpJWldsbmFIUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbVJoZEdFb0oyTnZiSFZ0YmkxcFpDY3NJR2x1WkdWNEt5c3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbUZ3Y0dWdVpGUnZLSE5yWldSMWJHVnlSV3hTWlhOcGVtRmliR1ZJWVc1a2JHVnlLVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQnphMlZrZFd4bGNrVnNVbVZ6YVhwaFlteGxTR0Z1Wkd4bGNpNXZiaWduYlc5MWMyVmtiM2R1Snl3Z0p5NG5JQ3NnZEdocGN5NXpaWFIwYVc1bmN5NXlaWE5wZW1GaWJHVlRiR2xrWlhKRGMzTkRiR0Z6Y3l3Z2RHaHBjeTV2YmxKbGMybDZaVkJ2YVc1MFpYSkViM2R1TG1KcGJtUW9kR2hwY3lrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdGd2NHVnVaRUYyWVdsc1lXSnNaVWx1ZEdWeWRtRnNLSEJzWVdObGFHOXNaR1Z5TENCcGJuUmxjblpoYkhNc0lHTnZiSFZ0YmlrZ2UxeHVJQ0FnSUNBZ0lDQnBiblJsY25aaGJITXVabTl5UldGamFDZ29hVzUwWlhKMllXd3NJR2x1WkdWNEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJtNWxja052Ym5SbGJuUWdQU0JrYVhZb0tTNTBaWGgwS0hSb2FYTXVjMlYwZEdsdVozTXVibTkwUVd4c2IyTmhkR1ZrVEdGaVpXd3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5d0lEMGdkR2hwY3k1blpYUkRZWEprVkc5d1VHOXphWFJwYjI0b2FXNTBaWEoyWVd3dWMzUmhjblFwSUNzZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1IxY21GMGFXOXVJRDBnY0dGeWMyVlVhVzFsS0dsdWRHVnlkbUZzTG1WdVpDa2dMU0J3WVhKelpWUnBiV1VvYVc1MFpYSjJZV3d1YzNSaGNuUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYUdWcFoyaDBJRDBnZEdocGN5NW5aWFJEWVhKa1NHVnBaMmgwS0dSMWNtRjBhVzl1S1NBdElEVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOclNYUmxiVWhwWjJoMGJHbG5hSFJFYVhZZ1BTQmthWFlvZEdocGN5NXpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YUdsbmFHeHBaMmgwU1hSbGJVTnpjeWt1YUdsa1pTZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemFHbG1kRVJwZGlBOUlHUnBkaWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1GMGRISW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVG9nSjNSdmNEb2dKeUFySUhSdmNDQXJJQ2R3ZURzZ2FHVnBaMmgwT2lBbklDc2dhR1ZwWjJoMElDc2dKM0I0SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCemFHbG1kRVJwZGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1a1lYUmhLQ2RqYjJ4MWJXNG5MQ0JqYjJ4MWJXNHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbVJoZEdFb0oybDBaVzB0YVc1a1pYZ25MQ0JwYm1SbGVDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZWEJ3Wlc1a0tHbHVibVZ5UTI5dWRHVnVkQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WVhCd1pXNWtLSE5yU1hSbGJVaHBaMmgwYkdsbmFIUkVhWFlwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1Gd2NHVnVaRlJ2S0hCc1lXTmxhRzlzWkdWeUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoY0hCbGJtUlVZWE5yY3loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemFHbG1kRVJwZGl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuUmxjblpoYkM1emRHRnlkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkSFJwYm1kekxuUmhjMnR6TG1acGJIUmxjaWgwSUQwK0lIUXVZMjlzZFcxdUlEMDlJR052YkhWdGJpa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1hsNWVJR1pwYkhSbGNpQmllU0J6YUdsbWRDQnBiblJsY25aaGJDQjBiMjljYmx4dUlDQWdJQ0FnSUNCOUxDQjBhR2x6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lvZ1hHNGdJQ0FnSUNvZ1IyVnVaWEpoZEdVZ2RHRnpheUJqWVhKa2MxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdGd2NHVnVaRlJoYzJ0ektIQnNZV05sYUc5c1pHVnlMQ0JwYm5SbGNuWmhiRk4wWVhKMExDQjBZWE5yY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBZWE5yY3k1bWIzSkZZV05vS0NoMFlYTnJLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RHOXdJRDBnZEdocGN5NW5aWFJEWVhKa1ZHOXdVRzl6YVhScGIyNG9kR0Z6YXk1emRHRnlkQ3dnYVc1MFpYSjJZV3hUZEdGeWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhR1ZwWjJoMElEMGdkR2hwY3k1blpYUkRZWEprU0dWcFoyaDBLSFJoYzJzdWFYUmxiUzVrZFhKaGRHbHZiaUF2SURZd0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuWlhSSmRHVnRSR2wyS0hSaGMyc3VhWFJsYlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVlYUjBjaWg3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsT2lBbmRHOXdPaUFuSUNzZ2RHOXdJQ3NnSjNCNE95Qm9aV2xuYUhRNklDY2dLeUJvWldsbmFIUWdLeUFuY0hnblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZV1JrUTJ4aGMzTW9ZQ1I3ZEdocGN5NXpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YVhSbGJVTmhjbVJEYzNORGJHRnpjMzFnS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aFpHUkRiR0Z6Y3loZ0pIdDBhR2x6TG5ObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NXBkR1Z0UTJGeVpFTnpjME5zWVhOemZTMXdhVzV1WldSZ0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTNhV1IwYUNnbllYVjBieWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1SaGRHRW9KMmx1WkdWNEp5d2dkR0Z6YXk1cGRHVnRMbWx1WkdWNEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWtZWFJoS0NkaGMzTnBaMjVsWkNjc0lERXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbUZ3Y0dWdVpGUnZLSEJzWVdObGFHOXNaR1Z5S1R0Y2JpQWdJQ0FnSUNBZ2ZTd2dkR2hwY3lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYjI1U1pYTnBlbVZRYjJsdWRHVnlWWEFvWlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHOXdJRDBnZEdocGN5NXZjR1Z5WVhScGIyNDdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTV2Y0dWeVlYUnBiMjRwSUhzZ2NtVjBkWEp1T3lCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k0a2IzZHVaWEpFYjJOMWJXVnVkQzV2Wm1Zb0oyMXZkWE5sZFhBbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a2IzZHVaWEpFYjJOMWJXVnVkQzV2Wm1Zb0oyMXZkWE5sYlc5MlpTY3BPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViM0JsY21GMGFXOXVJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCdmJsSmxjMmw2WlZCdmFXNTBaWEpOYjNabEtHVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J2Y0NBOUlIUm9hWE11YjNCbGNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWIzQmxjbUYwYVc5dUtTQjdJSEpsZEhWeWJqc2dmVnh1WEc0Z0lDQWdJQ0FnSUM4dklFUmxkR1Z5YldsdVpTQjBhR1VnWkdWc2RHRWdZMmhoYm1kbElHSmxkSGRsWlc0Z2MzUmhjblFnWVc1a0lHNWxkeUJ0YjNWelpTQndiM05wZEdsdmJpd2dZWE1nWVNCd1pYSmpaVzUwWVdkbElHOW1JSFJvWlNCMFlXSnNaU0IzYVdSMGFGeHVJQ0FnSUNBZ0lDQnNaWFFnWkdsbVptVnlaVzVqWlNBOUlDaGxkbVZ1ZEM1d1lXZGxXQ0F0SUc5d0xuTjBZWEowV0NrN0lDOHZJQzhnZEdocGN5NGtjMk5vWldSMWJHVkZiQzUzYVdSMGFDZ3BJQ29nTVRBd08xeHVJQ0FnSUNBZ0lDQnBaaUFvWkdsbVptVnlaVzVqWlNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHTnZiSFZ0Yms1MWJXSmxjaUE5SUc5d0xtTnZiSFZ0Yms1MWJXSmxjanRjYmlBZ0lDQWdJQ0FnYkdWMElIZHBaSFJvSUQwZ2IzQXVkMmxrZEdnZ0t5QmthV1ptWlhKbGJtTmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV5WlhOcGVtVkJiR3hEYjJ4MWJXNXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSFJvYVhNdWMyVjBkR2x1WjNNdVpHRjBZUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxRMjlzZFcxdVYybGtkR2dvYVN3Z2QybGtkR2d1ZEc5R2FYaGxaQ2d5S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVU52YkhWdGJsZHBaSFJvS0dOdmJIVnRiazUxYldKbGNpd2dkMmxrZEdndWRHOUdhWGhsWkNneUtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZibEpsYzJsNlpWQnZhVzUwWlhKRWIzZHVLR1YyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUU5dWJIa2dZWEJ3YkdsbGN5QjBieUJzWldaMExXTnNhV05ySUdSeVlXZG5hVzVuWEc0Z0lDQWdJQ0FnSUdsbUlDaGxkbVZ1ZEM1M2FHbGphQ0FoUFQwZ01Ta2dleUJ5WlhSMWNtNDdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QkpaaUJoSUhCeVpYWnBiM1Z6SUhSb2FYTXViM0JsY21GMGFXOXVJR2x6SUdSbFptbHVaV1FzSUhkbElHMXBjM05sWkNCMGFHVWdiR0Z6ZENCdGIzVnpaWFZ3TGx4dUlDQWdJQ0FnSUNBdkx5QlFjbTlpWVdKc2VTQm5iMkppYkdWa0lIVndJR0o1SUhWelpYSWdiVzkxYzJsdVp5QnZkWFFnZEdobElIZHBibVJ2ZHlCMGFHVnVJSEpsYkdWaGMybHVaeTVjYmlBZ0lDQWdJQ0FnTHk4Z1YyVW5iR3dnYzJsdGRXeGhkR1VnWVNCd2IybHVkR1Z5ZFhBZ2FHVnlaU0J3Y21sdmNpQjBieUJwZEZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1dmNHVnlZWFJwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVVbVZ6YVhwbEtHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR3hsZENBa1kzVnljbVZ1ZEVkeWFYQWdQU0FrS0dWMlpXNTBMbU4xY25KbGJuUlVZWEpuWlhRcE8xeHVJQ0FnSUNBZ0lDQnNaWFFnWTI5c2RXMXVUblZ0WW1WeUlEMGdKR04xY25KbGJuUkhjbWx3TG1SaGRHRW9KMk52YkhWdGJpMXBaQ2NwTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JuY21sd1NXNWtaWGdnUFNBa1kzVnljbVZ1ZEVkeWFYQXVhVzVrWlhnb0tUdGNiaUFnSUNBZ0lDQWdiR1YwSUNSc1pXWjBRMjlzZFcxdUlEMGdkR2hwY3k0a2FHVmhaR1Z5UTI5dWRHRnBibVZ5TG1acGJtUW9KMlJwZGljcExtVnhLR2R5YVhCSmJtUmxlQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR3hsWm5SWGFXUjBhQ0E5SUNSc1pXWjBRMjlzZFcxdVd6QmRMbU5zYVdWdWRGZHBaSFJvTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YjNCbGNtRjBhVzl1SUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2RXMXVUblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGNuUllPaUJsZG1WdWRDNXdZV2RsV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQnNaV1owVjJsa2RHaGNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMaVJ2ZDI1bGNrUnZZM1Z0Wlc1MExtOXVLQ2R0YjNWelpXMXZkbVVuTENCMGFHbHpMbTl1VW1WemFYcGxVRzlwYm5SbGNrMXZkbVV1WW1sdVpDaDBhR2x6S1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Skc5M2JtVnlSRzlqZFcxbGJuUXViMjRvSjIxdmRYTmxkWEFuTENCMGFHbHpMbEpsYzJsNlpTNWlhVzVrS0hSb2FYTXBLVHRjYmx4dUlDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIVndaR0YwWlVOdmJIVnRibGRwWkhSb0tHTnZiSFZ0Yms1MWJXSmxjaXdnZDJsa2RHZ3BJSHRjYmlBZ0lDQWdJQ0FnZDJsa2RHZ2dQU0JOWVhSb0xtMWhlQ2gzYVdSMGFDd2dkR2hwY3k1elpYUjBhVzVuY3k1dGFXNURiMngxYlc1WGFXUjBhQ2s3WEc0Z0lDQWdJQ0FnSUNRb0p5NG5JQ3NnZEdocGN5NXpaWFIwYVc1bmN5NW9aV0ZrWlhKRGIyNTBZV2x1WlhKRGMzTkRiR0Z6Y3lBcklDY2dQaUJrYVhZNlpYRW9KeUFySUdOdmJIVnRiazUxYldKbGNpQXJJQ2NwSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQzVqYzNNb0oyWnNaWGd0WW1GemFYTW5MQ0IzYVdSMGFDQXJJQ2R3ZUNjcE8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCamIyeDFiVzRnUFNBa0tDY3VKeUFySUhSb2FYTXVjMlYwZEdsdVozTXVjMk5vWldSMWJHVnlRMjl1ZEdGcGJtVnlRM056UTJ4aGMzTWdLeUFuTFdKdlpIa2dQaUJrYVhZNlpYRW9KeUFySUdOdmJIVnRiazUxYldKbGNpQXJJQ2NwSUQ0Z0xpY2dLeUIwYUdsekxuTmxkSFJwYm1kekxtTmxiR3hEYzNORGJHRnpjeWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQmthV1ptSUQwZ1kyOXNkVzF1TG5kcFpIUm9LQ2tnTFNCM2FXUjBhRHRjYmlBZ0lDQWdJQ0FnWTI5c2RXMXVMbmRwWkhSb0tIZHBaSFJvS1R0Y2JseHVJQ0FnSUNBZ0lDQWtLQ2N1SnlBcklIUm9hWE11YzJWMGRHbHVaM011Y21WemFYcGhZbXhsU0dGdVpHeGxja056YzBOc1lYTnpJQ3NnSnlBK0lHUnBkaWNwTG1WaFkyZ29LR2x1WkdWNExDQmxiQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHVaR1Y0SUQ0OUlHTnZiSFZ0Yms1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQWtaV3dnUFNBa0tHVnNLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JHVm1kQ0E5SUhCaGNuTmxTVzUwS0NSbGJDNWpjM01vSjJ4bFpuUW5LUzV5WlhCc1lXTmxLQ2R3ZUNjc0lDY25LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSkdWc0xtTnpjeWduYkdWbWRDY3NJR3hsWm5RZ0xTQmthV1ptS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWjJWMFNYUmxiVVJwZGlocGRHVnRLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJQ1JrYVhZZ1BTQmthWFlvZEdocGN5NXpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YVhSbGJVTmhjbVJEYzNORGJHRnpjeWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJsYlhCc1lYUmxJRDBnWTI5dGNHbHNaVlJsYlhCc1lYUmxLSFJvYVhNdWMyVjBkR2x1WjNNdWFYUmxiWE5QY0hScGIyNXpMbWwwWlcxRFlYSmtWR1Z0Y0d4aGRHVXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1U2SUNocGRHVnRLU0E5UGlCcGRHVnRMbWx1ZEdWeWRtRnNJRDhnWUNSN2FYUmxiUzVwYm5SbGNuWmhiQzV6ZEdGeWRIMGdkRzhnSkh0cGRHVnRMbWx1ZEdWeWRtRnNMbVZ1WkgxZ0lEb2dKeWRjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUnBkaWdwTG1oMGJXd29kR1Z0Y0d4aGRHVW9hWFJsYlNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNvZ1EyOXVkbVZ5ZENCa2IzVmliR1VnZG1Gc2RXVWdiMllnYUc5MWNuTWdkRzhnZW1WeWJ5MXdjbVZ3YjNOcGRHVmtJSE4wY21sdVp5QjNhWFJvSURNd0lHOXlJREF3SUhaaGJIVmxJRzltSUcxcGJuVjBaWE5jYmlBZ0lDQXFMMXh1SUNBZ0lIUnZWR2x0WlZOMGNtbHVaeWgyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFpoYkhWbElEd2dNVEFnUHlBbk1DY2dPaUFuSnlrZ0t5Qk5ZWFJvTG1ac2IyOXlLSFpoYkhWbEtTQXJJQ2hOWVhSb0xtTmxhV3dvZG1Gc2RXVXBJRDRnVFdGMGFDNW1iRzl2Y2loMllXeDFaU2tnUHlBbk9qTXdKeUE2SUNjNk1EQW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNGdhR1ZwWjJoMElHOW1JSFJoYzJzZ1kyRnlaQ0JpWVhObFpDQnZiaUJrZFhKaGRHbHZiaUJ2WmlCMGFHVWdkR0Z6YTF4dUlDQWdJQ0FxSUdSMWNtRjBhVzl1SUMwZ2FXNGdhRzkxY25OY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSRFlYSmtTR1ZwWjJoMEtHUjFjbUYwYVc5dUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHUjFjbUYwYVc5dVNXNU5hVzUxZEdWeklEMGdaSFZ5WVhScGIyNGdLaUEyTUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYUdWcFoyaDBUMlpOYVc1MWRHVWdQU0FvZEdocGN5NXpaWFIwYVc1bmN5NXNhVzVsU0dWcFoyaDBJQ3NnZEdocGN5NXpaWFIwYVc1bmN5NWliM0prWlhKWGFXUjBhQ2tnS2lCMGFHbHpMbk5sZEhScGJtZHpMbkp2ZDNOUVpYSkliM1Z5SUM4Z05qQTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQk5ZWFJvTG1ObGFXd29aSFZ5WVhScGIyNUpiazFwYm5WMFpYTWdLaUJvWldsbmFIUlBaazFwYm5WMFpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwZFhKdUlIUnZjQ0J2Wm1aelpYUWdiMllnZEdGemF5QmpZWEprSUdKaGMyVmtJRzl1SUhOMFlYSjBJSFJwYldVZ2IyWWdkR2hsSUhSaGMydGNiaUFnSUNBZ0tpQnpkR0Z5ZEZScGJXVWdMU0JwYmlCb2IzVnljMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRU5oY21SVWIzQlFiM05wZEdsdmJpaHpkR0Z5ZEZScGJXVXNJRzltWm5ObGRGUnBiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSE4wWVhKMFZHbHRaVWx1ZENBOUlIQmhjbk5sVkdsdFpTaHpkR0Z5ZEZScGJXVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2IyWm1jMlYwVkdsdFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhjblJVYVcxbFNXNTBJQzA5SUhCaGNuTmxWR2x0WlNodlptWnpaWFJVYVcxbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdWMyVjBkR2x1WjNNdWJHbHVaVWhsYVdkb2RDQXJJSFJvYVhNdWMyVjBkR2x1WjNNdVltOXlaR1Z5VjJsa2RHZ3BJQ29nS0hOMFlYSjBWR2x0WlVsdWRDQXFJSFJvYVhNdWMyVjBkR2x1WjNNdWNtOTNjMUJsY2todmRYSXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTJ0bFpIVnNaWEk3SWl3aVkyOXVjM1FnWTI5dGNHbHNaVlJsYlhCc1lYUmxJRDBnS0hSbGJYQnNZWFJsTENCbWRXNWpjeWtnUFQ0Z2FYUmxiU0E5UGlCN1hHNGdJQ0FnYkdWMElISmxjM1ZzZENBOUlIUmxiWEJzWVhSbE8xeHVJQ0FnSUdOdmJuTjBJSEpsWjB0bGVYTWdQU0F2WEZ3a1hGeDdLRnhjZHlzcFhGeDlMMmM3WEc0Z0lDQWdZMjl1YzNRZ2NtVm5SblZ1WTNNZ1BTQXZYRndrWEZ4N0tGeGNkeXNwWEZ3b1hGd3BYRng5TDJjN1hHNWNiaUFnSUNCc1pYUWdiV0YwWTJnZ1BTQXhPMXh1SUNBZ0lIZG9hV3hsSUNoMGNuVmxLU0I3WEc0Z0lDQWdJQ0FnSUcxaGRHTm9JRDBnY21WblMyVjVjeTVsZUdWaktIUmxiWEJzWVhSbEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGdFlYUmphQ2tnWW5KbFlXczdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHdGxlU0E5SUcxaGRHTm9XekZkTzF4dUlDQWdJQ0FnSUNCcFppQW9hWFJsYlM1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCeVpYTjFiSFF1Y21Wd2JHRmpaU2h0WVhSamFGc3dYU3dnYVhSbGJWdHJaWGxkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhkb2FXeGxJQ2htZFc1amN5a2dlMXh1SUNBZ0lDQWdJQ0J0WVhSamFDQTlJSEpsWjBaMWJtTnpMbVY0WldNb2RHVnRjR3hoZEdVcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvSVcxaGRHTm9LU0JpY21WaGF6dGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2EyVjVJRDBnYldGMFkyaGJNVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaG1kVzVqY3k1b1lYTlBkMjVRY205d1pYSjBlU2hyWlhrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCeVpYTjFiSFF1Y21Wd2JHRmpaU2h0WVhSamFGc3dYU3dnWm5WdVkzTmJhMlY1WFNocGRHVnRLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0I3SUdOdmJYQnBiR1ZVWlcxd2JHRjBaU0I5T3lJc0lpOHFLbHh1SUNvZ1VHRnljMlVnZEdsdFpTQnpkSEpwYm1jZ1lXNWtJSEJ5WlhObGJuUWdhWFFnYVc0Z2FHOTFjbk1nS0dWNExpQW5NVE02TXpBbklEMCtJREV6TGpVcFhHNGdLaUJBY0dGeVlXMGdleXB6ZEhKcGJtZDlJSFJwYldVZ0xTQjBhVzFsSUdsdUlHWnZjbTFoZENCc2FXdGxJQ2N4TXpvMU1DY3NJQ2N4TVRvd01DY3NJQ2N4TkNkY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEJoY25ObFZHbHRaU2gwYVcxbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUM5Y1hHUjdNU3d5ZlZ4Y09seGNaSHN5ZlM4dWRHVnpkQ2gwYVcxbEtTQS9YRzRnSUNBZ0lDQWdJSEJoY25ObFNXNTBLSFJwYldVdWMzQnNhWFFvSnpvbktWc3dYU2tnS3lCd1lYSnpaVWx1ZENoMGFXMWxMbk53YkdsMEtDYzZKeWxiTVYwcElDOGdOakFnT2x4dUlDQWdJQ0FnSUNCd1lYSnpaVWx1ZENoMGFXMWxLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIUnZWR2x0WlNoMllXeDFaU2tnZTF4dUlDQWdJQzh2SUZSUFJFODZJSFoyZGlCbWFYZ2diV1ZjYmlBZ0lDQnlaWFIxY200Z0tIWmhiSFZsSUR3Z01UQWdQeUFuTUNjZ09pQW5KeWtnS3lCTllYUm9MbVpzYjI5eUtIWmhiSFZsS1NBcklDaE5ZWFJvTG1ObGFXd29kbUZzZFdVcElENGdUV0YwYUM1bWJHOXZjaWgyWVd4MVpTa2dQeUFuT2pNd0p5QTZJQ2M2TURBbktUdGNibjBpWFgwPSJ9

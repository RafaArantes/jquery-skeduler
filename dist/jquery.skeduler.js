/**
 * jquery-skeduler - This is jQuery plugin which provider you simple scheduler with some items on OX and 24-hours timeline on OY.
 * @date Mon Jul 10 2017 12:08:05 GMT+1000 (Russia TZ 9 Standard Time)
 * @version v0.1.0-beta.0
 * @link 
 * @license ISC
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

// export type Task = {
//     id: number;
//     startTime: number;
//     duration: number;
//     column: number
// }

// export type Options = {
//     headers: string[];
//     tasks: Task[];
//     containerCssClass: string;
//     headerContainerCssClass: string;
//     schedulerContainerCssClass: string;
//     lineHeight: number;
//     borderWidth: number;
// }

/**
* Generate scheduler grid with task cards
* options:
* - headers: string[] - array of headers
* - tasks: Task[] - array of tasks
* - containerCssClass: string - css class of main container
* - headerContainerCssClass: string - css class of header container
* - schedulerContainerCssClass: string - css class of scheduler
* - lineHeight - height of one half-hour cell in grid
* - borderWidth - width of border of cell in grid
*/
$.fn.skeduler = function (options) {
    return this.each(function () {
        var $container = $(this);

        var skeduler = new _skeduler2['default']($container, options);
    });
};

$.skeduler = _skeduler2['default'];

},{"./skeduler":5}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

var _adapter = require('./adapter');

var _adapter2 = _interopRequireDefault(_adapter);

exports['default'] = _skeduler2['default'];
module.exports = exports['default'];

},{"./adapter":1,"./skeduler":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _template = require('../template');

var div = function div(cssClass) {
    return $('<div></div>').addClass(cssClass);
};

var getItemDivs = function getItemDivs(settings) {
    var $div = div(settings.itemsOptions.itemCardCssClass);
    var items = settings.itemsOptions.items;
    var template = (0, _template.compileTemplate)(settings.itemsOptions.itemCardTemplate, {
        time: function time(item) {
            return item.interval ? item.interval.start + ' to ' + item.interval.end : '';
        }
    });

    return items.map(function (item, index) {
        return $div.clone().data('index', index).html(template(item));
    });
};

var populateSkedulerItems = function populateSkedulerItems(settings) {
    var $skedulerItemsEl = $(settings.itemsOptions.containerSelector).empty().addClass(settings.itemsOptions.itemsCssClass);
    var $ownerDocument = $($skedulerItemsEl[0].ownerDocument);
    var $shifts = $('.' + settings.workingIntervalPlaceholderCssClass + ' > div');

    // TODO: Generate item's divs
    var $headerDiv = div().html('<h1 class="si-header">Items</h1>').appendTo($skedulerItemsEl);

    var $skedulerItemsContainerEl = div('si-container');
    var $items = getItemDivs(settings);
    $items.forEach(function (el) {
        $skedulerItemsContainerEl.append(el);
    });
    $skedulerItemsContainerEl.appendTo($skedulerItemsEl);

    var operation = null;

    var mouseUp = function mouseUp(event) {
        if (operation == null) return;

        var _operation = operation;
        var $movingCard = _operation.$movingCard;
        var $card = _operation.$card;

        var $siEl = $('.' + settings.itemsOptions.highlightItemCss + ':visible'); // fixme

        if ($siEl.length !== 0 && $siEl.data('match') == 1) {
            $movingCard.detach().css({ top: $siEl[0].offsetTop, left: 0 }).height($siEl[0].clientHeight).width('auto').removeClass(settings.itemsOptions.itemCardCssClass + '-moving').addClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($siEl.parent());

            $movingCard.on('mousedown', mouseDownOnCard);
        } else {
            $movingCard.remove();
            $card.show();
        }

        $('.' + settings.itemsOptions.highlightItemCss).hide();

        operation = null;
        $ownerDocument.off('mousemove', mouseMove);
        $ownerDocument.off('mouseup', mouseUp);
    };

    var mouseMove = function mouseMove(event) {
        if (operation == null) return;

        var _operation2 = operation;
        var $movingCard = _operation2.$movingCard;
        var offsetX = _operation2.offsetX;
        var offsetY = _operation2.offsetY;

        var newOffsetX = event.pageX - offsetX,
            newOffsetY = event.pageY - offsetY;

        $movingCard.css({
            top: newOffsetY + 'px',
            left: newOffsetX + 'px'
        });

        // Higlight shifts
        var _window = $ownerDocument[0].defaultView;
        var x = event.pageX;
        var y = event.pageY - _window.scrollY;

        var rowHeight = settings.lineHeight + 1;
        var rowsPerHour = settings.rowsPerHour;

        var index = parseInt($movingCard.data('index'));
        var item = settings.itemsOptions.items[index];
        var duration = item.duration;
        var height = duration * (rowHeight * rowsPerHour / 60);

        $shifts.each(function () {
            var $this = $(this);
            var elementBounding = this.getBoundingClientRect();
            var $el = $this.find('.' + settings.itemsOptions.highlightItemCss);

            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {

                var offsetTop = y - elementBounding.top;
                var rowCount = Math.floor(offsetTop / rowHeight) - 1;
                var startInMinutes = 60 / settings.rowsPerHour * rowCount; // <<== FIXME

                var interval = settings.data[$this.data('column')].workingTimeIntervals[$this.data('item-index')];
                var matchResult = settings.itemsOptions.matchFunc(item, interval, offsetInMinutes);

                var _top = Math.min(Math.max(0, rowCount * rowHeight), this.clientHeight - height);

                $el.css({ top: _top }).css('background-color', matchResult.color).height(height).show();

                $el.data('match', +matchResult.match);
            } else {
                $el.data('match', 0);
                $el.hide();
            }
        });
    };

    var mouseDownOnCard = function mouseDownOnCard(event /*: MouseEvent */) {
        if (event.which !== 1) {
            return;
        }

        var $skedulerWrapper = $('.' + settings.skedulerWrapperCssClass);
        var $card = $(event.currentTarget);

        var $movingCard = $card.clone().data('index', $card.data('index')).addClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').width($card.width()).appendTo($skedulerWrapper);

        //var bounce = $card[0].getBoundingClientRect();
        // fixme ^^^
        var offsetX = event.pageX - event.offsetX,
            offsetY = event.pageY - event.offsetY;

        $movingCard.css({
            top: offsetY + 'px',
            left: offsetX + 'px'
        });

        operation = {
            $card: $card, $movingCard: $movingCard,
            offsetX: event.offsetX, offsetY: event.offsetY
        };

        $card.hide();

        $ownerDocument.on('mousemove', mouseMove);
        $ownerDocument.on('mouseup', mouseUp);

        event.preventDefault();
    };

    $skedulerItemsEl.find('.' + settings.itemsOptions.itemCardCssClass).on('mousedown', mouseDownOnCard);
};

exports['default'] = populateSkedulerItems;
module.exports = exports['default'];

},{"../template":6}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var defaultSettings = {
    // Data attributes
    headers: null, // String[] - Array of column headers
    tasks: [], // Task[] - Array of tasks. Required fields:
    // id: number, startTime: number, duration: number, column: number

    // Card template - Inner content of task card.
    // You're able to use ${key} inside template, where key is any property from task.
    cardTemplate: '<div>${id}</div>',

    // OnClick event handler
    onClick: function onClick(e, task) {},

    // Css classes
    skedulerWrapperCssClass: 'skeduler-wrapper',
    containerCssClass: 'skeduler-container',
    headerContainerCssClass: 'skeduler-headers',
    schedulerContainerCssClass: 'skeduler-main',
    taskPlaceholderCssClass: 'skeduler-task-placeholder',
    workingIntervalPlaceholderCssClass: 'skeduler-interval-placeholder',
    cellCssClass: 'skeduler-cell',
    resizableHandlerCssClass: 'resizable-handler',
    resizableSliderCssClass: 'resizable-slider',

    lineHeight: 30, // height of one line in grid
    borderWidth: 1, // width of board of grid cell
    columnWidth: 200,
    minColumnWidth: 100,

    rowsPerHour: 2, // count of rows for one hour

    columnResizeEnabled: true, // is columns resizable

    debug: true,

    itemsOptions: {
        enabled: false,
        itemsCssClass: 'skeduler-items',
        highlightItemCss: 'si-highlight-item',
        containerSelector: "#skeduler-items",
        itemCardCssClass: 'si-card',
        itemCardTemplate: '',
        items: [],
        matchFunc: function matchFunc() {
            return { match: true };
        }
    }
};

exports.defaultSettings = defaultSettings;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _settings = require('./settings');

var _items = require('./items');

var _items2 = _interopRequireDefault(_items);

var _template = require('./template');

var Skeduler = (function () {
    function Skeduler($container, options) {
        _classCallCheck(this, Skeduler);

        this.settings = $.extend(true, _settings.defaultSettings, options);
        this.$container = $container;
        this.$ownerDocument = $($container[0].ownerDocument);
        this.$headerContainer = null;
        this.$scheduleEl = null;
        this.operation = null;

        if (this.settings.debug) {
            console.time('skeduler');
        }

        this.populate();
        if (this.settings.itemsOptions.enabled) {
            (0, _items2['default'])(this.settings);
        }

        if (this.settings.debug) {
            console.timeEnd('skeduler');
        }
    }

    _createClass(Skeduler, [{
        key: 'populate',
        value: function populate() {
            var _this = this;

            this.$container.empty();
            this.$container.addClass(this.settings.containerCssClass);

            var headers = this.settings.headers ? this.settings.headers : this.settings.data.map(this.settings.getHeader);

            var div = $('<div></div>');

            // Add headers
            this.$headerContainer = div.clone().addClass(this.settings.headerContainerCssClass);
            headers.forEach(function (element) {
                div.clone().text(element).appendTo(_this.$headerContainer);
            }, this);
            this.$container.append(this.$headerContainer);

            // Add scheduler
            this.$scheduleEl = div.clone().addClass(this.settings.schedulerContainerCssClass);
            var scheduleTimelineEl = div.clone().addClass(this.settings.schedulerContainerCssClass + '-timeline');
            var scheduleBodyEl = div.clone().addClass(this.settings.schedulerContainerCssClass + '-body');

            var gridColumnElement = div.clone();

            for (var i = 0; i < 24; i++) {
                // Populate timeline
                for (var j = 0; j < this.settings.rowsPerHour; j++) {
                    var timelineCell = div.clone().height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "");

                    if (j == 0) {
                        timelineCell = timelineCell.css("line-height", this.settings.lineHeight + 'px').text(j == 0 ? this.toTimeString(i) : "");
                    }
                    timelineCell.appendTo(scheduleTimelineEl);

                    div.clone().addClass(this.settings.cellCssClass).height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "").appendTo(gridColumnElement);
                }
            }

            // Populate grid

            var _loop = function (j) {
                var el = gridColumnElement.clone();

                var tasksPlaceholder = div.clone().addClass(_this.settings.taskPlaceholderCssClass);
                _this.appendTasks(tasksPlaceholder, _this.settings.tasks.filter(function (t) {
                    return t.column == j;
                }));

                // fixme [workingTimeIntervals must not use index]
                var workingIntervalsPlaceholder = div.clone().addClass(_this.settings.workingIntervalPlaceholderCssClass);
                var intervals = _this.settings.data[j].workingTimeIntervals;
                _this.appendAvailableInterval(workingIntervalsPlaceholder, intervals, j);

                el.prepend(tasksPlaceholder);
                el.prepend(workingIntervalsPlaceholder);
                el.appendTo(scheduleBodyEl);

                _this.updateColumnWidth(j, _this.settings.columnWidth);
            };

            for (var j = 0; j < headers.length; j++) {
                _loop(j);
            }

            this.$scheduleEl.append(scheduleTimelineEl);
            this.$scheduleEl.append(scheduleBodyEl);

            this.$container.append(this.$scheduleEl);

            // Set default width for columns
            for (var j = 0; j < headers.length; j++) {
                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            // Configure resizing
            if (this.settings.columnResizeEnabled) {
                this.configureResizing();
            }
        }
    }, {
        key: 'configureResizing',
        value: function configureResizing() {
            var _this2 = this;

            var div = $('<div></div>');

            var skedulerElResizableHandler = div.clone().addClass(this.settings.resizableHandlerCssClass);

            this.$container.prepend(skedulerElResizableHandler);

            skedulerElResizableHandler.width(this.$container.width());

            var resizableSliderHeight = this.$scheduleEl.height() + this.$headerContainer.height();
            var index = 0;
            this.$headerContainer.find('div').each(function (_, el) {
                div.clone().addClass(_this2.settings.resizableSliderCssClass).css('left', el.offsetLeft + el.clientWidth).height(resizableSliderHeight).data('column-id', index++).appendTo(skedulerElResizableHandler);
            });

            skedulerElResizableHandler.on('mousedown', '.' + this.settings.resizableSliderCssClass, this.onPointerDown.bind(this));
        }

        /**
           * Convert double value of hours to zero-preposited string with 30 or 00 value of minutes
           */
    }, {
        key: 'toTimeString',
        value: function toTimeString(value) {
            return (value < 10 ? '0' : '') + Math.ceil(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');
        }

        /**
         * Return height of task card based on duration of the task
         * duration - in hours
         */
    }, {
        key: 'getCardHeight',
        value: function getCardHeight(duration) {
            var durationInMinutes = duration * 60;
            var heightOfMinute = (this.settings.lineHeight + this.settings.borderWidth) * this.settings.rowsPerHour / 60;
            return Math.ceil(durationInMinutes * heightOfMinute);
        }

        /**
         * Return top offset of task card based on start time of the task
         * startTime - in hours
         */
    }, {
        key: 'getCardTopPosition',
        value: function getCardTopPosition(startTime) {
            var startTimeInt = this.parseTime(startTime);
            return (this.settings.lineHeight + this.settings.borderWidth) * (startTimeInt * this.settings.rowsPerHour);
        }

        /**
         * Parse time string and present it in hours (ex. '13:30' => 13.5)
         * @param {*string} time - time in format like '13:50', '11:00', '14'
         */
    }, {
        key: 'parseTime',
        value: function parseTime(time) {
            return (/\d{2}\:\d{2}/.test(time) ? parseInt(time.split(':')[0]) + parseInt(time.split(':')[1]) / 60 : parseInt(time)
            );
        }

        /**
        * Render card template
        */
    }, {
        key: 'renderInnerCardContent',
        value: function renderInnerCardContent(task) {
            var template = this.settings.cardTemplate;
            var result = (0, _template.compileTemplate)(template)(task);

            return $(result);
        }

        /** 
         * Generate task cards
         */
    }, {
        key: 'appendTasks',
        value: function appendTasks(placeholder, tasks) {
            var _this3 = this;

            tasks.forEach(function (task) {
                var innerContent = _this3.renderInnerCardContent(task);
                var top = _this3.getCardTopPosition(task.startTime);
                var height = _this3.getCardHeight(task.duration);

                var card = $('<div></div>').attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px',
                    title: _this3.toTimeString(task.startTime) + ' - ' + _this3.toTimeString(task.startTime + task.duration)
                });
                card.on('click', function (e) {
                    _this3.settings.onClick && _this3.settings.onClick(e, task);
                });
                card.append(innerContent).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'appendAvailableInterval',
        value: function appendAvailableInterval(placeholder, intervals, column) {
            var _this4 = this;

            var div = $('<div></div>');
            intervals.forEach(function (interval, index) {
                var innerContent = div.clone().text('Not allocated');
                var top = _this4.getCardTopPosition(interval.start) + 2;
                var duration = _this4.parseTime(interval.end) - _this4.parseTime(interval.start);
                var height = _this4.getCardHeight(duration) - 5;

                var skItemHightlightDiv = div.clone().addClass('si-highlight-item').hide();

                var card = div.clone().attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px'
                });

                card.data('column', column).data('item-index', index).append(innerContent).append(skItemHightlightDiv).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'onPointerUp',
        value: function onPointerUp(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            this.$ownerDocument.off('mouseup');
            this.$ownerDocument.off('mousemove');

            this.operation = null;
        }
    }, {
        key: 'onPointerMove',
        value: function onPointerMove(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            // Determine the delta change between start and new mouse position, as a percentage of the table width
            var difference = event.pageX - op.startX; // / this.$scheduleEl.width() * 100;
            if (difference === 0) {
                return;
            }

            var columnNumber = op.columnNumber;
            var width = op.width + difference;
            this.updateColumnWidth(columnNumber, width.toFixed(2));
        }
    }, {
        key: 'onPointerDown',
        value: function onPointerDown(event) {
            // Only applies to left-click dragging
            if (event.which !== 1) {
                return;
            }

            // If a previous this.operation is defined, we missed the last mouseup.
            // Probably gobbled up by user mousing out the window then releasing.
            // We'll simulate a pointerup here prior to it
            if (this.operation) {
                this.onPointerUp(event);
            }

            var $currentGrip = $(event.currentTarget);
            var columnNumber = $currentGrip.data('column-id');

            var gripIndex = $currentGrip.index();
            var $leftColumn = this.$headerContainer.find('div').eq(gripIndex);

            var leftWidth = $leftColumn[0].clientWidth;

            this.operation = {
                columnNumber: columnNumber,
                startX: event.pageX,
                width: leftWidth
            };

            this.$ownerDocument.on('mousemove', this.onPointerMove.bind(this));
            this.$ownerDocument.on('mouseup', this.onPointerUp.bind(this));

            event.preventDefault();
        }
    }, {
        key: 'updateColumnWidth',
        value: function updateColumnWidth(columnNumber, width) {
            width = Math.max(width, this.settings.minColumnWidth);
            $('.' + this.settings.headerContainerCssClass + ' > div:eq(' + columnNumber + ')').css('flex-basis', width + 'px');

            var column = $('.' + this.settings.schedulerContainerCssClass + '-body > div:eq(' + columnNumber + ') > .' + this.settings.cellCssClass);
            var diff = column.width() - width;
            column.width(width);

            $('.' + this.settings.resizableHandlerCssClass + ' > div').each(function (index, el) {
                if (index >= columnNumber) {
                    var $el = $(el);
                    var left = parseInt($el.css('left').replace('px', ''));
                    $el.css('left', left - diff);
                }
            });
        }
    }]);

    return Skeduler;
})();

exports['default'] = Skeduler;
module.exports = exports['default'];

},{"./items":3,"./settings":4,"./template":6}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var compileTemplate = function compileTemplate(template, funcs) {
    return function (item) {
        var result = template;
        var regKeys = /\$\{(\w+)\}/g;
        var regFuncs = /\$\{(\w+)\(\)\}/g;

        var match = 1;
        while (true) {
            match = regKeys.exec(template);
            if (!match) break;

            var key = match[1];
            if (item.hasOwnProperty(key)) {
                result = result.replace(match[0], item[key]);
            }
        }

        while (funcs) {
            match = regFuncs.exec(template);
            if (!match) break;

            var key = match[1];
            if (funcs.hasOwnProperty(key)) {
                result = result.replace(match[0], funcs[key](item));
            }
        }

        return result;
    };
};

exports["default"] = { compileTemplate: compileTemplate };
module.exports = exports["default"];

},{}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYWRhcHRlci5qcyIsInNyYy9pbmRleC5qcyIsInNyYy9pdGVtcy9pbmRleC5qcyIsInNyYy9zZXR0aW5ncy5qcyIsInNyYy9za2VkdWxlci5qcyIsInNyYy90ZW1wbGF0ZS9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7d0JDQXFCLFlBQVk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOEJqQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxVQUFVLE9BQU8sRUFBRTtBQUMvQixXQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWTtBQUN6QixZQUFJLFVBQVUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRXpCLFlBQUksUUFBUSxHQUFHLDBCQUFhLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNwRCxDQUFDLENBQUM7Q0FDTixDQUFDOztBQUVGLENBQUMsQ0FBQyxRQUFRLHdCQUFXLENBQUM7Ozs7Ozs7Ozs7O3dCQ3RDRCxZQUFZOzs7O3VCQUNiLFdBQVc7Ozs7Ozs7Ozs7Ozs7O3dCQ0RDLGFBQWE7O0FBRTdDLElBQU0sR0FBRyxHQUFHLFNBQU4sR0FBRyxDQUFJLFFBQVE7V0FBSyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztDQUFBLENBQUM7O0FBRTlELElBQU0sV0FBVyxHQUFHLFNBQWQsV0FBVyxDQUFJLFFBQVEsRUFBSztBQUM5QixRQUFNLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3pELFFBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO0FBQzFDLFFBQU0sUUFBUSxHQUFHLCtCQUFnQixRQUFRLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFO0FBQ3JFLFlBQUksRUFB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QyxZQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDZCxlQUFPLElBQUksRUFBRTtBQUNULGlCQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixnQkFBSSxDQUFDLEtBQUssRUFBRSxNQUFNOztBQUVsQixnQkFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLGdCQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDMUIsc0JBQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNoRDtTQUNKOztBQUVELGVBQU8sS0FBSyxFQUFFO0FBQ1YsaUJBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLGdCQUFJLENBQUMsS0FBSyxFQUFFLE1BQU07O0FBRWxCLGdCQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkIsZ0JBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUMzQixzQkFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ3ZEO1NBQ0o7O0FBRUQsZUFBTyxNQUFNLENBQUM7S0FDakI7Q0FBQSxDQUFBOztxQkFFYyxFQUFFLGVBQWUsRUFBZixlQUFlLEVBQUUiLCJmaWxlIjoianF1ZXJ5LnNrZWR1bGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgU2tlZHVsZXIgZnJvbSAnLi9za2VkdWxlcic7XHJcblxyXG4vLyBleHBvcnQgdHlwZSBUYXNrID0ge1xyXG4vLyAgICAgaWQ6IG51bWJlcjtcclxuLy8gICAgIHN0YXJ0VGltZTogbnVtYmVyO1xyXG4vLyAgICAgZHVyYXRpb246IG51bWJlcjtcclxuLy8gICAgIGNvbHVtbjogbnVtYmVyXHJcbi8vIH1cclxuXHJcbi8vIGV4cG9ydCB0eXBlIE9wdGlvbnMgPSB7XHJcbi8vICAgICBoZWFkZXJzOiBzdHJpbmdbXTtcclxuLy8gICAgIHRhc2tzOiBUYXNrW107XHJcbi8vICAgICBjb250YWluZXJDc3NDbGFzczogc3RyaW5nO1xyXG4vLyAgICAgaGVhZGVyQ29udGFpbmVyQ3NzQ2xhc3M6IHN0cmluZztcclxuLy8gICAgIHNjaGVkdWxlckNvbnRhaW5lckNzc0NsYXNzOiBzdHJpbmc7XHJcbi8vICAgICBsaW5lSGVpZ2h0OiBudW1iZXI7XHJcbi8vICAgICBib3JkZXJXaWR0aDogbnVtYmVyO1xyXG4vLyB9XHJcblxyXG4vKipcclxuKiBHZW5lcmF0ZSBzY2hlZHVsZXIgZ3JpZCB3aXRoIHRhc2sgY2FyZHNcclxuKiBvcHRpb25zOlxyXG4qIC0gaGVhZGVyczogc3RyaW5nW10gLSBhcnJheSBvZiBoZWFkZXJzXHJcbiogLSB0YXNrczogVGFza1tdIC0gYXJyYXkgb2YgdGFza3NcclxuKiAtIGNvbnRhaW5lckNzc0NsYXNzOiBzdHJpbmcgLSBjc3MgY2xhc3Mgb2YgbWFpbiBjb250YWluZXJcclxuKiAtIGhlYWRlckNvbnRhaW5lckNzc0NsYXNzOiBzdHJpbmcgLSBjc3MgY2xhc3Mgb2YgaGVhZGVyIGNvbnRhaW5lclxyXG4qIC0gc2NoZWR1bGVyQ29udGFpbmVyQ3NzQ2xhc3M6IHN0cmluZyAtIGNzcyBjbGFzcyBvZiBzY2hlZHVsZXJcclxuKiAtIGxpbmVIZWlnaHQgLSBoZWlnaHQgb2Ygb25lIGhhbGYtaG91ciBjZWxsIGluIGdyaWRcclxuKiAtIGJvcmRlcldpZHRoIC0gd2lkdGggb2YgYm9yZGVyIG9mIGNlbGwgaW4gZ3JpZFxyXG4qL1xyXG4kLmZuLnNrZWR1bGVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCAkY29udGFpbmVyID0gJCh0aGlzKTtcclxuIFxyXG4gICAgICAgIHZhciBza2VkdWxlciA9IG5ldyBTa2VkdWxlcigkY29udGFpbmVyLCBvcHRpb25zKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuJC5za2VkdWxlciA9IFNrZWR1bGVyO1xyXG4iLCJpbXBvcnQgU2tlZHVsZXIgZnJvbSAnLi9za2VkdWxlcic7XHJcbmltcG9ydCBhZGFwdGVyIGZyb20gJy4vYWRhcHRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTa2VkdWxlcjsiLCJpbXBvcnQgeyBjb21waWxlVGVtcGxhdGUgfSBmcm9tICcuLi90ZW1wbGF0ZSc7XHJcblxyXG5jb25zdCBkaXYgPSAoY3NzQ2xhc3MpID0+ICQoJzxkaXY+PC9kaXY+JykuYWRkQ2xhc3MoY3NzQ2xhc3MpO1xyXG5cclxuY29uc3QgZ2V0SXRlbURpdnMgPSAoc2V0dGluZ3MpID0+IHtcclxuICAgIGNvbnN0ICRkaXYgPSBkaXYoc2V0dGluZ3MuaXRlbXNPcHRpb25zLml0ZW1DYXJkQ3NzQ2xhc3MpO1xyXG4gICAgY29uc3QgaXRlbXMgPSBzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbXM7XHJcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGNvbXBpbGVUZW1wbGF0ZShzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbUNhcmRUZW1wbGF0ZSwge1xyXG4gICAgICAgIHRpbWU6IChpdGVtKSA9PiBpdGVtLmludGVydmFsID8gYCR7aXRlbS5pbnRlcnZhbC5zdGFydH0gdG8gJHtpdGVtLmludGVydmFsLmVuZH1gIDogJydcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBpdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiAkZGl2LmNsb25lKClcclxuICAgICAgICAuZGF0YSgnaW5kZXgnLCBpbmRleClcclxuICAgICAgICAuaHRtbCh0ZW1wbGF0ZShpdGVtKSlcclxuICAgICk7XHJcbn1cclxuXHJcbmNvbnN0IHBvcHVsYXRlU2tlZHVsZXJJdGVtcyA9IChzZXR0aW5ncykgPT4ge1xyXG4gICAgY29uc3QgJHNrZWR1bGVySXRlbXNFbCA9ICQoc2V0dGluZ3MuaXRlbXNPcHRpb25zLmNvbnRhaW5lclNlbGVjdG9yKVxyXG4gICAgICAgIC5lbXB0eSgpXHJcbiAgICAgICAgLmFkZENsYXNzKHNldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtc0Nzc0NsYXNzKTtcclxuICAgIGNvbnN0ICRvd25lckRvY3VtZW50ID0gJCgkc2tlZHVsZXJJdGVtc0VsWzBdLm93bmVyRG9jdW1lbnQpO1xyXG4gICAgY29uc3QgJHNoaWZ0cyA9ICQoJy4nICsgc2V0dGluZ3Mud29ya2luZ0ludGVydmFsUGxhY2Vob2xkZXJDc3NDbGFzcyArICcgPiBkaXYnKTtcclxuXHJcbiAgICAvLyBUT0RPOiBHZW5lcmF0ZSBpdGVtJ3MgZGl2c1xyXG4gICAgY29uc3QgJGhlYWRlckRpdiA9IGRpdigpXHJcbiAgICAgICAgLmh0bWwoJzxoMSBjbGFzcz1cInNpLWhlYWRlclwiPkl0ZW1zPC9oMT4nKVxyXG4gICAgICAgIC5hcHBlbmRUbygkc2tlZHVsZXJJdGVtc0VsKTtcclxuXHJcbiAgICBjb25zdCAkc2tlZHVsZXJJdGVtc0NvbnRhaW5lckVsID0gZGl2KCdzaS1jb250YWluZXInKTtcclxuICAgIHZhciAkaXRlbXMgPSBnZXRJdGVtRGl2cyhzZXR0aW5ncyk7XHJcbiAgICAkaXRlbXMuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgJHNrZWR1bGVySXRlbXNDb250YWluZXJFbC5hcHBlbmQoZWwpO1xyXG4gICAgfSk7XHJcbiAgICAkc2tlZHVsZXJJdGVtc0NvbnRhaW5lckVsLmFwcGVuZFRvKCRza2VkdWxlckl0ZW1zRWwpO1xyXG5cclxuICAgIGxldCBvcGVyYXRpb24gPSBudWxsO1xyXG5cclxuICAgIGNvbnN0IG1vdXNlVXAgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAob3BlcmF0aW9uID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgeyAkbW92aW5nQ2FyZCwgJGNhcmQgfSA9IG9wZXJhdGlvbjtcclxuXHJcbiAgICAgICAgY29uc3QgJHNpRWwgPSAkKCcuJyArIHNldHRpbmdzLml0ZW1zT3B0aW9ucy5oaWdobGlnaHRJdGVtQ3NzICsgJzp2aXNpYmxlJyk7IC8vIGZpeG1lXHJcblxyXG4gICAgICAgIGlmICgkc2lFbC5sZW5ndGggIT09IDAgJiYgJHNpRWwuZGF0YSgnbWF0Y2gnKSA9PSAxKSB7XHJcbiAgICAgICAgICAgICRtb3ZpbmdDYXJkXHJcbiAgICAgICAgICAgICAgICAuZGV0YWNoKClcclxuICAgICAgICAgICAgICAgIC5jc3MoeyB0b3A6ICRzaUVsWzBdLm9mZnNldFRvcCwgbGVmdDogMCB9KVxyXG4gICAgICAgICAgICAgICAgLmhlaWdodCgkc2lFbFswXS5jbGllbnRIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAud2lkdGgoJ2F1dG8nKVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGAke3NldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtQ2FyZENzc0NsYXNzfS1tb3ZpbmdgKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3NldHRpbmdzLml0ZW1zT3B0aW9ucy5pdGVtQ2FyZENzc0NsYXNzfS1waW5uZWRgKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCRzaUVsLnBhcmVudCgpKTtcclxuXHJcbiAgICAgICAgICAgICRtb3ZpbmdDYXJkLm9uKCdtb3VzZWRvd24nLCBtb3VzZURvd25PbkNhcmQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICRtb3ZpbmdDYXJkLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAkY2FyZC5zaG93KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkKCcuJyArIHNldHRpbmdzLml0ZW1zT3B0aW9ucy5oaWdobGlnaHRJdGVtQ3NzKS5oaWRlKCk7XHJcblxyXG4gICAgICAgIG9wZXJhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgJG93bmVyRG9jdW1lbnQub2ZmKCdtb3VzZW1vdmUnLCBtb3VzZU1vdmUpO1xyXG4gICAgICAgICRvd25lckRvY3VtZW50Lm9mZignbW91c2V1cCcsIG1vdXNlVXApO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBtb3VzZU1vdmUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAob3BlcmF0aW9uID09IG51bGwpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgeyAkbW92aW5nQ2FyZCwgb2Zmc2V0WCwgb2Zmc2V0WSB9ID0gb3BlcmF0aW9uO1xyXG5cclxuICAgICAgICBjb25zdCBuZXdPZmZzZXRYID0gZXZlbnQucGFnZVggLSBvZmZzZXRYLFxyXG4gICAgICAgICAgICBuZXdPZmZzZXRZID0gZXZlbnQucGFnZVkgLSBvZmZzZXRZO1xyXG5cclxuICAgICAgICAkbW92aW5nQ2FyZC5jc3Moe1xyXG4gICAgICAgICAgICB0b3A6IG5ld09mZnNldFkgKyAncHgnLFxyXG4gICAgICAgICAgICBsZWZ0OiBuZXdPZmZzZXRYICsgJ3B4J1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBIaWdsaWdodCBzaGlmdHNcclxuICAgICAgICBjb25zdCBfd2luZG93ID0gJG93bmVyRG9jdW1lbnRbMF0uZGVmYXVsdFZpZXc7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LnBhZ2VYO1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5wYWdlWSAtIF93aW5kb3cuc2Nyb2xsWTtcclxuXHJcbiAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gc2V0dGluZ3MubGluZUhlaWdodCArIDE7XHJcbiAgICAgICAgY29uc3Qgcm93c1BlckhvdXIgPSBzZXR0aW5ncy5yb3dzUGVySG91cjtcclxuXHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludCgkbW92aW5nQ2FyZC5kYXRhKCdpbmRleCcpKTtcclxuICAgICAgICBjb25zdCBpdGVtID0gc2V0dGluZ3MuaXRlbXNPcHRpb25zLml0ZW1zW2luZGV4XTtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGl0ZW0uZHVyYXRpb247XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gZHVyYXRpb24gKiAocm93SGVpZ2h0ICogcm93c1BlckhvdXIgLyA2MCk7XHJcblxyXG4gICAgICAgICRzaGlmdHMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0ICR0aGlzID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudEJvdW5kaW5nID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgY29uc3QgJGVsID0gJHRoaXMuZmluZCgnLicgKyBzZXR0aW5ncy5pdGVtc09wdGlvbnMuaGlnaGxpZ2h0SXRlbUNzcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoeCA+IGVsZW1lbnRCb3VuZGluZy5sZWZ0ICYmIHggPCBlbGVtZW50Qm91bmRpbmcucmlnaHRcclxuICAgICAgICAgICAgICAgICYmIHkgPiBlbGVtZW50Qm91bmRpbmcudG9wICYmIHkgPCBlbGVtZW50Qm91bmRpbmcuYm90dG9tKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0VG9wID0geSAtIGVsZW1lbnRCb3VuZGluZy50b3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3dDb3VudCA9IChNYXRoLmZsb29yKG9mZnNldFRvcCAvIHJvd0hlaWdodCkgLSAxKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0SW5NaW51dGVzID0gNjAgLyBzZXR0aW5ncy5yb3dzUGVySG91ciAqIHJvd0NvdW50OyAvLyA8PD09IEZJWE1FIFxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGludGVydmFsID0gc2V0dGluZ3MuZGF0YVskdGhpcy5kYXRhKCdjb2x1bW4nKV0ud29ya2luZ1RpbWVJbnRlcnZhbHNbJHRoaXMuZGF0YSgnaXRlbS1pbmRleCcpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoUmVzdWx0ID0gc2V0dGluZ3MuaXRlbXNPcHRpb25zLm1hdGNoRnVuYyhpdGVtLCBpbnRlcnZhbCwgb2Zmc2V0SW5NaW51dGVzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b3AgPSBNYXRoLm1pbihcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLm1heCgwLCByb3dDb3VudCAqIHJvd0hlaWdodCksXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGllbnRIZWlnaHQgLSBoZWlnaHRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAkZWwuY3NzKHsgdG9wOiB0b3AgfSlcclxuICAgICAgICAgICAgICAgICAgICAuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgbWF0Y2hSZXN1bHQuY29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgLmhlaWdodChoZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRlbC5kYXRhKCdtYXRjaCcsICttYXRjaFJlc3VsdC5tYXRjaCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkZWwuZGF0YSgnbWF0Y2gnLCAwKTtcclxuICAgICAgICAgICAgICAgICRlbC5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgbW91c2VEb3duT25DYXJkID0gKGV2ZW50IC8qOiBNb3VzZUV2ZW50ICovKSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LndoaWNoICE9PSAxKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICBjb25zdCAkc2tlZHVsZXJXcmFwcGVyID0gJChgLiR7c2V0dGluZ3Muc2tlZHVsZXJXcmFwcGVyQ3NzQ2xhc3N9YCk7XHJcbiAgICAgICAgY29uc3QgJGNhcmQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpO1xyXG5cclxuICAgICAgICBjb25zdCAkbW92aW5nQ2FyZCA9XHJcbiAgICAgICAgICAgICRjYXJkLmNsb25lKClcclxuICAgICAgICAgICAgICAgIC5kYXRhKCdpbmRleCcsICRjYXJkLmRhdGEoJ2luZGV4JykpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7c2V0dGluZ3MuaXRlbXNPcHRpb25zLml0ZW1DYXJkQ3NzQ2xhc3N9LW1vdmluZ2ApXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoYCR7c2V0dGluZ3MuaXRlbXNPcHRpb25zLml0ZW1DYXJkQ3NzQ2xhc3N9LXBpbm5lZGApXHJcbiAgICAgICAgICAgICAgICAud2lkdGgoJGNhcmQud2lkdGgoKSlcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbygkc2tlZHVsZXJXcmFwcGVyKTtcclxuXHJcbiAgICAgICAgLy92YXIgYm91bmNlID0gJGNhcmRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgLy8gZml4bWUgXl5eXHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IGV2ZW50LnBhZ2VYIC0gZXZlbnQub2Zmc2V0WCxcclxuICAgICAgICAgICAgb2Zmc2V0WSA9IGV2ZW50LnBhZ2VZIC0gZXZlbnQub2Zmc2V0WTtcclxuXHJcbiAgICAgICAgJG1vdmluZ0NhcmQuY3NzKHtcclxuICAgICAgICAgICAgdG9wOiBvZmZzZXRZICsgJ3B4JyxcclxuICAgICAgICAgICAgbGVmdDogb2Zmc2V0WCArICdweCdcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgb3BlcmF0aW9uID0ge1xyXG4gICAgICAgICAgICAkY2FyZCwgJG1vdmluZ0NhcmQsXHJcbiAgICAgICAgICAgIG9mZnNldFg6IGV2ZW50Lm9mZnNldFgsIG9mZnNldFk6IGV2ZW50Lm9mZnNldFlcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkY2FyZC5oaWRlKCk7XHJcblxyXG4gICAgICAgICRvd25lckRvY3VtZW50Lm9uKCdtb3VzZW1vdmUnLCBtb3VzZU1vdmUpO1xyXG4gICAgICAgICRvd25lckRvY3VtZW50Lm9uKCdtb3VzZXVwJywgbW91c2VVcCk7XHJcblxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgICRza2VkdWxlckl0ZW1zRWwuZmluZCgnLicgKyBzZXR0aW5ncy5pdGVtc09wdGlvbnMuaXRlbUNhcmRDc3NDbGFzcykub24oJ21vdXNlZG93bicsIG1vdXNlRG93bk9uQ2FyZCk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBvcHVsYXRlU2tlZHVsZXJJdGVtczsiLCJjb25zdCBkZWZhdWx0U2V0dGluZ3MgPSB7XHJcbiAgICAvLyBEYXRhIGF0dHJpYnV0ZXNcclxuICAgIGhlYWRlcnM6IG51bGwsICAvLyBTdHJpbmdbXSAtIEFycmF5IG9mIGNvbHVtbiBoZWFkZXJzXHJcbiAgICB0YXNrczogW10sICAgIC8vIFRhc2tbXSAtIEFycmF5IG9mIHRhc2tzLiBSZXF1aXJlZCBmaWVsZHM6IFxyXG4gICAgLy8gaWQ6IG51bWJlciwgc3RhcnRUaW1lOiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIsIGNvbHVtbjogbnVtYmVyXHJcblxyXG4gICAgLy8gQ2FyZCB0ZW1wbGF0ZSAtIElubmVyIGNvbnRlbnQgb2YgdGFzayBjYXJkLiBcclxuICAgIC8vIFlvdSdyZSBhYmxlIHRvIHVzZSAke2tleX0gaW5zaWRlIHRlbXBsYXRlLCB3aGVyZSBrZXkgaXMgYW55IHByb3BlcnR5IGZyb20gdGFzay5cclxuICAgIGNhcmRUZW1wbGF0ZTogJzxkaXY+JHtpZH08L2Rpdj4nLFxyXG5cclxuICAgIC8vIE9uQ2xpY2sgZXZlbnQgaGFuZGxlclxyXG4gICAgb25DbGljazogZnVuY3Rpb24gKGUsIHRhc2spIHsgfSxcclxuXHJcbiAgICAvLyBDc3MgY2xhc3Nlc1xyXG4gICAgc2tlZHVsZXJXcmFwcGVyQ3NzQ2xhc3M6ICdza2VkdWxlci13cmFwcGVyJyxcclxuICAgIGNvbnRhaW5lckNzc0NsYXNzOiAnc2tlZHVsZXItY29udGFpbmVyJyxcclxuICAgIGhlYWRlckNvbnRhaW5lckNzc0NsYXNzOiAnc2tlZHVsZXItaGVhZGVycycsXHJcbiAgICBzY2hlZHVsZXJDb250YWluZXJDc3NDbGFzczogJ3NrZWR1bGVyLW1haW4nLFxyXG4gICAgdGFza1BsYWNlaG9sZGVyQ3NzQ2xhc3M6ICdza2VkdWxlci10YXNrLXBsYWNlaG9sZGVyJyxcclxuICAgIHdvcmtpbmdJbnRlcnZhbFBsYWNlaG9sZGVyQ3NzQ2xhc3M6ICdza2VkdWxlci1pbnRlcnZhbC1wbGFjZWhvbGRlcicsXHJcbiAgICBjZWxsQ3NzQ2xhc3M6ICdza2VkdWxlci1jZWxsJyxcclxuICAgIHJlc2l6YWJsZUhhbmRsZXJDc3NDbGFzczogJ3Jlc2l6YWJsZS1oYW5kbGVyJyxcclxuICAgIHJlc2l6YWJsZVNsaWRlckNzc0NsYXNzOiAncmVzaXphYmxlLXNsaWRlcicsXHJcblxyXG4gICAgbGluZUhlaWdodDogMzAsICAgICAgICAgLy8gaGVpZ2h0IG9mIG9uZSBsaW5lIGluIGdyaWRcclxuICAgIGJvcmRlcldpZHRoOiAxLCAgICAgICAgIC8vIHdpZHRoIG9mIGJvYXJkIG9mIGdyaWQgY2VsbFxyXG4gICAgY29sdW1uV2lkdGg6IDIwMCxcclxuICAgIG1pbkNvbHVtbldpZHRoOiAxMDAsXHJcblxyXG4gICAgcm93c1BlckhvdXI6IDIsICAgICAgICAgLy8gY291bnQgb2Ygcm93cyBmb3Igb25lIGhvdXJcclxuXHJcbiAgICBjb2x1bW5SZXNpemVFbmFibGVkOiB0cnVlLCAvLyBpcyBjb2x1bW5zIHJlc2l6YWJsZVxyXG5cclxuICAgIGRlYnVnOiB0cnVlLFxyXG5cclxuICAgIGl0ZW1zT3B0aW9uczoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxyXG4gICAgICAgIGl0ZW1zQ3NzQ2xhc3M6ICdza2VkdWxlci1pdGVtcycsXHJcbiAgICAgICAgaGlnaGxpZ2h0SXRlbUNzczogJ3NpLWhpZ2hsaWdodC1pdGVtJyxcclxuICAgICAgICBjb250YWluZXJTZWxlY3RvcjogXCIjc2tlZHVsZXItaXRlbXNcIixcclxuICAgICAgICBpdGVtQ2FyZENzc0NsYXNzOiAnc2ktY2FyZCcsXHJcbiAgICAgICAgaXRlbUNhcmRUZW1wbGF0ZTogJycsXHJcbiAgICAgICAgaXRlbXM6IFtdLFxyXG4gICAgICAgIG1hdGNoRnVuYzogKCkgPT4geyByZXR1cm4geyBtYXRjaDogdHJ1ZSB9IH1cclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IGRlZmF1bHRTZXR0aW5ncyB9OyIsImltcG9ydCB7IGRlZmF1bHRTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgcG9wdWxhdGVTa2VkdWxlckl0ZW1zIGZyb20gJy4vaXRlbXMnO1xyXG5pbXBvcnQgeyBjb21waWxlVGVtcGxhdGUgfSBmcm9tICcuL3RlbXBsYXRlJztcclxuXHJcbmNsYXNzIFNrZWR1bGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCRjb250YWluZXIsIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gJC5leHRlbmQodHJ1ZSwgZGVmYXVsdFNldHRpbmdzLCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLiRjb250YWluZXIgPSAkY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuJG93bmVyRG9jdW1lbnQgPSAkKCRjb250YWluZXJbMF0ub3duZXJEb2N1bWVudCk7XHJcbiAgICAgICAgdGhpcy4kaGVhZGVyQ29udGFpbmVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLiRzY2hlZHVsZUVsID0gbnVsbFxyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZGVidWcpIHtcclxuICAgICAgICAgICAgY29uc29sZS50aW1lKCdza2VkdWxlcicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wb3B1bGF0ZSgpO1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLml0ZW1zT3B0aW9ucy5lbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHBvcHVsYXRlU2tlZHVsZXJJdGVtcyh0aGlzLnNldHRpbmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlYnVnKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZCgnc2tlZHVsZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcG9wdWxhdGUoKSB7XHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKHRoaXMuc2V0dGluZ3MuY29udGFpbmVyQ3NzQ2xhc3MpO1xyXG5cclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gdGhpcy5zZXR0aW5ncy5oZWFkZXJzXHJcbiAgICAgICAgICAgID8gdGhpcy5zZXR0aW5ncy5oZWFkZXJzXHJcbiAgICAgICAgICAgIDogdGhpcy5zZXR0aW5ncy5kYXRhLm1hcCh0aGlzLnNldHRpbmdzLmdldEhlYWRlcik7XHJcblxyXG4gICAgICAgIGNvbnN0IGRpdiA9ICQoJzxkaXY+PC9kaXY+Jyk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBoZWFkZXJzXHJcbiAgICAgICAgdGhpcy4kaGVhZGVyQ29udGFpbmVyID0gZGl2LmNsb25lKCkuYWRkQ2xhc3ModGhpcy5zZXR0aW5ncy5oZWFkZXJDb250YWluZXJDc3NDbGFzcyk7XHJcbiAgICAgICAgaGVhZGVycy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGRpdi5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgICAudGV4dChlbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHRoaXMuJGhlYWRlckNvbnRhaW5lcik7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLmFwcGVuZCh0aGlzLiRoZWFkZXJDb250YWluZXIpO1xyXG5cclxuICAgICAgICAvLyBBZGQgc2NoZWR1bGVyXHJcbiAgICAgICAgdGhpcy4kc2NoZWR1bGVFbCA9IGRpdi5jbG9uZSgpLmFkZENsYXNzKHRoaXMuc2V0dGluZ3Muc2NoZWR1bGVyQ29udGFpbmVyQ3NzQ2xhc3MpO1xyXG4gICAgICAgIGNvbnN0IHNjaGVkdWxlVGltZWxpbmVFbCA9IGRpdi5jbG9uZSgpLmFkZENsYXNzKHRoaXMuc2V0dGluZ3Muc2NoZWR1bGVyQ29udGFpbmVyQ3NzQ2xhc3MgKyAnLXRpbWVsaW5lJyk7XHJcbiAgICAgICAgY29uc3Qgc2NoZWR1bGVCb2R5RWwgPSBkaXYuY2xvbmUoKS5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLnNjaGVkdWxlckNvbnRhaW5lckNzc0NsYXNzICsgJy1ib2R5Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGdyaWRDb2x1bW5FbGVtZW50ID0gZGl2LmNsb25lKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjQ7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBQb3B1bGF0ZSB0aW1lbGluZVxyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuc2V0dGluZ3Mucm93c1BlckhvdXI7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHRpbWVsaW5lQ2VsbCA9IGRpdi5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmhlaWdodCh0aGlzLnNldHRpbmdzLmxpbmVIZWlnaHQpXHJcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGogPT0gdGhpcy5zZXR0aW5ncy5yb3dzUGVySG91ciAtIDEgPyBcImxhc3RcIiA6IFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChqID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lbGluZUNlbGwgPSB0aW1lbGluZUNlbGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNzcyhcImxpbmUtaGVpZ2h0XCIsIHRoaXMuc2V0dGluZ3MubGluZUhlaWdodCArICdweCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGogPT0gMCA/IHRoaXMudG9UaW1lU3RyaW5nKGkpIDogXCJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aW1lbGluZUNlbGwuYXBwZW5kVG8oc2NoZWR1bGVUaW1lbGluZUVsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkaXYuY2xvbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLmNlbGxDc3NDbGFzcylcclxuICAgICAgICAgICAgICAgICAgICAuaGVpZ2h0KHRoaXMuc2V0dGluZ3MubGluZUhlaWdodClcclxuICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoaiA9PSB0aGlzLnNldHRpbmdzLnJvd3NQZXJIb3VyIC0gMSA/IFwibGFzdFwiIDogXCJcIilcclxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kVG8oZ3JpZENvbHVtbkVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBQb3B1bGF0ZSBncmlkXHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoZWFkZXJzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVsID0gZ3JpZENvbHVtbkVsZW1lbnQuY2xvbmUoKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhc2tzUGxhY2Vob2xkZXIgPSBkaXYuY2xvbmUoKS5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLnRhc2tQbGFjZWhvbGRlckNzc0NsYXNzKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBlbmRUYXNrcyh0YXNrc1BsYWNlaG9sZGVyLCB0aGlzLnNldHRpbmdzLnRhc2tzLmZpbHRlcih0ID0+IHQuY29sdW1uID09IGopKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpeG1lIFt3b3JraW5nVGltZUludGVydmFscyBtdXN0IG5vdCB1c2UgaW5kZXhdXHJcbiAgICAgICAgICAgIGNvbnN0IHdvcmtpbmdJbnRlcnZhbHNQbGFjZWhvbGRlciA9IGRpdi5jbG9uZSgpLmFkZENsYXNzKHRoaXMuc2V0dGluZ3Mud29ya2luZ0ludGVydmFsUGxhY2Vob2xkZXJDc3NDbGFzcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGludGVydmFscyA9IHRoaXMuc2V0dGluZ3MuZGF0YVtqXS53b3JraW5nVGltZUludGVydmFscztcclxuICAgICAgICAgICAgdGhpcy5hcHBlbmRBdmFpbGFibGVJbnRlcnZhbCh3b3JraW5nSW50ZXJ2YWxzUGxhY2Vob2xkZXIsIGludGVydmFscywgaik7XHJcblxyXG4gICAgICAgICAgICBlbC5wcmVwZW5kKHRhc2tzUGxhY2Vob2xkZXIpO1xyXG4gICAgICAgICAgICBlbC5wcmVwZW5kKHdvcmtpbmdJbnRlcnZhbHNQbGFjZWhvbGRlcik7XHJcbiAgICAgICAgICAgIGVsLmFwcGVuZFRvKHNjaGVkdWxlQm9keUVsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29sdW1uV2lkdGgoaiwgdGhpcy5zZXR0aW5ncy5jb2x1bW5XaWR0aCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiRzY2hlZHVsZUVsLmFwcGVuZChzY2hlZHVsZVRpbWVsaW5lRWwpO1xyXG4gICAgICAgIHRoaXMuJHNjaGVkdWxlRWwuYXBwZW5kKHNjaGVkdWxlQm9keUVsKTtcclxuXHJcbiAgICAgICAgdGhpcy4kY29udGFpbmVyLmFwcGVuZCh0aGlzLiRzY2hlZHVsZUVsKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IGRlZmF1bHQgd2lkdGggZm9yIGNvbHVtbnNcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhlYWRlcnMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb2x1bW5XaWR0aChqLCB0aGlzLnNldHRpbmdzLmNvbHVtbldpZHRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbmZpZ3VyZSByZXNpemluZ1xyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmNvbHVtblJlc2l6ZUVuYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWd1cmVSZXNpemluZygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25maWd1cmVSZXNpemluZygpIHtcclxuICAgICAgICBjb25zdCBkaXYgPSAkKCc8ZGl2PjwvZGl2PicpO1xyXG5cclxuICAgICAgICBjb25zdCBza2VkdWxlckVsUmVzaXphYmxlSGFuZGxlciA9IGRpdi5jbG9uZSgpXHJcbiAgICAgICAgICAgIC5hZGRDbGFzcyh0aGlzLnNldHRpbmdzLnJlc2l6YWJsZUhhbmRsZXJDc3NDbGFzcyk7XHJcblxyXG4gICAgICAgIHRoaXMuJGNvbnRhaW5lci5wcmVwZW5kKHNrZWR1bGVyRWxSZXNpemFibGVIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgc2tlZHVsZXJFbFJlc2l6YWJsZUhhbmRsZXIud2lkdGgodGhpcy4kY29udGFpbmVyLndpZHRoKCkpO1xyXG5cclxuICAgICAgICBjb25zdCByZXNpemFibGVTbGlkZXJIZWlnaHQgPSB0aGlzLiRzY2hlZHVsZUVsLmhlaWdodCgpICsgdGhpcy4kaGVhZGVyQ29udGFpbmVyLmhlaWdodCgpO1xyXG4gICAgICAgIGxldCBpbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy4kaGVhZGVyQ29udGFpbmVyLmZpbmQoJ2RpdicpLmVhY2goKF8sIGVsKSA9PiB7XHJcbiAgICAgICAgICAgIGRpdi5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3ModGhpcy5zZXR0aW5ncy5yZXNpemFibGVTbGlkZXJDc3NDbGFzcylcclxuICAgICAgICAgICAgICAgIC5jc3MoJ2xlZnQnLCBlbC5vZmZzZXRMZWZ0ICsgZWwuY2xpZW50V2lkdGgpXHJcbiAgICAgICAgICAgICAgICAuaGVpZ2h0KHJlc2l6YWJsZVNsaWRlckhlaWdodClcclxuICAgICAgICAgICAgICAgIC5kYXRhKCdjb2x1bW4taWQnLCBpbmRleCsrKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHNrZWR1bGVyRWxSZXNpemFibGVIYW5kbGVyKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBza2VkdWxlckVsUmVzaXphYmxlSGFuZGxlci5vbignbW91c2Vkb3duJywgJy4nICsgdGhpcy5zZXR0aW5ncy5yZXNpemFibGVTbGlkZXJDc3NDbGFzcywgdGhpcy5vblBvaW50ZXJEb3duLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0IGRvdWJsZSB2YWx1ZSBvZiBob3VycyB0byB6ZXJvLXByZXBvc2l0ZWQgc3RyaW5nIHdpdGggMzAgb3IgMDAgdmFsdWUgb2YgbWludXRlc1xyXG4gICAgICAgKi9cclxuICAgIHRvVGltZVN0cmluZyh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiAodmFsdWUgPCAxMCA/ICcwJyA6ICcnKSArIE1hdGguY2VpbCh2YWx1ZSkgKyAoTWF0aC5jZWlsKHZhbHVlKSA+IE1hdGguZmxvb3IodmFsdWUpID8gJzozMCcgOiAnOjAwJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gaGVpZ2h0IG9mIHRhc2sgY2FyZCBiYXNlZCBvbiBkdXJhdGlvbiBvZiB0aGUgdGFza1xyXG4gICAgICogZHVyYXRpb24gLSBpbiBob3Vyc1xyXG4gICAgICovXHJcbiAgICBnZXRDYXJkSGVpZ2h0KGR1cmF0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb25Jbk1pbnV0ZXMgPSBkdXJhdGlvbiAqIDYwO1xyXG4gICAgICAgIGNvbnN0IGhlaWdodE9mTWludXRlID0gKHRoaXMuc2V0dGluZ3MubGluZUhlaWdodCArIHRoaXMuc2V0dGluZ3MuYm9yZGVyV2lkdGgpICogdGhpcy5zZXR0aW5ncy5yb3dzUGVySG91ciAvIDYwO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwoZHVyYXRpb25Jbk1pbnV0ZXMgKiBoZWlnaHRPZk1pbnV0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gdG9wIG9mZnNldCBvZiB0YXNrIGNhcmQgYmFzZWQgb24gc3RhcnQgdGltZSBvZiB0aGUgdGFza1xyXG4gICAgICogc3RhcnRUaW1lIC0gaW4gaG91cnNcclxuICAgICAqL1xyXG4gICAgZ2V0Q2FyZFRvcFBvc2l0aW9uKHN0YXJ0VGltZSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZUludCA9IHRoaXMucGFyc2VUaW1lKHN0YXJ0VGltZSk7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnNldHRpbmdzLmxpbmVIZWlnaHQgKyB0aGlzLnNldHRpbmdzLmJvcmRlcldpZHRoKSAqIChzdGFydFRpbWVJbnQgKiB0aGlzLnNldHRpbmdzLnJvd3NQZXJIb3VyKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcnNlIHRpbWUgc3RyaW5nIGFuZCBwcmVzZW50IGl0IGluIGhvdXJzIChleC4gJzEzOjMwJyA9PiAxMy41KVxyXG4gICAgICogQHBhcmFtIHsqc3RyaW5nfSB0aW1lIC0gdGltZSBpbiBmb3JtYXQgbGlrZSAnMTM6NTAnLCAnMTE6MDAnLCAnMTQnXHJcbiAgICAgKi9cclxuICAgIHBhcnNlVGltZSh0aW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIC9cXGR7Mn1cXDpcXGR7Mn0vLnRlc3QodGltZSlcclxuICAgICAgICAgICAgPyBwYXJzZUludCh0aW1lLnNwbGl0KCc6JylbMF0pICsgcGFyc2VJbnQodGltZS5zcGxpdCgnOicpWzFdKSAvIDYwXHJcbiAgICAgICAgICAgIDogcGFyc2VJbnQodGltZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFJlbmRlciBjYXJkIHRlbXBsYXRlXHJcbiAgICAqL1xyXG4gICAgcmVuZGVySW5uZXJDYXJkQ29udGVudCh0YXNrKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLnNldHRpbmdzLmNhcmRUZW1wbGF0ZTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBjb21waWxlVGVtcGxhdGUodGVtcGxhdGUpKHRhc2spO1xyXG5cclxuICAgICAgICByZXR1cm4gJChyZXN1bHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBcclxuICAgICAqIEdlbmVyYXRlIHRhc2sgY2FyZHNcclxuICAgICAqL1xyXG4gICAgYXBwZW5kVGFza3MocGxhY2Vob2xkZXIsIHRhc2tzKSB7XHJcbiAgICAgICAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xyXG4gICAgICAgICAgICB2YXIgaW5uZXJDb250ZW50ID0gdGhpcy5yZW5kZXJJbm5lckNhcmRDb250ZW50KHRhc2spO1xyXG4gICAgICAgICAgICB2YXIgdG9wID0gdGhpcy5nZXRDYXJkVG9wUG9zaXRpb24odGFzay5zdGFydFRpbWUpO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5nZXRDYXJkSGVpZ2h0KHRhc2suZHVyYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNhcmQgPSAkKCc8ZGl2PjwvZGl2PicpXHJcbiAgICAgICAgICAgICAgICAuYXR0cih7XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICd0b3A6ICcgKyB0b3AgKyAncHg7IGhlaWdodDogJyArIGhlaWdodCArICdweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoaXMudG9UaW1lU3RyaW5nKHRhc2suc3RhcnRUaW1lKSArICcgLSAnICsgdGhpcy50b1RpbWVTdHJpbmcodGFzay5zdGFydFRpbWUgKyB0YXNrLmR1cmF0aW9uKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNhcmQub24oJ2NsaWNrJywgKGUpID0+IHsgdGhpcy5zZXR0aW5ncy5vbkNsaWNrICYmIHRoaXMuc2V0dGluZ3Mub25DbGljayhlLCB0YXNrKSB9KTtcclxuICAgICAgICAgICAgY2FyZC5hcHBlbmQoaW5uZXJDb250ZW50KVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHBsYWNlaG9sZGVyKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBhcHBlbmRBdmFpbGFibGVJbnRlcnZhbChwbGFjZWhvbGRlciwgaW50ZXJ2YWxzLCBjb2x1bW4pIHtcclxuICAgICAgICBjb25zdCBkaXYgPSAkKCc8ZGl2PjwvZGl2PicpO1xyXG4gICAgICAgIGludGVydmFscy5mb3JFYWNoKChpbnRlcnZhbCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5uZXJDb250ZW50ID0gZGl2LmNsb25lKCkudGV4dCgnTm90IGFsbG9jYXRlZCcpO1xyXG4gICAgICAgICAgICBjb25zdCB0b3AgPSB0aGlzLmdldENhcmRUb3BQb3NpdGlvbihpbnRlcnZhbC5zdGFydCkgKyAyO1xyXG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMucGFyc2VUaW1lKGludGVydmFsLmVuZCkgLSB0aGlzLnBhcnNlVGltZShpbnRlcnZhbC5zdGFydCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuZ2V0Q2FyZEhlaWdodChkdXJhdGlvbikgLSA1O1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2tJdGVtSGlnaHRsaWdodERpdiA9IGRpdi5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NpLWhpZ2hsaWdodC1pdGVtJylcclxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjYXJkID0gZGl2LmNsb25lKClcclxuICAgICAgICAgICAgICAgIC5hdHRyKHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZTogJ3RvcDogJyArIHRvcCArICdweDsgaGVpZ2h0OiAnICsgaGVpZ2h0ICsgJ3B4J1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjYXJkXHJcbiAgICAgICAgICAgICAgICAuZGF0YSgnY29sdW1uJywgY29sdW1uKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoJ2l0ZW0taW5kZXgnLCBpbmRleClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoaW5uZXJDb250ZW50KVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZChza0l0ZW1IaWdodGxpZ2h0RGl2KVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKHBsYWNlaG9sZGVyKTtcclxuXHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Qb2ludGVyVXAoZXZlbnQpIHtcclxuICAgICAgICBsZXQgb3AgPSB0aGlzLm9wZXJhdGlvbjtcclxuICAgICAgICBpZiAoIXRoaXMub3BlcmF0aW9uKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICB0aGlzLiRvd25lckRvY3VtZW50Lm9mZignbW91c2V1cCcpO1xyXG4gICAgICAgIHRoaXMuJG93bmVyRG9jdW1lbnQub2ZmKCdtb3VzZW1vdmUnKTtcclxuXHJcbiAgICAgICAgdGhpcy5vcGVyYXRpb24gPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUG9pbnRlck1vdmUoZXZlbnQpIHtcclxuICAgICAgICBsZXQgb3AgPSB0aGlzLm9wZXJhdGlvbjtcclxuICAgICAgICBpZiAoIXRoaXMub3BlcmF0aW9uKSB7IHJldHVybjsgfVxyXG5cclxuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGRlbHRhIGNoYW5nZSBiZXR3ZWVuIHN0YXJ0IGFuZCBuZXcgbW91c2UgcG9zaXRpb24sIGFzIGEgcGVyY2VudGFnZSBvZiB0aGUgdGFibGUgd2lkdGhcclxuICAgICAgICBsZXQgZGlmZmVyZW5jZSA9IChldmVudC5wYWdlWCAtIG9wLnN0YXJ0WCk7Ly8gLyB0aGlzLiRzY2hlZHVsZUVsLndpZHRoKCkgKiAxMDA7XHJcbiAgICAgICAgaWYgKGRpZmZlcmVuY2UgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGNvbHVtbk51bWJlciA9IG9wLmNvbHVtbk51bWJlcjtcclxuICAgICAgICBsZXQgd2lkdGggPSBvcC53aWR0aCArIGRpZmZlcmVuY2U7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDb2x1bW5XaWR0aChjb2x1bW5OdW1iZXIsIHdpZHRoLnRvRml4ZWQoMikpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUG9pbnRlckRvd24oZXZlbnQpIHtcclxuICAgICAgICAvLyBPbmx5IGFwcGxpZXMgdG8gbGVmdC1jbGljayBkcmFnZ2luZ1xyXG4gICAgICAgIGlmIChldmVudC53aGljaCAhPT0gMSkgeyByZXR1cm47IH1cclxuXHJcbiAgICAgICAgLy8gSWYgYSBwcmV2aW91cyB0aGlzLm9wZXJhdGlvbiBpcyBkZWZpbmVkLCB3ZSBtaXNzZWQgdGhlIGxhc3QgbW91c2V1cC5cclxuICAgICAgICAvLyBQcm9iYWJseSBnb2JibGVkIHVwIGJ5IHVzZXIgbW91c2luZyBvdXQgdGhlIHdpbmRvdyB0aGVuIHJlbGVhc2luZy5cclxuICAgICAgICAvLyBXZSdsbCBzaW11bGF0ZSBhIHBvaW50ZXJ1cCBoZXJlIHByaW9yIHRvIGl0XHJcbiAgICAgICAgaWYgKHRoaXMub3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Qb2ludGVyVXAoZXZlbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0ICRjdXJyZW50R3JpcCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgbGV0IGNvbHVtbk51bWJlciA9ICRjdXJyZW50R3JpcC5kYXRhKCdjb2x1bW4taWQnKTtcclxuXHJcbiAgICAgICAgbGV0IGdyaXBJbmRleCA9ICRjdXJyZW50R3JpcC5pbmRleCgpO1xyXG4gICAgICAgIGxldCAkbGVmdENvbHVtbiA9IHRoaXMuJGhlYWRlckNvbnRhaW5lci5maW5kKCdkaXYnKS5lcShncmlwSW5kZXgpO1xyXG5cclxuICAgICAgICBsZXQgbGVmdFdpZHRoID0gJGxlZnRDb2x1bW5bMF0uY2xpZW50V2lkdGg7XHJcblxyXG4gICAgICAgIHRoaXMub3BlcmF0aW9uID0ge1xyXG4gICAgICAgICAgICBjb2x1bW5OdW1iZXIsXHJcbiAgICAgICAgICAgIHN0YXJ0WDogZXZlbnQucGFnZVgsXHJcbiAgICAgICAgICAgIHdpZHRoOiBsZWZ0V2lkdGhcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLiRvd25lckRvY3VtZW50Lm9uKCdtb3VzZW1vdmUnLCB0aGlzLm9uUG9pbnRlck1vdmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy4kb3duZXJEb2N1bWVudC5vbignbW91c2V1cCcsIHRoaXMub25Qb2ludGVyVXAuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQ29sdW1uV2lkdGgoY29sdW1uTnVtYmVyLCB3aWR0aCkge1xyXG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIHRoaXMuc2V0dGluZ3MubWluQ29sdW1uV2lkdGgpO1xyXG4gICAgICAgICQoJy4nICsgdGhpcy5zZXR0aW5ncy5oZWFkZXJDb250YWluZXJDc3NDbGFzcyArICcgPiBkaXY6ZXEoJyArIGNvbHVtbk51bWJlciArICcpJylcclxuICAgICAgICAgICAgLmNzcygnZmxleC1iYXNpcycsIHdpZHRoICsgJ3B4Jyk7XHJcblxyXG4gICAgICAgIGxldCBjb2x1bW4gPSAkKCcuJyArIHRoaXMuc2V0dGluZ3Muc2NoZWR1bGVyQ29udGFpbmVyQ3NzQ2xhc3MgKyAnLWJvZHkgPiBkaXY6ZXEoJyArIGNvbHVtbk51bWJlciArICcpID4gLicgKyB0aGlzLnNldHRpbmdzLmNlbGxDc3NDbGFzcyk7XHJcbiAgICAgICAgdmFyIGRpZmYgPSBjb2x1bW4ud2lkdGgoKSAtIHdpZHRoO1xyXG4gICAgICAgIGNvbHVtbi53aWR0aCh3aWR0aCk7XHJcblxyXG4gICAgICAgICQoJy4nICsgdGhpcy5zZXR0aW5ncy5yZXNpemFibGVIYW5kbGVyQ3NzQ2xhc3MgKyAnID4gZGl2JykuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBjb2x1bW5OdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGxldCAkZWwgPSAkKGVsKTtcclxuICAgICAgICAgICAgICAgIGxldCBsZWZ0ID0gcGFyc2VJbnQoJGVsLmNzcygnbGVmdCcpLnJlcGxhY2UoJ3B4JywgJycpKTtcclxuICAgICAgICAgICAgICAgICRlbC5jc3MoJ2xlZnQnLCBsZWZ0IC0gZGlmZik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU2tlZHVsZXI7XHJcbiIsImNvbnN0IGNvbXBpbGVUZW1wbGF0ZSA9ICh0ZW1wbGF0ZSwgZnVuY3MpID0+IGl0ZW0gPT4ge1xyXG4gICAgbGV0IHJlc3VsdCA9IHRlbXBsYXRlO1xyXG4gICAgY29uc3QgcmVnS2V5cyA9IC9cXCRcXHsoXFx3KylcXH0vZztcclxuICAgIGNvbnN0IHJlZ0Z1bmNzID0gL1xcJFxceyhcXHcrKVxcKFxcKVxcfS9nO1xyXG5cclxuICAgIGxldCBtYXRjaCA9IDE7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIG1hdGNoID0gcmVnS2V5cy5leGVjKHRlbXBsYXRlKTtcclxuICAgICAgICBpZiAoIW1hdGNoKSBicmVhaztcclxuXHJcbiAgICAgICAgbGV0IGtleSA9IG1hdGNoWzFdO1xyXG4gICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobWF0Y2hbMF0sIGl0ZW1ba2V5XSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlIChmdW5jcykge1xyXG4gICAgICAgIG1hdGNoID0gcmVnRnVuY3MuZXhlYyh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgaWYgKCFtYXRjaCkgYnJlYWs7XHJcblxyXG4gICAgICAgIGxldCBrZXkgPSBtYXRjaFsxXTtcclxuICAgICAgICBpZiAoZnVuY3MuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShtYXRjaFswXSwgZnVuY3Nba2V5XShpdGVtKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHsgY29tcGlsZVRlbXBsYXRlIH07Il0sInByZUV4aXN0aW5nQ29tbWVudCI6Ii8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0OnV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltNXZaR1ZmYlc5a2RXeGxjeTlpY205M2MyVnlMWEJoWTJzdlgzQnlaV3gxWkdVdWFuTWlMQ0pET2k5VmMyVnljeTl0YVhOb1pXNXJhVzR2Y0hKdmFtVmpkSE12YW5GMVpYSjVMWE5yWldSMWJHVnlMM055WXk5aFpHRndkR1Z5TG1weklpd2lRem92VlhObGNuTXZiV2x6YUdWdWEybHVMM0J5YjJwbFkzUnpMMnB4ZFdWeWVTMXphMlZrZFd4bGNpOXpjbU12YVc1a1pYZ3Vhbk1pTENKRE9pOVZjMlZ5Y3k5dGFYTm9aVzVyYVc0dmNISnZhbVZqZEhNdmFuRjFaWEo1TFhOclpXUjFiR1Z5TDNOeVl5OXBkR1Z0Y3k5cGJtUmxlQzVxY3lJc0lrTTZMMVZ6WlhKekwyMXBjMmhsYm10cGJpOXdjbTlxWldOMGN5OXFjWFZsY25rdGMydGxaSFZzWlhJdmMzSmpMM05sZEhScGJtZHpMbXB6SWl3aVF6b3ZWWE5sY25NdmJXbHphR1Z1YTJsdUwzQnliMnBsWTNSekwycHhkV1Z5ZVMxemEyVmtkV3hsY2k5emNtTXZjMnRsWkhWc1pYSXVhbk1pTENKRE9pOVZjMlZ5Y3k5dGFYTm9aVzVyYVc0dmNISnZhbVZqZEhNdmFuRjFaWEo1TFhOclpXUjFiR1Z5TDNOeVl5OTBaVzF3YkdGMFpTOXBibVJsZUM1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHM3T3pzN2QwSkRRWEZDTEZsQlFWazdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk9FSnFReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlZMRTlCUVU4c1JVRkJSVHRCUVVNdlFpeFhRVUZQTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXVHRCUVVONlFpeFpRVUZKTEZWQlFWVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TzBGQlJYcENMRmxCUVVrc1VVRkJVU3hIUVVGSExEQkNRVUZoTEZWQlFWVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRMUVVOd1JDeERRVUZETEVOQlFVTTdRMEZEVGl4RFFVRkRPenRCUVVWR0xFTkJRVU1zUTBGQlF5eFJRVUZSTEhkQ1FVRlhMRU5CUVVNN096czdPenM3T3pzN08zZENRM1JEUkN4WlFVRlpPenM3TzNWQ1FVTmlMRmRCUVZjN096czdPenM3T3pzN096czdPM2RDUTBSRExHRkJRV0U3TzBGQlJUZERMRWxCUVUwc1IwRkJSeXhIUVVGSExGTkJRVTRzUjBGQlJ5eERRVUZKTEZGQlFWRTdWMEZCU3l4RFFVRkRMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXp0RFFVRkJMRU5CUVVNN08wRkJSVGxFTEVsQlFVMHNWMEZCVnl4SFFVRkhMRk5CUVdRc1YwRkJWeXhEUVVGSkxGRkJRVkVzUlVGQlN6dEJRVU01UWl4UlFVRk5MRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlEzcEVMRkZCUVUwc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRPMEZCUXpGRExGRkJRVTBzVVVGQlVTeEhRVUZITEN0Q1FVRm5RaXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEdkQ1FVRm5RaXhGUVVGRk8wRkJRM0pGTEZsQlFVa3NSVUZCUlN4alFVRkRMRWxCUVVrN2JVSkJRVXNzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCVFN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzV1VGQlR5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1IwRkJTeXhGUVVGRk8xTkJRVUU3UzBGRGVFWXNRMEZCUXl4RFFVRkRPenRCUVVWSUxGZEJRVThzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTE8yVkJRVXNzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVTjZReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVTndRaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUVVFc1EwRkRlRUlzUTBGQlF6dERRVU5NTEVOQlFVRTdPMEZCUlVRc1NVRkJUU3h4UWtGQmNVSXNSMEZCUnl4VFFVRjRRaXh4UWtGQmNVSXNRMEZCU1N4UlFVRlJMRVZCUVVzN1FVRkRlRU1zVVVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVU01UkN4TFFVRkxMRVZCUVVVc1EwRkRVQ3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRCUVVOdVJDeFJRVUZOTEdOQlFXTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRE5VUXNVVUZCVFN4UFFVRlBMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNhME5CUVd0RExFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTTdPenRCUVVkb1JpeFJRVUZOTEZWQlFWVXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkRia0lzU1VGQlNTeERRVUZETEd0RFFVRnJReXhEUVVGRExFTkJRM2hETEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZET3p0QlFVVm9ReXhSUVVGTkxIbENRVUY1UWl4SFFVRkhMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dEJRVU4wUkN4UlFVRkpMRTFCUVUwc1IwRkJSeXhYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdRVUZEYmtNc1ZVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVWQlFVVXNSVUZCU1R0QlFVTnFRaXhwUTBGQmVVSXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UzBGRGVFTXNRMEZCUXl4RFFVRkRPMEZCUTBnc05rSkJRWGxDTEVOQlFVTXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdPMEZCUlhKRUxGRkJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXpzN1FVRkZja0lzVVVGQlRTeFBRVUZQTEVkQlFVY3NVMEZCVml4UFFVRlBMRU5CUVVrc1MwRkJTeXhGUVVGTE8wRkJRM1pDTEZsQlFVa3NVMEZCVXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hQUVVGUE96dDVRa0ZGUXl4VFFVRlRPMWxCUVdoRExGZEJRVmNzWTBGQldDeFhRVUZYTzFsQlFVVXNTMEZCU3l4alFVRk1MRXRCUVVzN08wRkJSVEZDTEZsQlFVMHNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzVVVGQlVTeERRVUZETEZsQlFWa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eFZRVUZWTEVOQlFVTXNRMEZCUXpzN1FVRkZNMFVzV1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRCUVVOb1JDeDFRa0ZCVnl4RFFVTk9MRTFCUVUwc1JVRkJSU3hEUVVOU0xFZEJRVWNzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVONlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVU0zUWl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRMklzVjBGQlZ5eERRVUZKTEZGQlFWRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1owSkJRV2RDTEdGQlFWVXNRMEZETDBRc1VVRkJVU3hEUVVGSkxGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNaMEpCUVdkQ0xHRkJRVlVzUTBGRE5VUXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZET3p0QlFVVTVRaXgxUWtGQlZ5eERRVUZETEVWQlFVVXNRMEZCUXl4WFFVRlhMRVZCUVVVc1pVRkJaU3hEUVVGRExFTkJRVU03VTBGRGFFUXNUVUZCVFR0QlFVTklMSFZDUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTTdRVUZEY2tJc2FVSkJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0VFFVTm9RanM3UVVGRlJDeFRRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF6czdRVUZGZGtRc2FVSkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdRVUZEYWtJc2MwSkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkZMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRek5ETEhOQ1FVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0TFFVTXhReXhEUVVGRE96dEJRVVZHTEZGQlFVMHNVMEZCVXl4SFFVRkhMRk5CUVZvc1UwRkJVeXhEUVVGSkxFdEJRVXNzUlVGQlN6dEJRVU42UWl4WlFVRkpMRk5CUVZNc1NVRkJTU3hKUVVGSkxFVkJRVVVzVDBGQlR6czdNRUpCUlZrc1UwRkJVenRaUVVFelF5eFhRVUZYTEdWQlFWZ3NWMEZCVnp0WlFVRkZMRTlCUVU4c1pVRkJVQ3hQUVVGUE8xbEJRVVVzVDBGQlR5eGxRVUZRTEU5QlFVODdPMEZCUlhKRExGbEJRVTBzVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1QwRkJUenRaUVVOd1F5eFZRVUZWTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU03TzBGQlJYWkRMRzFDUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETzBGQlExb3NaVUZCUnl4RlFVRkZMRlZCUVZVc1IwRkJSeXhKUVVGSk8wRkJRM1JDTEdkQ1FVRkpMRVZCUVVVc1ZVRkJWU3hIUVVGSExFbEJRVWs3VTBGRE1VSXNRMEZCUXl4RFFVRkRPenM3UVVGSFNDeFpRVUZOTEU5QlFVOHNSMEZCUnl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zVjBGQlZ5eERRVUZETzBGQlF6bERMRmxCUVUwc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTTdRVUZEZEVJc1dVRkJUU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NSMEZCUnl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRE96dEJRVVY0UXl4WlFVRk5MRk5CUVZNc1IwRkJSeXhSUVVGUkxFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTXhReXhaUVVGTkxGZEJRVmNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNWMEZCVnl4RFFVRkRPenRCUVVWNlF5eFpRVUZOTEV0QlFVc3NSMEZCUnl4UlFVRlJMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTJ4RUxGbEJRVTBzU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEyaEVMRmxCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdRVUZETDBJc1dVRkJUU3hOUVVGTkxFZEJRVWNzVVVGQlVTeEpRVUZKTEZOQlFWTXNSMEZCUnl4WFFVRlhMRWRCUVVjc1JVRkJSU3hEUVVGQkxFRkJRVU1zUTBGQlF6czdRVUZGZWtRc1pVRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTzBGQlEzSkNMR2RDUVVGTkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRkRUlzWjBKQlFVMHNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRPMEZCUTNKRUxHZENRVUZOTEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdPMEZCUlhKRkxHZENRVUZKTEVOQlFVTXNSMEZCUnl4bFFVRmxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eGxRVUZsTEVOQlFVTXNTMEZCU3l4SlFVTnNSQ3hEUVVGRExFZEJRVWNzWlVGQlpTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1pVRkJaU3hEUVVGRExFMUJRVTBzUlVGQlJUczdRVUZGTVVRc2IwSkJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNSMEZCUnl4bFFVRmxMRU5CUVVNc1IwRkJSeXhEUVVGRE8wRkJRekZETEc5Q1FVRk5MRkZCUVZFc1IwRkJTU3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFRkJRVU1zUTBGQlF6dEJRVU42UkN4dlFrRkJUU3hqUVVGakxFZEJRVWNzUlVGQlJTeEhRVUZITEZGQlFWRXNRMEZCUXl4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRE96dEJRVVUxUkN4dlFrRkJUU3hSUVVGUkxFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRM0JITEc5Q1FVRk5MRmRCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zV1VGQldTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hGUVVGRkxHVkJRV1VzUTBGQlF5eERRVUZET3p0QlFVVnlSaXh2UWtGQlRTeEpRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkRhRUlzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1VVRkJVU3hIUVVGSExGTkJRVk1zUTBGQlF5eEZRVU5xUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFMUJRVTBzUTBGRE4wSXNRMEZCUXpzN1FVRkhSaXh0UWtGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hKUVVGSExFVkJRVVVzUTBGQlF5eERRVU5vUWl4SFFVRkhMRU5CUVVNc2EwSkJRV3RDTEVWQlFVVXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVNeFF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUTJRc1NVRkJTU3hGUVVGRkxFTkJRVU03TzBGQlIxb3NiVUpCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8yRkJRM3BETEUxQlFVMDdRVUZEU0N4dFFrRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRja0lzYlVKQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenRoUVVOa08xTkJRMG9zUTBGQlF5eERRVUZETzB0QlEwNHNRMEZCUXpzN1FVRkZSaXhSUVVGTkxHVkJRV1VzUjBGQlJ5eFRRVUZzUWl4bFFVRmxMRU5CUVVrc1MwRkJTeXh2UWtGQmRVSTdRVUZEYWtRc1dVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eExRVUZMTEVOQlFVTXNSVUZCUlR0QlFVRkZMRzFDUVVGUE8xTkJRVVU3TzBGQlJXeERMRmxCUVUwc1owSkJRV2RDTEVkQlFVY3NRMEZCUXl4UFFVRkxMRkZCUVZFc1EwRkJReXgxUWtGQmRVSXNRMEZCUnl4RFFVRkRPMEZCUTI1RkxGbEJRVTBzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03TzBGQlJYSkRMRmxCUVUwc1YwRkJWeXhIUVVOaUxFdEJRVXNzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZEVWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkRiRU1zVVVGQlVTeERRVUZKTEZGQlFWRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1owSkJRV2RDTEdGQlFWVXNRMEZETlVRc1YwRkJWeXhEUVVGSkxGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNaMEpCUVdkQ0xHRkJRVlVzUTBGREwwUXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eERRVU53UWl4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXpzN096dEJRVWx3UXl4WlFVRk5MRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBPMWxCUTNaRExFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU03TzBGQlJURkRMRzFDUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETzBGQlExb3NaVUZCUnl4RlFVRkZMRTlCUVU4c1IwRkJSeXhKUVVGSk8wRkJRMjVDTEdkQ1FVRkpMRVZCUVVVc1QwRkJUeXhIUVVGSExFbEJRVWs3VTBGRGRrSXNRMEZCUXl4RFFVRkRPenRCUVVWSUxHbENRVUZUTEVkQlFVYzdRVUZEVWl4cFFrRkJTeXhGUVVGTUxFdEJRVXNzUlVGQlJTeFhRVUZYTEVWQlFWZ3NWMEZCVnp0QlFVTnNRaXh0UWtGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eFBRVUZQTzFOQlEycEVMRU5CUVVNN08wRkJSVVlzWVVGQlN5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPenRCUVVWaUxITkNRVUZqTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmRCUVZjc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU14UXl4elFrRkJZeXhEUVVGRExFVkJRVVVzUTBGQlF5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN08wRkJSWFJETEdGQlFVc3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRenRMUVVNeFFpeERRVUZET3p0QlFVVkdMRzlDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExGbEJRVmtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eFhRVUZYTEVWQlFVVXNaVUZCWlN4RFFVRkRMRU5CUVVNN1EwRkRlRWNzUTBGQlFUczdjVUpCUldNc2NVSkJRWEZDT3pzN096czdPenM3UVVONlMzQkRMRWxCUVUwc1pVRkJaU3hIUVVGSE96dEJRVVZ3UWl4WFFVRlBMRVZCUVVVc1NVRkJTVHRCUVVOaUxGTkJRVXNzUlVGQlJTeEZRVUZGT3pzN096dEJRVXRVTEdkQ1FVRlpMRVZCUVVVc2EwSkJRV3RDT3pzN1FVRkhhRU1zVjBGQlR5eEZRVUZGTEdsQ1FVRlZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzUlVGQlJ6czdPMEZCUnk5Q0xESkNRVUYxUWl4RlFVRkZMR3RDUVVGclFqdEJRVU16UXl4eFFrRkJhVUlzUlVGQlJTeHZRa0ZCYjBJN1FVRkRka01zTWtKQlFYVkNMRVZCUVVVc2EwSkJRV3RDTzBGQlF6TkRMRGhDUVVFd1FpeEZRVUZGTEdWQlFXVTdRVUZETTBNc01rSkJRWFZDTEVWQlFVVXNNa0pCUVRKQ08wRkJRM0JFTEhORFFVRnJReXhGUVVGRkxDdENRVUVyUWp0QlFVTnVSU3huUWtGQldTeEZRVUZGTEdWQlFXVTdRVUZETjBJc05FSkJRWGRDTEVWQlFVVXNiVUpCUVcxQ08wRkJRemRETERKQ1FVRjFRaXhGUVVGRkxHdENRVUZyUWpzN1FVRkZNME1zWTBGQlZTeEZRVUZGTEVWQlFVVTdRVUZEWkN4bFFVRlhMRVZCUVVVc1EwRkJRenRCUVVOa0xHVkJRVmNzUlVGQlJTeEhRVUZITzBGQlEyaENMR3RDUVVGakxFVkJRVVVzUjBGQlJ6czdRVUZGYmtJc1pVRkJWeXhGUVVGRkxFTkJRVU03TzBGQlJXUXNkVUpCUVcxQ0xFVkJRVVVzU1VGQlNUczdRVUZGZWtJc1UwRkJTeXhGUVVGRkxFbEJRVWs3TzBGQlJWZ3NaMEpCUVZrc1JVRkJSVHRCUVVOV0xHVkJRVThzUlVGQlJTeExRVUZMTzBGQlEyUXNjVUpCUVdFc1JVRkJSU3huUWtGQlowSTdRVUZETDBJc2QwSkJRV2RDTEVWQlFVVXNiVUpCUVcxQ08wRkJRM0pETEhsQ1FVRnBRaXhGUVVGRkxHbENRVUZwUWp0QlFVTndReXgzUWtGQlowSXNSVUZCUlN4VFFVRlRPMEZCUXpOQ0xIZENRVUZuUWl4RlFVRkZMRVZCUVVVN1FVRkRjRUlzWVVGQlN5eEZRVUZGTEVWQlFVVTdRVUZEVkN4cFFrRkJVeXhGUVVGRkxIRkNRVUZOTzBGQlFVVXNiVUpCUVU4c1JVRkJSU3hMUVVGTExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVRTdVMEZCUlR0TFFVTTVRenREUVVOS0xFTkJRVU03TzFGQlJVOHNaVUZCWlN4SFFVRm1MR1ZCUVdVN096czdPenM3T3pzN096czdPenQzUWtNdlExRXNXVUZCV1RzN2NVSkJRMVlzVTBGQlV6czdPenQzUWtGRFdDeFpRVUZaT3p0SlFVVjBReXhSUVVGUk8wRkJRME1zWVVGRVZDeFJRVUZSTEVOQlEwVXNWVUZCVlN4RlFVRkZMRTlCUVU4c1JVRkJSVHM0UWtGRUwwSXNVVUZCVVRzN1FVRkZUaXhaUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3cyUWtGQmJVSXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRla1FzV1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkROMElzV1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUTNKRUxGbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU03UVVGRE4wSXNXVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVUU3UVVGRGRrSXNXVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU03TzBGQlJYUkNMRmxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZEY2tJc2JVSkJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1UwRkROVUk3TzBGQlJVUXNXVUZCU1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRMmhDTEZsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEzQkRMRzlEUVVGelFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1UwRkRlRU03TzBGQlJVUXNXVUZCU1N4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJUdEJRVU55UWl4dFFrRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0VFFVTXZRanRMUVVOS096dHBRa0Z5UWtNc1VVRkJVVHM3WlVGMVFrWXNiMEpCUVVjN096dEJRVU5RTEdkQ1FVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzBGQlEzaENMR2RDUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN08wRkJSVEZFTEdkQ1FVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNSMEZETDBJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFBRVUZQTEVkQlEzSkNMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZET3p0QlFVVjBSQ3huUWtGQlRTeEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE96czdRVUZITjBJc1owSkJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1EwRkJRenRCUVVOd1JpeHRRa0ZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGRExFOUJRVThzUlVGQlN6dEJRVU42UWl4dFFrRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVU5PTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkRZaXhSUVVGUkxFTkJRVU1zVFVGQlN5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE8yRkJRM2hETEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkRWQ3huUWtGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN096dEJRVWM1UXl4blFrRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEhRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zUTBGQlF6dEJRVU5zUml4blFrRkJUU3hyUWtGQmEwSXNSMEZCUnl4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc01FSkJRVEJDTEVkQlFVY3NWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkRlRWNzWjBKQlFVMHNZMEZCWXl4SFFVRkhMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXd3UWtGQk1FSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1EwRkJRenM3UVVGRmFFY3NaMEpCUVUwc2FVSkJRV2xDTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRE96dEJRVVYwUXl4cFFrRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUczdRVUZGZWtJc2NVSkJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOb1JDeDNRa0ZCU1N4WlFVRlpMRWRCUVVjc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVU42UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZEYUVNc1VVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1IwRkJSeXhEUVVGRExFZEJRVWNzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVWb1JTeDNRa0ZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRMUlzYjBOQlFWa3NSMEZCUnl4WlFVRlpMRU5CUTNSQ0xFZEJRVWNzUTBGQlF5eGhRVUZoTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlEyNUVMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdjVUpCUTJwRU8wRkJRMFFzWjBOQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXpzN1FVRkZNVU1zZFVKQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkRUaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkRjRU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRMmhETEZGQlFWRXNRMEZCUXl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVkQlFVY3NRMEZCUXl4SFFVRkhMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGRE1VUXNVVUZCVVN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdhVUpCUTNCRE8yRkJRMG83T3pzN2EwTkJSMUVzUTBGQlF6dEJRVU5PTEc5Q1FVRk5MRVZCUVVVc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenM3UVVGRmNrTXNiMEpCUVUwc1owSkJRV2RDTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZMTEZGQlFWRXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVUZETzBGQlEzSkdMSE5DUVVGTExGZEJRVmNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hOUVVGTExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVVFc1EwRkJRenN5UWtGQlNTeERRVUZETEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNN2FVSkJRVUVzUTBGQlF5eERRVUZETEVOQlFVTTdPenRCUVVkdVJpeHZRa0ZCVFN3eVFrRkJNa0lzUjBGQlJ5eEhRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVXNzVVVGQlVTeERRVUZETEd0RFFVRnJReXhEUVVGRExFTkJRVU03UVVGRE0wY3NiMEpCUVUwc1UwRkJVeXhIUVVGSExFMUJRVXNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXp0QlFVTTNSQ3h6UWtGQlN5eDFRa0ZCZFVJc1EwRkJReXd5UWtGQk1rSXNSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03TzBGQlJYaEZMR3RDUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03UVVGRE4wSXNhMEpCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc1EwRkJRenRCUVVONFF5eHJRa0ZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6czdRVUZGTlVJc2MwSkJRVXNzYVVKQlFXbENMRU5CUVVNc1EwRkJReXhGUVVGRkxFMUJRVXNzVVVGQlVTeERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPenM3UVVGbWVrUXNhVUpCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzNOQ1FVRm9ReXhEUVVGRE8yRkJaMEpVT3p0QlFVVkVMR2RDUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETzBGQlF6VkRMR2RDUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenM3UVVGRmVFTXNaMEpCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenM3TzBGQlIzcERMR2xDUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0QlFVTnlReXh2UWtGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8yRkJRM2hFT3pzN1FVRkhSQ3huUWtGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzBGQlEyNURMRzlDUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1EwRkJRenRoUVVNMVFqdFRRVU5LT3pzN1pVRkZaMElzTmtKQlFVYzdPenRCUVVOb1FpeG5Ra0ZCVFN4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZET3p0QlFVVTNRaXhuUWtGQlRTd3dRa0ZCTUVJc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlEzcERMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEhkQ1FVRjNRaXhEUVVGRExFTkJRVU03TzBGQlJYUkVMR2RDUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eERRVUZET3p0QlFVVndSQ3h6UTBGQk1FSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUVVVeFJDeG5Ra0ZCVFN4eFFrRkJjVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF6dEJRVU42Uml4blFrRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyUXNaMEpCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZWQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJTenRCUVVNNVF5eHRRa0ZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVOT0xGRkJRVkVzUTBGQlF5eFBRVUZMTEZGQlFWRXNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eERRVU12UXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hGUVVGRkxFVkJRVVVzUTBGQlF5eFZRVUZWTEVkQlFVY3NSVUZCUlN4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVNelF5eE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUTBGRE4wSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlF5eERRVU14UWl4UlFVRlJMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNRMEZCUVR0aFFVTTFReXhEUVVGRExFTkJRVU03TzBGQlJVZ3NjME5CUVRCQ0xFTkJRVU1zUlVGQlJTeERRVUZETEZkQlFWY3NSVUZCUlN4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eDFRa0ZCZFVJc1JVRkJSU3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRekZJT3pzN096czdPMlZCUzFjc2MwSkJRVU1zUzBGQlN5eEZRVUZGTzBGQlEyaENMRzFDUVVGUExFTkJRVU1zUzBGQlN5eEhRVUZITEVWQlFVVXNSMEZCUnl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGQkxFZEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRU3hCUVVGRExFTkJRVU03VTBGRE9VYzdPenM3T3pzN08yVkJUVmtzZFVKQlFVTXNVVUZCVVN4RlFVRkZPMEZCUTNCQ0xHZENRVUZOTEdsQ1FVRnBRaXhIUVVGSExGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdRVUZEZUVNc1owSkJRVTBzWTBGQll5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4WFFVRlhMRU5CUVVFc1IwRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZkQlFWY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1FVRkRMMGNzYlVKQlFVOHNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4alFVRmpMRU5CUVVNc1EwRkJRenRUUVVONFJEczdPenM3T3pzN1pVRk5hVUlzTkVKQlFVTXNVMEZCVXl4RlFVRkZPMEZCUXpGQ0xHZENRVUZOTEZsQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBGQlF5OURMRzFDUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVRXNTVUZCU3l4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVRXNRVUZCUXl4RFFVRkRPMU5CUXpsSE96czdPenM3T3p0bFFVMVJMRzFDUVVGRExFbEJRVWtzUlVGQlJUdEJRVU5hTEcxQ1FVRlBMR1ZCUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlF6RkNMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRWRCUTJoRkxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTTdZMEZCUXp0VFFVTjRRanM3T3pzN096dGxRVXR4UWl4blEwRkJReXhKUVVGSkxFVkJRVVU3UVVGRGVrSXNaMEpCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNXVUZCV1N4RFFVRkRPMEZCUXpWRExHZENRVUZOTEUxQlFVMHNSMEZCUnl3clFrRkJaMElzVVVGQlVTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSUzlETEcxQ1FVRlBMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFRRVU53UWpzN096czdPenRsUVV0VkxIRkNRVUZETEZkQlFWY3NSVUZCUlN4TFFVRkxMRVZCUVVVN096dEJRVU0xUWl4cFFrRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZETEVsQlFVa3NSVUZCU3p0QlFVTndRaXh2UWtGQlNTeFpRVUZaTEVkQlFVY3NUMEZCU3l4elFrRkJjMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTnlSQ3h2UWtGQlNTeEhRVUZITEVkQlFVY3NUMEZCU3l4clFrRkJhMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRiRVFzYjBKQlFVa3NUVUZCVFN4SFFVRkhMRTlCUVVzc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXpzN1FVRkZMME1zYjBKQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGRGRFSXNTVUZCU1N4RFFVRkRPMEZCUTBZc2VVSkJRVXNzUlVGQlJTeFBRVUZQTEVkQlFVY3NSMEZCUnl4SFFVRkhMR05CUVdNc1IwRkJSeXhOUVVGTkxFZEJRVWNzU1VGQlNUdEJRVU55UkN4NVFrRkJTeXhGUVVGRkxFOUJRVXNzV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhMUVVGTExFZEJRVWNzVDBGQlN5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzJsQ1FVTjJSeXhEUVVGRExFTkJRVU03UVVGRFVDeHZRa0ZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzVlVGQlF5eERRVUZETEVWQlFVczdRVUZCUlN3eVFrRkJTeXhSUVVGUkxFTkJRVU1zVDBGQlR5eEpRVUZKTEU5QlFVc3NVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdhVUpCUVVVc1EwRkJReXhEUVVGRE8wRkJRM0pHTEc5Q1FVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVU53UWl4UlFVRlJMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03WVVGRE9VSXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRUUVVOYU96czdaVUZGYzBJc2FVTkJRVU1zVjBGQlZ5eEZRVUZGTEZOQlFWTXNSVUZCUlN4TlFVRk5MRVZCUVVVN096dEJRVU53UkN4blFrRkJUU3hIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUXpkQ0xIRkNRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVNc1VVRkJVU3hGUVVGRkxFdEJRVXNzUlVGQlN6dEJRVU51UXl4dlFrRkJUU3haUVVGWkxFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dEJRVU4yUkN4dlFrRkJUU3hIUVVGSExFZEJRVWNzVDBGQlN5eHJRa0ZCYTBJc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMEZCUTNoRUxHOUNRVUZOTEZGQlFWRXNSMEZCUnl4UFFVRkxMRk5CUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NUMEZCU3l4VFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlF5OUZMRzlDUVVGTkxFMUJRVTBzUjBGQlJ5eFBRVUZMTEdGQlFXRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03TzBGQlJXaEVMRzlDUVVGTkxHMUNRVUZ0UWl4SFFVRkhMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGRGJFTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEVOQlF6ZENMRWxCUVVrc1JVRkJSU3hEUVVGRE96dEJRVVZhTEc5Q1FVRk5MRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlEyNUNMRWxCUVVrc1EwRkJRenRCUVVOR0xIbENRVUZMTEVWQlFVVXNUMEZCVHl4SFFVRkhMRWRCUVVjc1IwRkJSeXhqUVVGakxFZEJRVWNzVFVGQlRTeEhRVUZITEVsQlFVazdhVUpCUTNoRUxFTkJRVU1zUTBGQlF6czdRVUZGVUN4dlFrRkJTU3hEUVVORExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUTNSQ0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUTNwQ0xFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZEY0VJc1RVRkJUU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUXpOQ0xGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0aFFVVTVRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFOQlExbzdPenRsUVVWVkxIRkNRVUZETEV0QlFVc3NSVUZCUlR0QlFVTm1MR2RDUVVGSkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMEZCUTNoQ0xHZENRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSVHRCUVVGRkxIVkNRVUZQTzJGQlFVVTdPMEZCUldoRExHZENRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU51UXl4blFrRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN08wRkJSWEpETEdkQ1FVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dFRRVU42UWpzN08yVkJSVmtzZFVKQlFVTXNTMEZCU3l4RlFVRkZPMEZCUTJwQ0xHZENRVUZKTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8wRkJRM2hDTEdkQ1FVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJUdEJRVUZGTEhWQ1FVRlBPMkZCUVVVN096dEJRVWRvUXl4blFrRkJTU3hWUVVGVkxFZEJRVWtzUzBGQlN5eERRVUZETEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNc1RVRkJUU3hCUVVGRExFTkJRVU03UVVGRE0wTXNaMEpCUVVrc1ZVRkJWU3hMUVVGTExFTkJRVU1zUlVGQlJUdEJRVU5zUWl4MVFrRkJUenRoUVVOV096dEJRVVZFTEdkQ1FVRkpMRmxCUVZrc1IwRkJSeXhGUVVGRkxFTkJRVU1zV1VGQldTeERRVUZETzBGQlEyNURMR2RDUVVGSkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4SFFVRkhMRlZCUVZVc1EwRkJRenRCUVVOc1F5eG5Ra0ZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZsQlFWa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZETVVRN096dGxRVVZaTEhWQ1FVRkRMRXRCUVVzc1JVRkJSVHM3UVVGRmFrSXNaMEpCUVVrc1MwRkJTeXhEUVVGRExFdEJRVXNzUzBGQlN5eERRVUZETEVWQlFVVTdRVUZCUlN4MVFrRkJUenRoUVVGRk96czdPenRCUVV0c1F5eG5Ra0ZCU1N4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8wRkJRMmhDTEc5Q1FVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzJGQlF6TkNPenRCUVVWRUxHZENRVUZKTEZsQlFWa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzBGQlF6RkRMR2RDUVVGSkxGbEJRVmtzUjBGQlJ5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE96dEJRVVZzUkN4blFrRkJTU3hUUVVGVExFZEJRVWNzV1VGQldTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRPMEZCUTNKRExHZENRVUZKTEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXpzN1FVRkZiRVVzWjBKQlFVa3NVMEZCVXl4SFFVRkhMRmRCUVZjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFhRVUZYTEVOQlFVTTdPMEZCUlRORExHZENRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhPMEZCUTJJc05FSkJRVmtzUlVGQldpeFpRVUZaTzBGQlExb3NjMEpCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zUzBGQlN6dEJRVU51UWl4eFFrRkJTeXhGUVVGRkxGTkJRVk03WVVGRGJrSXNRMEZCUXpzN1FVRkZSaXhuUWtGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGJrVXNaMEpCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUlVGQlJTeERRVUZETEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRPenRCUVVVdlJDeHBRa0ZCU3l4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8xTkJRekZDT3pzN1pVRkZaMElzTWtKQlFVTXNXVUZCV1N4RlFVRkZMRXRCUVVzc1JVRkJSVHRCUVVOdVF5eHBRa0ZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03UVVGRGRFUXNZVUZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEhWQ1FVRjFRaXhIUVVGSExGbEJRVmtzUjBGQlJ5eFpRVUZaTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUXpkRkxFZEJRVWNzUTBGQlF5eFpRVUZaTEVWQlFVVXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGRE96dEJRVVZ5UXl4blFrRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExEQkNRVUV3UWl4SFFVRkhMR2xDUVVGcFFpeEhRVUZITEZsQlFWa3NSMEZCUnl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0QlFVTjZTU3huUWtGQlNTeEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVU5zUXl4clFrRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXpzN1FVRkZjRUlzWVVGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExIZENRVUYzUWl4SFFVRkhMRkZCUVZFc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRVZCUVVzN1FVRkRNMFVzYjBKQlFVa3NTMEZCU3l4SlFVRkpMRmxCUVZrc1JVRkJSVHRCUVVOMlFpeDNRa0ZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlEyaENMSGRDUVVGSkxFbEJRVWtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGRrUXNkVUpCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJRenRwUWtGRGFFTTdZVUZEU2l4RFFVRkRMRU5CUVVNN1UwRkRUanM3TzFkQmRsTkRMRkZCUVZFN096dHhRa0V3VTBNc1VVRkJVVHM3T3pzN096czdPMEZET1ZOMlFpeEpRVUZOTEdWQlFXVXNSMEZCUnl4VFFVRnNRaXhsUVVGbExFTkJRVWtzVVVGQlVTeEZRVUZGTEV0QlFVczdWMEZCU3l4VlFVRkJMRWxCUVVrc1JVRkJTVHRCUVVOcVJDeFpRVUZKTEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNN1FVRkRkRUlzV1VGQlRTeFBRVUZQTEVkQlFVY3NZMEZCWXl4RFFVRkRPMEZCUXk5Q0xGbEJRVTBzVVVGQlVTeEhRVUZITEd0Q1FVRnJRaXhEUVVGRE96dEJRVVZ3UXl4WlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRFpDeGxRVUZQTEVsQlFVa3NSVUZCUlR0QlFVTlVMR2xDUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNdlFpeG5Ra0ZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSU3hOUVVGTk96dEJRVVZzUWl4blFrRkJTU3hIUVVGSExFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUTI1Q0xHZENRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3UVVGRE1VSXNjMEpCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTm9SRHRUUVVOS096dEJRVVZFTEdWQlFVOHNTMEZCU3l4RlFVRkZPMEZCUTFZc2FVSkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wRkJRMmhETEdkQ1FVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFMUJRVTA3TzBGQlJXeENMR2RDUVVGSkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRia0lzWjBKQlFVa3NTMEZCU3l4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdEJRVU16UWl4elFrRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRM1pFTzFOQlEwbzdPMEZCUlVRc1pVRkJUeXhOUVVGTkxFTkJRVU03UzBGRGFrSTdRMEZCUVN4RFFVRkJPenR4UWtGRll5eEZRVUZGTEdWQlFXVXNSVUZCWml4bFFVRmxMRVZCUVVVaUxDSm1hV3hsSWpvaVoyVnVaWEpoZEdWa0xtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaWhtZFc1amRHbHZiaUJsS0hRc2JpeHlLWHRtZFc1amRHbHZiaUJ6S0c4c2RTbDdhV1lvSVc1YmIxMHBlMmxtS0NGMFcyOWRLWHQyWVhJZ1lUMTBlWEJsYjJZZ2NtVnhkV2x5WlQwOVhDSm1kVzVqZEdsdmJsd2lKaVp5WlhGMWFYSmxPMmxtS0NGMUppWmhLWEpsZEhWeWJpQmhLRzhzSVRBcE8ybG1LR2twY21WMGRYSnVJR2tvYnl3aE1DazdkbUZ5SUdZOWJtVjNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHWnBibVFnYlc5a2RXeGxJQ2RjSWl0dksxd2lKMXdpS1R0MGFISnZkeUJtTG1OdlpHVTlYQ0pOVDBSVlRFVmZUazlVWDBaUFZVNUVYQ0lzWm4xMllYSWdiRDF1VzI5ZFBYdGxlSEJ2Y25Sek9udDlmVHQwVzI5ZFd6QmRMbU5oYkd3b2JDNWxlSEJ2Y25SekxHWjFibU4wYVc5dUtHVXBlM1poY2lCdVBYUmJiMTFiTVYxYlpWMDdjbVYwZFhKdUlITW9iajl1T21VcGZTeHNMR3d1Wlhod2IzSjBjeXhsTEhRc2JpeHlLWDF5WlhSMWNtNGdibHR2WFM1bGVIQnZjblJ6ZlhaaGNpQnBQWFI1Y0dWdlppQnlaWEYxYVhKbFBUMWNJbVoxYm1OMGFXOXVYQ0ltSm5KbGNYVnBjbVU3Wm05eUtIWmhjaUJ2UFRBN2J6eHlMbXhsYm1kMGFEdHZLeXNwY3loeVcyOWRLVHR5WlhSMWNtNGdjMzBwSWl3aWFXMXdiM0owSUZOclpXUjFiR1Z5SUdaeWIyMGdKeTR2YzJ0bFpIVnNaWEluTzF4eVhHNWNjbHh1THk4Z1pYaHdiM0owSUhSNWNHVWdWR0Z6YXlBOUlIdGNjbHh1THk4Z0lDQWdJR2xrT2lCdWRXMWlaWEk3WEhKY2JpOHZJQ0FnSUNCemRHRnlkRlJwYldVNklHNTFiV0psY2p0Y2NseHVMeThnSUNBZ0lHUjFjbUYwYVc5dU9pQnVkVzFpWlhJN1hISmNiaTh2SUNBZ0lDQmpiMngxYlc0NklHNTFiV0psY2x4eVhHNHZMeUI5WEhKY2JseHlYRzR2THlCbGVIQnZjblFnZEhsd1pTQlBjSFJwYjI1eklEMGdlMXh5WEc0dkx5QWdJQ0FnYUdWaFpHVnljem9nYzNSeWFXNW5XMTA3WEhKY2JpOHZJQ0FnSUNCMFlYTnJjem9nVkdGemExdGRPMXh5WEc0dkx5QWdJQ0FnWTI5dWRHRnBibVZ5UTNOelEyeGhjM002SUhOMGNtbHVaenRjY2x4dUx5OGdJQ0FnSUdobFlXUmxja052Ym5SaGFXNWxja056YzBOc1lYTnpPaUJ6ZEhKcGJtYzdYSEpjYmk4dklDQWdJQ0J6WTJobFpIVnNaWEpEYjI1MFlXbHVaWEpEYzNORGJHRnpjem9nYzNSeWFXNW5PMXh5WEc0dkx5QWdJQ0FnYkdsdVpVaGxhV2RvZERvZ2JuVnRZbVZ5TzF4eVhHNHZMeUFnSUNBZ1ltOXlaR1Z5VjJsa2RHZzZJRzUxYldKbGNqdGNjbHh1THk4Z2ZWeHlYRzVjY2x4dUx5b3FYSEpjYmlvZ1IyVnVaWEpoZEdVZ2MyTm9aV1IxYkdWeUlHZHlhV1FnZDJsMGFDQjBZWE5ySUdOaGNtUnpYSEpjYmlvZ2IzQjBhVzl1Y3pwY2NseHVLaUF0SUdobFlXUmxjbk02SUhOMGNtbHVaMXRkSUMwZ1lYSnlZWGtnYjJZZ2FHVmhaR1Z5YzF4eVhHNHFJQzBnZEdGemEzTTZJRlJoYzJ0YlhTQXRJR0Z5Y21GNUlHOW1JSFJoYzJ0elhISmNiaW9nTFNCamIyNTBZV2x1WlhKRGMzTkRiR0Z6Y3pvZ2MzUnlhVzVuSUMwZ1kzTnpJR05zWVhOeklHOW1JRzFoYVc0Z1kyOXVkR0ZwYm1WeVhISmNiaW9nTFNCb1pXRmtaWEpEYjI1MFlXbHVaWEpEYzNORGJHRnpjem9nYzNSeWFXNW5JQzBnWTNOeklHTnNZWE56SUc5bUlHaGxZV1JsY2lCamIyNTBZV2x1WlhKY2NseHVLaUF0SUhOamFHVmtkV3hsY2tOdmJuUmhhVzVsY2tOemMwTnNZWE56T2lCemRISnBibWNnTFNCamMzTWdZMnhoYzNNZ2IyWWdjMk5vWldSMWJHVnlYSEpjYmlvZ0xTQnNhVzVsU0dWcFoyaDBJQzBnYUdWcFoyaDBJRzltSUc5dVpTQm9ZV3htTFdodmRYSWdZMlZzYkNCcGJpQm5jbWxrWEhKY2Jpb2dMU0JpYjNKa1pYSlhhV1IwYUNBdElIZHBaSFJvSUc5bUlHSnZjbVJsY2lCdlppQmpaV3hzSUdsdUlHZHlhV1JjY2x4dUtpOWNjbHh1SkM1bWJpNXphMlZrZFd4bGNpQTlJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1bFlXTm9LR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnSkdOdmJuUmhhVzVsY2lBOUlDUW9kR2hwY3lrN1hISmNiaUJjY2x4dUlDQWdJQ0FnSUNCMllYSWdjMnRsWkhWc1pYSWdQU0J1WlhjZ1UydGxaSFZzWlhJb0pHTnZiblJoYVc1bGNpd2diM0IwYVc5dWN5azdYSEpjYmlBZ0lDQjlLVHRjY2x4dWZUdGNjbHh1WEhKY2JpUXVjMnRsWkhWc1pYSWdQU0JUYTJWa2RXeGxjanRjY2x4dUlpd2lhVzF3YjNKMElGTnJaV1IxYkdWeUlHWnliMjBnSnk0dmMydGxaSFZzWlhJbk8xeHlYRzVwYlhCdmNuUWdZV1JoY0hSbGNpQm1jbTl0SUNjdUwyRmtZWEIwWlhJbk8xeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnVTJ0bFpIVnNaWEk3SWl3aWFXMXdiM0owSUhzZ1kyOXRjR2xzWlZSbGJYQnNZWFJsSUgwZ1puSnZiU0FuTGk0dmRHVnRjR3hoZEdVbk8xeHlYRzVjY2x4dVkyOXVjM1FnWkdsMklEMGdLR056YzBOc1lYTnpLU0E5UGlBa0tDYzhaR2wyUGp3dlpHbDJQaWNwTG1Ga1pFTnNZWE56S0dOemMwTnNZWE56S1R0Y2NseHVYSEpjYm1OdmJuTjBJR2RsZEVsMFpXMUVhWFp6SUQwZ0tITmxkSFJwYm1kektTQTlQaUI3WEhKY2JpQWdJQ0JqYjI1emRDQWtaR2wySUQwZ1pHbDJLSE5sZEhScGJtZHpMbWwwWlcxelQzQjBhVzl1Y3k1cGRHVnRRMkZ5WkVOemMwTnNZWE56S1R0Y2NseHVJQ0FnSUdOdmJuTjBJR2wwWlcxeklEMGdjMlYwZEdsdVozTXVhWFJsYlhOUGNIUnBiMjV6TG1sMFpXMXpPMXh5WEc0Z0lDQWdZMjl1YzNRZ2RHVnRjR3hoZEdVZ1BTQmpiMjF3YVd4bFZHVnRjR3hoZEdVb2MyVjBkR2x1WjNNdWFYUmxiWE5QY0hScGIyNXpMbWwwWlcxRFlYSmtWR1Z0Y0d4aGRHVXNJSHRjY2x4dUlDQWdJQ0FnSUNCMGFXMWxPaUFvYVhSbGJTa2dQVDRnYVhSbGJTNXBiblJsY25aaGJDQS9JR0FrZTJsMFpXMHVhVzUwWlhKMllXd3VjM1JoY25SOUlIUnZJQ1I3YVhSbGJTNXBiblJsY25aaGJDNWxibVI5WUNBNklDY25YSEpjYmlBZ0lDQjlLVHRjY2x4dVhISmNiaUFnSUNCeVpYUjFjbTRnYVhSbGJYTXViV0Z3S0NocGRHVnRMQ0JwYm1SbGVDa2dQVDRnSkdScGRpNWpiRzl1WlNncFhISmNiaUFnSUNBZ0lDQWdMbVJoZEdFb0oybHVaR1Y0Snl3Z2FXNWtaWGdwWEhKY2JpQWdJQ0FnSUNBZ0xtaDBiV3dvZEdWdGNHeGhkR1VvYVhSbGJTa3BYSEpjYmlBZ0lDQXBPMXh5WEc1OVhISmNibHh5WEc1amIyNXpkQ0J3YjNCMWJHRjBaVk5yWldSMWJHVnlTWFJsYlhNZ1BTQW9jMlYwZEdsdVozTXBJRDArSUh0Y2NseHVJQ0FnSUdOdmJuTjBJQ1J6YTJWa2RXeGxja2wwWlcxelJXd2dQU0FrS0hObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NWpiMjUwWVdsdVpYSlRaV3hsWTNSdmNpbGNjbHh1SUNBZ0lDQWdJQ0F1Wlcxd2RIa29LVnh5WEc0Z0lDQWdJQ0FnSUM1aFpHUkRiR0Z6Y3loelpYUjBhVzVuY3k1cGRHVnRjMDl3ZEdsdmJuTXVhWFJsYlhORGMzTkRiR0Z6Y3lrN1hISmNiaUFnSUNCamIyNXpkQ0FrYjNkdVpYSkViMk4xYldWdWRDQTlJQ1FvSkhOclpXUjFiR1Z5U1hSbGJYTkZiRnN3WFM1dmQyNWxja1J2WTNWdFpXNTBLVHRjY2x4dUlDQWdJR052Ym5OMElDUnphR2xtZEhNZ1BTQWtLQ2N1SnlBcklITmxkSFJwYm1kekxuZHZjbXRwYm1kSmJuUmxjblpoYkZCc1lXTmxhRzlzWkdWeVEzTnpRMnhoYzNNZ0t5QW5JRDRnWkdsMkp5azdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1ZFOUVUem9nUjJWdVpYSmhkR1VnYVhSbGJTZHpJR1JwZG5OY2NseHVJQ0FnSUdOdmJuTjBJQ1JvWldGa1pYSkVhWFlnUFNCa2FYWW9LVnh5WEc0Z0lDQWdJQ0FnSUM1b2RHMXNLQ2M4YURFZ1kyeGhjM005WENKemFTMW9aV0ZrWlhKY0lqNUpkR1Z0Y3p3dmFERStKeWxjY2x4dUlDQWdJQ0FnSUNBdVlYQndaVzVrVkc4b0pITnJaV1IxYkdWeVNYUmxiWE5GYkNrN1hISmNibHh5WEc0Z0lDQWdZMjl1YzNRZ0pITnJaV1IxYkdWeVNYUmxiWE5EYjI1MFlXbHVaWEpGYkNBOUlHUnBkaWduYzJrdFkyOXVkR0ZwYm1WeUp5azdYSEpjYmlBZ0lDQjJZWElnSkdsMFpXMXpJRDBnWjJWMFNYUmxiVVJwZG5Nb2MyVjBkR2x1WjNNcE8xeHlYRzRnSUNBZ0pHbDBaVzF6TG1admNrVmhZMmdvWld3Z1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNSemEyVmtkV3hsY2tsMFpXMXpRMjl1ZEdGcGJtVnlSV3d1WVhCd1pXNWtLR1ZzS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUNBZ0pITnJaV1IxYkdWeVNYUmxiWE5EYjI1MFlXbHVaWEpGYkM1aGNIQmxibVJVYnlna2MydGxaSFZzWlhKSmRHVnRjMFZzS1R0Y2NseHVYSEpjYmlBZ0lDQnNaWFFnYjNCbGNtRjBhVzl1SUQwZ2JuVnNiRHRjY2x4dVhISmNiaUFnSUNCamIyNXpkQ0J0YjNWelpWVndJRDBnS0dWMlpXNTBLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0c5d1pYSmhkR2x2YmlBOVBTQnVkV3hzS1NCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dKRzF2ZG1sdVowTmhjbVFzSUNSallYSmtJSDBnUFNCdmNHVnlZWFJwYjI0N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJQ1J6YVVWc0lEMGdKQ2duTGljZ0t5QnpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YUdsbmFHeHBaMmgwU1hSbGJVTnpjeUFySUNjNmRtbHphV0pzWlNjcE95QXZMeUJtYVhodFpWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9KSE5wUld3dWJHVnVaM1JvSUNFOVBTQXdJQ1ltSUNSemFVVnNMbVJoZEdFb0oyMWhkR05vSnlrZ1BUMGdNU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FrYlc5MmFXNW5RMkZ5WkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtUmxkR0ZqYUNncFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZM056S0hzZ2RHOXdPaUFrYzJsRmJGc3dYUzV2Wm1aelpYUlViM0FzSUd4bFpuUTZJREFnZlNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNW9aV2xuYUhRb0pITnBSV3hiTUYwdVkyeHBaVzUwU0dWcFoyaDBLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5kcFpIUm9LQ2RoZFhSdkp5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV5WlcxdmRtVkRiR0Z6Y3loZ0pIdHpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YVhSbGJVTmhjbVJEYzNORGJHRnpjMzB0Ylc5MmFXNW5ZQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aFpHUkRiR0Z6Y3loZ0pIdHpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11YVhSbGJVTmhjbVJEYzNORGJHRnpjMzB0Y0dsdWJtVmtZQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aGNIQmxibVJVYnlna2MybEZiQzV3WVhKbGJuUW9LU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa2JXOTJhVzVuUTJGeVpDNXZiaWduYlc5MWMyVmtiM2R1Snl3Z2JXOTFjMlZFYjNkdVQyNURZWEprS1R0Y2NseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBa2JXOTJhVzVuUTJGeVpDNXlaVzF2ZG1Vb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0pHTmhjbVF1YzJodmR5Z3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSkNnbkxpY2dLeUJ6WlhSMGFXNW5jeTVwZEdWdGMwOXdkR2x2Ym5NdWFHbG5hR3hwWjJoMFNYUmxiVU56Y3lrdWFHbGtaU2dwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J2Y0dWeVlYUnBiMjRnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUNSdmQyNWxja1J2WTNWdFpXNTBMbTltWmlnbmJXOTFjMlZ0YjNabEp5d2diVzkxYzJWTmIzWmxLVHRjY2x4dUlDQWdJQ0FnSUNBa2IzZHVaWEpFYjJOMWJXVnVkQzV2Wm1Zb0oyMXZkWE5sZFhBbkxDQnRiM1Z6WlZWd0tUdGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnWTI5dWMzUWdiVzkxYzJWTmIzWmxJRDBnS0dWMlpXNTBLU0E5UGlCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0c5d1pYSmhkR2x2YmlBOVBTQnVkV3hzS1NCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR052Ym5OMElIc2dKRzF2ZG1sdVowTmhjbVFzSUc5bVpuTmxkRmdzSUc5bVpuTmxkRmtnZlNBOUlHOXdaWEpoZEdsdmJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm1WM1QyWm1jMlYwV0NBOUlHVjJaVzUwTG5CaFoyVllJQzBnYjJabWMyVjBXQ3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzVDJabWMyVjBXU0E5SUdWMlpXNTBMbkJoWjJWWklDMGdiMlptYzJWMFdUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0pHMXZkbWx1WjBOaGNtUXVZM056S0h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5d09pQnVaWGRQWm1aelpYUlpJQ3NnSjNCNEp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVm1kRG9nYm1WM1QyWm1jMlYwV0NBcklDZHdlQ2RjY2x4dUlDQWdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdTR2xuYkdsbmFIUWdjMmhwWm5SelhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1gzZHBibVJ2ZHlBOUlDUnZkMjVsY2tSdlkzVnRaVzUwV3pCZExtUmxabUYxYkhSV2FXVjNPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSGdnUFNCbGRtVnVkQzV3WVdkbFdEdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQjVJRDBnWlhabGJuUXVjR0ZuWlZrZ0xTQmZkMmx1Wkc5M0xuTmpjbTlzYkZrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEp2ZDBobGFXZG9kQ0E5SUhObGRIUnBibWR6TG14cGJtVklaV2xuYUhRZ0t5QXhPMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEp2ZDNOUVpYSkliM1Z5SUQwZ2MyVjBkR2x1WjNNdWNtOTNjMUJsY2todmRYSTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnY0dGeWMyVkpiblFvSkcxdmRtbHVaME5oY21RdVpHRjBZU2duYVc1a1pYZ25LU2s3WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVhSbGJTQTlJSE5sZEhScGJtZHpMbWwwWlcxelQzQjBhVzl1Y3k1cGRHVnRjMXRwYm1SbGVGMDdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaSFZ5WVhScGIyNGdQU0JwZEdWdExtUjFjbUYwYVc5dU8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHaGxhV2RvZENBOUlHUjFjbUYwYVc5dUlDb2dLSEp2ZDBobGFXZG9kQ0FxSUhKdmQzTlFaWEpJYjNWeUlDOGdOakFwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FrYzJocFpuUnpMbVZoWTJnb1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENBa2RHaHBjeUE5SUNRb2RHaHBjeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVnNaVzFsYm5SQ2IzVnVaR2x1WnlBOUlIUm9hWE11WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUNSbGJDQTlJQ1IwYUdsekxtWnBibVFvSnk0bklDc2djMlYwZEdsdVozTXVhWFJsYlhOUGNIUnBiMjV6TG1ocFoyaHNhV2RvZEVsMFpXMURjM01wTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGdnUGlCbGJHVnRaVzUwUW05MWJtUnBibWN1YkdWbWRDQW1KaUI0SUR3Z1pXeGxiV1Z1ZEVKdmRXNWthVzVuTG5KcFoyaDBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FtSmlCNUlENGdaV3hsYldWdWRFSnZkVzVrYVc1bkxuUnZjQ0FtSmlCNUlEd2daV3hsYldWdWRFSnZkVzVrYVc1bkxtSnZkSFJ2YlNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzltWm5ObGRGUnZjQ0E5SUhrZ0xTQmxiR1Z0Wlc1MFFtOTFibVJwYm1jdWRHOXdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjbTkzUTI5MWJuUWdQU0FvVFdGMGFDNW1iRzl2Y2lodlptWnpaWFJVYjNBZ0x5QnliM2RJWldsbmFIUXBJQzBnTVNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRnlkRWx1VFdsdWRYUmxjeUE5SURZd0lDOGdjMlYwZEdsdVozTXVjbTkzYzFCbGNraHZkWElnS2lCeWIzZERiM1Z1ZERzZ0x5OGdQRHc5UFNCR1NWaE5SU0JjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJuUmxjblpoYkNBOUlITmxkSFJwYm1kekxtUmhkR0ZiSkhSb2FYTXVaR0YwWVNnblkyOXNkVzF1SnlsZExuZHZjbXRwYm1kVWFXMWxTVzUwWlhKMllXeHpXeVIwYUdsekxtUmhkR0VvSjJsMFpXMHRhVzVrWlhnbktWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnRZWFJqYUZKbGMzVnNkQ0E5SUhObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NXRZWFJqYUVaMWJtTW9hWFJsYlN3Z2FXNTBaWEoyWVd3c0lHOW1abk5sZEVsdVRXbHVkWFJsY3lrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkRzl3SUQwZ1RXRjBhQzV0YVc0b1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVFdGMGFDNXRZWGdvTUN3Z2NtOTNRMjkxYm5RZ0tpQnliM2RJWldsbmFIUXBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTJ4cFpXNTBTR1ZwWjJoMElDMGdhR1ZwWjJoMFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR1ZzTG1OemN5aDdJSFJ2Y0RvZ2RHOXdJSDBwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbU56Y3lnblltRmphMmR5YjNWdVpDMWpiMnh2Y2ljc0lHMWhkR05vVW1WemRXeDBMbU52Ykc5eUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1b1pXbG5hSFFvYUdWcFoyaDBLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNXphRzkzS0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa1pXd3VaR0YwWVNnbmJXRjBZMmduTENBcmJXRjBZMmhTWlhOMWJIUXViV0YwWTJncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0pHVnNMbVJoZEdFb0oyMWhkR05vSnl3Z01DazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrWld3dWFHbGtaU2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlPMXh5WEc1Y2NseHVJQ0FnSUdOdmJuTjBJRzF2ZFhObFJHOTNiazl1UTJGeVpDQTlJQ2hsZG1WdWRDQXZLam9nVFc5MWMyVkZkbVZ1ZENBcUx5a2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsZG1WdWRDNTNhR2xqYUNBaFBUMGdNU2tnZXlCeVpYUjFjbTQ3SUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdKSE5yWldSMWJHVnlWM0poY0hCbGNpQTlJQ1FvWUM0a2UzTmxkSFJwYm1kekxuTnJaV1IxYkdWeVYzSmhjSEJsY2tOemMwTnNZWE56ZldBcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElDUmpZWEprSUQwZ0pDaGxkbVZ1ZEM1amRYSnlaVzUwVkdGeVoyVjBLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ0pHMXZkbWx1WjBOaGNtUWdQVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWtZMkZ5WkM1amJHOXVaU2dwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVpHRjBZU2duYVc1a1pYZ25MQ0FrWTJGeVpDNWtZWFJoS0NkcGJtUmxlQ2NwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtRmtaRU5zWVhOektHQWtlM05sZEhScGJtZHpMbWwwWlcxelQzQjBhVzl1Y3k1cGRHVnRRMkZ5WkVOemMwTnNZWE56ZlMxdGIzWnBibWRnS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuSmxiVzkyWlVOc1lYTnpLR0FrZTNObGRIUnBibWR6TG1sMFpXMXpUM0IwYVc5dWN5NXBkR1Z0UTJGeVpFTnpjME5zWVhOemZTMXdhVzV1WldSZ0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbmRwWkhSb0tDUmpZWEprTG5kcFpIUm9LQ2twWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVlYQndaVzVrVkc4b0pITnJaV1IxYkdWeVYzSmhjSEJsY2lrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dmRtRnlJR0p2ZFc1alpTQTlJQ1JqWVhKa1d6QmRMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncE8xeHlYRzRnSUNBZ0lDQWdJQzh2SUdacGVHMWxJRjVlWGx4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5bVpuTmxkRmdnUFNCbGRtVnVkQzV3WVdkbFdDQXRJR1YyWlc1MExtOW1abk5sZEZnc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUc5bVpuTmxkRmtnUFNCbGRtVnVkQzV3WVdkbFdTQXRJR1YyWlc1MExtOW1abk5sZEZrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNSdGIzWnBibWREWVhKa0xtTnpjeWg3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJ2Y0RvZ2IyWm1jMlYwV1NBcklDZHdlQ2NzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hsWm5RNklHOW1abk5sZEZnZ0t5QW5jSGduWEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHOXdaWEpoZEdsdmJpQTlJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdKR05oY21Rc0lDUnRiM1pwYm1kRFlYSmtMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhSWU9pQmxkbVZ1ZEM1dlptWnpaWFJZTENCdlptWnpaWFJaT2lCbGRtVnVkQzV2Wm1aelpYUlpYSEpjYmlBZ0lDQWdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSkdOaGNtUXVhR2xrWlNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBa2IzZHVaWEpFYjJOMWJXVnVkQzV2YmlnbmJXOTFjMlZ0YjNabEp5d2diVzkxYzJWTmIzWmxLVHRjY2x4dUlDQWdJQ0FnSUNBa2IzZHVaWEpFYjJOMWJXVnVkQzV2YmlnbmJXOTFjMlYxY0Njc0lHMXZkWE5sVlhBcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh5WEc0Z0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBa2MydGxaSFZzWlhKSmRHVnRjMFZzTG1acGJtUW9KeTRuSUNzZ2MyVjBkR2x1WjNNdWFYUmxiWE5QY0hScGIyNXpMbWwwWlcxRFlYSmtRM056UTJ4aGMzTXBMbTl1S0NkdGIzVnpaV1J2ZDI0bkxDQnRiM1Z6WlVSdmQyNVBia05oY21RcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQndiM0IxYkdGMFpWTnJaV1IxYkdWeVNYUmxiWE03SWl3aVkyOXVjM1FnWkdWbVlYVnNkRk5sZEhScGJtZHpJRDBnZTF4eVhHNGdJQ0FnTHk4Z1JHRjBZU0JoZEhSeWFXSjFkR1Z6WEhKY2JpQWdJQ0JvWldGa1pYSnpPaUJ1ZFd4c0xDQWdMeThnVTNSeWFXNW5XMTBnTFNCQmNuSmhlU0J2WmlCamIyeDFiVzRnYUdWaFpHVnljMXh5WEc0Z0lDQWdkR0Z6YTNNNklGdGRMQ0FnSUNBdkx5QlVZWE5yVzEwZ0xTQkJjbkpoZVNCdlppQjBZWE5yY3k0Z1VtVnhkV2x5WldRZ1ptbGxiR1J6T2lCY2NseHVJQ0FnSUM4dklHbGtPaUJ1ZFcxaVpYSXNJSE4wWVhKMFZHbHRaVG9nYm5WdFltVnlMQ0JrZFhKaGRHbHZiam9nYm5WdFltVnlMQ0JqYjJ4MWJXNDZJRzUxYldKbGNseHlYRzVjY2x4dUlDQWdJQzh2SUVOaGNtUWdkR1Z0Y0d4aGRHVWdMU0JKYm01bGNpQmpiMjUwWlc1MElHOW1JSFJoYzJzZ1kyRnlaQzRnWEhKY2JpQWdJQ0F2THlCWmIzVW5jbVVnWVdKc1pTQjBieUIxYzJVZ0pIdHJaWGw5SUdsdWMybGtaU0IwWlcxd2JHRjBaU3dnZDJobGNtVWdhMlY1SUdseklHRnVlU0J3Y205d1pYSjBlU0JtY205dElIUmhjMnN1WEhKY2JpQWdJQ0JqWVhKa1ZHVnRjR3hoZEdVNklDYzhaR2wyUGlSN2FXUjlQQzlrYVhZK0p5eGNjbHh1WEhKY2JpQWdJQ0F2THlCUGJrTnNhV05ySUdWMlpXNTBJR2hoYm1Sc1pYSmNjbHh1SUNBZ0lHOXVRMnhwWTJzNklHWjFibU4wYVc5dUlDaGxMQ0IwWVhOcktTQjdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5OGdRM056SUdOc1lYTnpaWE5jY2x4dUlDQWdJSE5yWldSMWJHVnlWM0poY0hCbGNrTnpjME5zWVhOek9pQW5jMnRsWkhWc1pYSXRkM0poY0hCbGNpY3NYSEpjYmlBZ0lDQmpiMjUwWVdsdVpYSkRjM05EYkdGemN6b2dKM05yWldSMWJHVnlMV052Ym5SaGFXNWxjaWNzWEhKY2JpQWdJQ0JvWldGa1pYSkRiMjUwWVdsdVpYSkRjM05EYkdGemN6b2dKM05yWldSMWJHVnlMV2hsWVdSbGNuTW5MRnh5WEc0Z0lDQWdjMk5vWldSMWJHVnlRMjl1ZEdGcGJtVnlRM056UTJ4aGMzTTZJQ2R6YTJWa2RXeGxjaTF0WVdsdUp5eGNjbHh1SUNBZ0lIUmhjMnRRYkdGalpXaHZiR1JsY2tOemMwTnNZWE56T2lBbmMydGxaSFZzWlhJdGRHRnpheTF3YkdGalpXaHZiR1JsY2ljc1hISmNiaUFnSUNCM2IzSnJhVzVuU1c1MFpYSjJZV3hRYkdGalpXaHZiR1JsY2tOemMwTnNZWE56T2lBbmMydGxaSFZzWlhJdGFXNTBaWEoyWVd3dGNHeGhZMlZvYjJ4a1pYSW5MRnh5WEc0Z0lDQWdZMlZzYkVOemMwTnNZWE56T2lBbmMydGxaSFZzWlhJdFkyVnNiQ2NzWEhKY2JpQWdJQ0J5WlhOcGVtRmliR1ZJWVc1a2JHVnlRM056UTJ4aGMzTTZJQ2R5WlhOcGVtRmliR1V0YUdGdVpHeGxjaWNzWEhKY2JpQWdJQ0J5WlhOcGVtRmliR1ZUYkdsa1pYSkRjM05EYkdGemN6b2dKM0psYzJsNllXSnNaUzF6Ykdsa1pYSW5MRnh5WEc1Y2NseHVJQ0FnSUd4cGJtVklaV2xuYUhRNklETXdMQ0FnSUNBZ0lDQWdJQzh2SUdobGFXZG9kQ0J2WmlCdmJtVWdiR2x1WlNCcGJpQm5jbWxrWEhKY2JpQWdJQ0JpYjNKa1pYSlhhV1IwYURvZ01Td2dJQ0FnSUNBZ0lDQXZMeUIzYVdSMGFDQnZaaUJpYjJGeVpDQnZaaUJuY21sa0lHTmxiR3hjY2x4dUlDQWdJR052YkhWdGJsZHBaSFJvT2lBeU1EQXNYSEpjYmlBZ0lDQnRhVzVEYjJ4MWJXNVhhV1IwYURvZ01UQXdMRnh5WEc1Y2NseHVJQ0FnSUhKdmQzTlFaWEpJYjNWeU9pQXlMQ0FnSUNBZ0lDQWdJQzh2SUdOdmRXNTBJRzltSUhKdmQzTWdabTl5SUc5dVpTQm9iM1Z5WEhKY2JseHlYRzRnSUNBZ1kyOXNkVzF1VW1WemFYcGxSVzVoWW14bFpEb2dkSEoxWlN3Z0x5OGdhWE1nWTI5c2RXMXVjeUJ5WlhOcGVtRmliR1ZjY2x4dVhISmNiaUFnSUNCa1pXSjFaem9nZEhKMVpTeGNjbHh1WEhKY2JpQWdJQ0JwZEdWdGMwOXdkR2x2Ym5NNklIdGNjbHh1SUNBZ0lDQWdJQ0JsYm1GaWJHVmtPaUJtWVd4elpTeGNjbHh1SUNBZ0lDQWdJQ0JwZEdWdGMwTnpjME5zWVhOek9pQW5jMnRsWkhWc1pYSXRhWFJsYlhNbkxGeHlYRzRnSUNBZ0lDQWdJR2hwWjJoc2FXZG9kRWwwWlcxRGMzTTZJQ2R6YVMxb2FXZG9iR2xuYUhRdGFYUmxiU2NzWEhKY2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeVUyVnNaV04wYjNJNklGd2lJM05yWldSMWJHVnlMV2wwWlcxelhDSXNYSEpjYmlBZ0lDQWdJQ0FnYVhSbGJVTmhjbVJEYzNORGJHRnpjem9nSjNOcExXTmhjbVFuTEZ4eVhHNGdJQ0FnSUNBZ0lHbDBaVzFEWVhKa1ZHVnRjR3hoZEdVNklDY25MRnh5WEc0Z0lDQWdJQ0FnSUdsMFpXMXpPaUJiWFN4Y2NseHVJQ0FnSUNBZ0lDQnRZWFJqYUVaMWJtTTZJQ2dwSUQwK0lIc2djbVYwZFhKdUlIc2diV0YwWTJnNklIUnlkV1VnZlNCOVhISmNiaUFnSUNCOVhISmNibjA3WEhKY2JseHlYRzVsZUhCdmNuUWdleUJrWldaaGRXeDBVMlYwZEdsdVozTWdmVHNpTENKcGJYQnZjblFnZXlCa1pXWmhkV3gwVTJWMGRHbHVaM01nZlNCbWNtOXRJQ2N1TDNObGRIUnBibWR6Snp0Y2NseHVhVzF3YjNKMElIQnZjSFZzWVhSbFUydGxaSFZzWlhKSmRHVnRjeUJtY205dElDY3VMMmwwWlcxekp6dGNjbHh1YVcxd2IzSjBJSHNnWTI5dGNHbHNaVlJsYlhCc1lYUmxJSDBnWm5KdmJTQW5MaTkwWlcxd2JHRjBaU2M3WEhKY2JseHlYRzVqYkdGemN5QlRhMlZrZFd4bGNpQjdYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdrWTI5dWRHRnBibVZ5TENCdmNIUnBiMjV6S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1elpYUjBhVzVuY3lBOUlDUXVaWGgwWlc1a0tIUnlkV1VzSUdSbFptRjFiSFJUWlhSMGFXNW5jeXdnYjNCMGFXOXVjeWs3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTRrWTI5dWRHRnBibVZ5SUQwZ0pHTnZiblJoYVc1bGNqdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxpUnZkMjVsY2tSdlkzVnRaVzUwSUQwZ0pDZ2tZMjl1ZEdGcGJtVnlXekJkTG05M2JtVnlSRzlqZFcxbGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR2hsWVdSbGNrTnZiblJoYVc1bGNpQTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k0a2MyTm9aV1IxYkdWRmJDQTlJRzUxYkd4Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG05d1pYSmhkR2x2YmlBOUlHNTFiR3c3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk5sZEhScGJtZHpMbVJsWW5WbktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWRHbHRaU2duYzJ0bFpIVnNaWEluS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0c5d2RXeGhkR1VvS1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXpaWFIwYVc1bmN5NXBkR1Z0YzA5d2RHbHZibk11Wlc1aFlteGxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNCMWJHRjBaVk5yWldSMWJHVnlTWFJsYlhNb2RHaHBjeTV6WlhSMGFXNW5jeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1elpYUjBhVzVuY3k1a1pXSjFaeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMblJwYldWRmJtUW9KM05yWldSMWJHVnlKeWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJSEJ2Y0hWc1lYUmxLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11SkdOdmJuUmhhVzVsY2k1bGJYQjBlU2dwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11SkdOdmJuUmhhVzVsY2k1aFpHUkRiR0Z6Y3loMGFHbHpMbk5sZEhScGJtZHpMbU52Ym5SaGFXNWxja056YzBOc1lYTnpLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FHVmhaR1Z5Y3lBOUlIUm9hWE11YzJWMGRHbHVaM011YUdWaFpHVnljMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQS9JSFJvYVhNdWMyVjBkR2x1WjNNdWFHVmhaR1Z5YzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUhSb2FYTXVjMlYwZEdsdVozTXVaR0YwWVM1dFlYQW9kR2hwY3k1elpYUjBhVzVuY3k1blpYUklaV0ZrWlhJcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrYVhZZ1BTQWtLQ2M4WkdsMlBqd3ZaR2wyUGljcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QkJaR1FnYUdWaFpHVnljMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR2hsWVdSbGNrTnZiblJoYVc1bGNpQTlJR1JwZGk1amJHOXVaU2dwTG1Ga1pFTnNZWE56S0hSb2FYTXVjMlYwZEdsdVozTXVhR1ZoWkdWeVEyOXVkR0ZwYm1WeVEzTnpRMnhoYzNNcE8xeHlYRzRnSUNBZ0lDQWdJR2hsWVdSbGNuTXVabTl5UldGamFDZ29aV3hsYldWdWRDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrYVhZdVkyeHZibVVvS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xuUmxlSFFvWld4bGJXVnVkQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aGNIQmxibVJVYnloMGFHbHpMaVJvWldGa1pYSkRiMjUwWVdsdVpYSXBPMXh5WEc0Z0lDQWdJQ0FnSUgwc0lIUm9hWE1wTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11SkdOdmJuUmhhVzVsY2k1aGNIQmxibVFvZEdocGN5NGthR1ZoWkdWeVEyOXVkR0ZwYm1WeUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdRV1JrSUhOamFHVmtkV3hsY2x4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11SkhOamFHVmtkV3hsUld3Z1BTQmthWFl1WTJ4dmJtVW9LUzVoWkdSRGJHRnpjeWgwYUdsekxuTmxkSFJwYm1kekxuTmphR1ZrZFd4bGNrTnZiblJoYVc1bGNrTnpjME5zWVhOektUdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpZMmhsWkhWc1pWUnBiV1ZzYVc1bFJXd2dQU0JrYVhZdVkyeHZibVVvS1M1aFpHUkRiR0Z6Y3loMGFHbHpMbk5sZEhScGJtZHpMbk5qYUdWa2RXeGxja052Ym5SaGFXNWxja056YzBOc1lYTnpJQ3NnSnkxMGFXMWxiR2x1WlNjcE8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElITmphR1ZrZFd4bFFtOWtlVVZzSUQwZ1pHbDJMbU5zYjI1bEtDa3VZV1JrUTJ4aGMzTW9kR2hwY3k1elpYUjBhVzVuY3k1elkyaGxaSFZzWlhKRGIyNTBZV2x1WlhKRGMzTkRiR0Z6Y3lBcklDY3RZbTlrZVNjcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0JuY21sa1EyOXNkVzF1Uld4bGJXVnVkQ0E5SUdScGRpNWpiRzl1WlNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElESTBPeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVRzl3ZFd4aGRHVWdkR2x0Wld4cGJtVmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ1BDQjBhR2x6TG5ObGRIUnBibWR6TG5KdmQzTlFaWEpJYjNWeU95QnFLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwYVcxbGJHbHVaVU5sYkd3Z1BTQmthWFl1WTJ4dmJtVW9LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNW9aV2xuYUhRb2RHaHBjeTV6WlhSMGFXNW5jeTVzYVc1bFNHVnBaMmgwS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVoWkdSRGJHRnpjeWhxSUQwOUlIUm9hWE11YzJWMGRHbHVaM011Y205M2MxQmxja2h2ZFhJZ0xTQXhJRDhnWENKc1lYTjBYQ0lnT2lCY0lsd2lLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYWlBOVBTQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2x0Wld4cGJtVkRaV3hzSUQwZ2RHbHRaV3hwYm1WRFpXeHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVqYzNNb1hDSnNhVzVsTFdobGFXZG9kRndpTENCMGFHbHpMbk5sZEhScGJtZHpMbXhwYm1WSVpXbG5hSFFnS3lBbmNIZ25LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1ZEdWNGRDaHFJRDA5SURBZ1B5QjBhR2x6TG5SdlZHbHRaVk4wY21sdVp5aHBLU0E2SUZ3aVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHbHRaV3hwYm1WRFpXeHNMbUZ3Y0dWdVpGUnZLSE5qYUdWa2RXeGxWR2x0Wld4cGJtVkZiQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2wyTG1Oc2IyNWxLQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZV1JrUTJ4aGMzTW9kR2hwY3k1elpYUjBhVzVuY3k1alpXeHNRM056UTJ4aGMzTXBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtaGxhV2RvZENoMGFHbHpMbk5sZEhScGJtZHpMbXhwYm1WSVpXbG5hSFFwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbUZrWkVOc1lYTnpLR29nUFQwZ2RHaHBjeTV6WlhSMGFXNW5jeTV5YjNkelVHVnlTRzkxY2lBdElERWdQeUJjSW14aGMzUmNJaUE2SUZ3aVhDSXBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtRndjR1Z1WkZSdktHZHlhV1JEYjJ4MWJXNUZiR1Z0Wlc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnVUc5d2RXeGhkR1VnWjNKcFpGeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR29nUFNBd095QnFJRHdnYUdWaFpHVnljeTVzWlc1bmRHZzdJR29yS3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JsYkNBOUlHZHlhV1JEYjJ4MWJXNUZiR1Z0Wlc1MExtTnNiMjVsS0NrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMFlYTnJjMUJzWVdObGFHOXNaR1Z5SUQwZ1pHbDJMbU5zYjI1bEtDa3VZV1JrUTJ4aGMzTW9kR2hwY3k1elpYUjBhVzVuY3k1MFlYTnJVR3hoWTJWb2IyeGtaWEpEYzNORGJHRnpjeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYQndaVzVrVkdGemEzTW9kR0Z6YTNOUWJHRmpaV2h2YkdSbGNpd2dkR2hwY3k1elpYUjBhVzVuY3k1MFlYTnJjeTVtYVd4MFpYSW9kQ0E5UGlCMExtTnZiSFZ0YmlBOVBTQnFLU2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm1hWGh0WlNCYmQyOXlhMmx1WjFScGJXVkpiblJsY25aaGJITWdiWFZ6ZENCdWIzUWdkWE5sSUdsdVpHVjRYVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCM2IzSnJhVzVuU1c1MFpYSjJZV3h6VUd4aFkyVm9iMnhrWlhJZ1BTQmthWFl1WTJ4dmJtVW9LUzVoWkdSRGJHRnpjeWgwYUdsekxuTmxkSFJwYm1kekxuZHZjbXRwYm1kSmJuUmxjblpoYkZCc1lXTmxhRzlzWkdWeVEzTnpRMnhoYzNNcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JwYm5SbGNuWmhiSE1nUFNCMGFHbHpMbk5sZEhScGJtZHpMbVJoZEdGYmFsMHVkMjl5YTJsdVoxUnBiV1ZKYm5SbGNuWmhiSE03WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlYQndaVzVrUVhaaGFXeGhZbXhsU1c1MFpYSjJZV3dvZDI5eWEybHVaMGx1ZEdWeWRtRnNjMUJzWVdObGFHOXNaR1Z5TENCcGJuUmxjblpoYkhNc0lHb3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld3dWNISmxjR1Z1WkNoMFlYTnJjMUJzWVdObGFHOXNaR1Z5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld3dWNISmxjR1Z1WkNoM2IzSnJhVzVuU1c1MFpYSjJZV3h6VUd4aFkyVm9iMnhrWlhJcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJDNWhjSEJsYm1SVWJ5aHpZMmhsWkhWc1pVSnZaSGxGYkNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVU52YkhWdGJsZHBaSFJvS0dvc0lIUm9hWE11YzJWMGRHbHVaM011WTI5c2RXMXVWMmxrZEdncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k0a2MyTm9aV1IxYkdWRmJDNWhjSEJsYm1Rb2MyTm9aV1IxYkdWVWFXMWxiR2x1WlVWc0tUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxpUnpZMmhsWkhWc1pVVnNMbUZ3Y0dWdVpDaHpZMmhsWkhWc1pVSnZaSGxGYkNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR052Ym5SaGFXNWxjaTVoY0hCbGJtUW9kR2hwY3k0a2MyTm9aV1IxYkdWRmJDazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZENCa1pXWmhkV3gwSUhkcFpIUm9JR1p2Y2lCamIyeDFiVzV6WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREE3SUdvZ1BDQm9aV0ZrWlhKekxteGxibWQwYURzZ2Fpc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsUTI5c2RXMXVWMmxrZEdnb2Fpd2dkR2hwY3k1elpYUjBhVzVuY3k1amIyeDFiVzVYYVdSMGFDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0F2THlCRGIyNW1hV2QxY21VZ2NtVnphWHBwYm1kY2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXpaWFIwYVc1bmN5NWpiMngxYlc1U1pYTnBlbVZGYm1GaWJHVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuZFhKbFVtVnphWHBwYm1jb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1kyOXVabWxuZFhKbFVtVnphWHBwYm1jb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR2wySUQwZ0pDZ25QR1JwZGo0OEwyUnBkajRuS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMnRsWkhWc1pYSkZiRkpsYzJsNllXSnNaVWhoYm1Sc1pYSWdQU0JrYVhZdVkyeHZibVVvS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0F1WVdSa1EyeGhjM01vZEdocGN5NXpaWFIwYVc1bmN5NXlaWE5wZW1GaWJHVklZVzVrYkdWeVEzTnpRMnhoYzNNcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMaVJqYjI1MFlXbHVaWEl1Y0hKbGNHVnVaQ2h6YTJWa2RXeGxja1ZzVW1WemFYcGhZbXhsU0dGdVpHeGxjaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSE5yWldSMWJHVnlSV3hTWlhOcGVtRmliR1ZJWVc1a2JHVnlMbmRwWkhSb0tIUm9hWE11SkdOdmJuUmhhVzVsY2k1M2FXUjBhQ2dwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6YVhwaFlteGxVMnhwWkdWeVNHVnBaMmgwSUQwZ2RHaHBjeTRrYzJOb1pXUjFiR1ZGYkM1b1pXbG5hSFFvS1NBcklIUm9hWE11SkdobFlXUmxja052Ym5SaGFXNWxjaTVvWldsbmFIUW9LVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhVzVrWlhnZ1BTQXdPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR2hsWVdSbGNrTnZiblJoYVc1bGNpNW1hVzVrS0Nka2FYWW5LUzVsWVdOb0tDaGZMQ0JsYkNrZ1BUNGdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWFl1WTJ4dmJtVW9LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1Ga1pFTnNZWE56S0hSb2FYTXVjMlYwZEdsdVozTXVjbVZ6YVhwaFlteGxVMnhwWkdWeVEzTnpRMnhoYzNNcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZM056S0Nkc1pXWjBKeXdnWld3dWIyWm1jMlYwVEdWbWRDQXJJR1ZzTG1Oc2FXVnVkRmRwWkhSb0tWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMbWhsYVdkb2RDaHlaWE5wZW1GaWJHVlRiR2xrWlhKSVpXbG5hSFFwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVpHRjBZU2duWTI5c2RXMXVMV2xrSnl3Z2FXNWtaWGdyS3lsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNWhjSEJsYm1SVWJ5aHphMlZrZFd4bGNrVnNVbVZ6YVhwaFlteGxTR0Z1Wkd4bGNpbGNjbHh1SUNBZ0lDQWdJQ0I5S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYzJ0bFpIVnNaWEpGYkZKbGMybDZZV0pzWlVoaGJtUnNaWEl1YjI0b0oyMXZkWE5sWkc5M2JpY3NJQ2N1SnlBcklIUm9hWE11YzJWMGRHbHVaM011Y21WemFYcGhZbXhsVTJ4cFpHVnlRM056UTJ4aGMzTXNJSFJvYVhNdWIyNVFiMmx1ZEdWeVJHOTNiaTVpYVc1a0tIUm9hWE1wS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FnSUNvZ1EyOXVkbVZ5ZENCa2IzVmliR1VnZG1Gc2RXVWdiMllnYUc5MWNuTWdkRzhnZW1WeWJ5MXdjbVZ3YjNOcGRHVmtJSE4wY21sdVp5QjNhWFJvSURNd0lHOXlJREF3SUhaaGJIVmxJRzltSUcxcGJuVjBaWE5jY2x4dUlDQWdJQ0FnSUNvdlhISmNiaUFnSUNCMGIxUnBiV1ZUZEhKcGJtY29kbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFpoYkhWbElEd2dNVEFnUHlBbk1DY2dPaUFuSnlrZ0t5Qk5ZWFJvTG1ObGFXd29kbUZzZFdVcElDc2dLRTFoZEdndVkyVnBiQ2gyWVd4MVpTa2dQaUJOWVhSb0xtWnNiMjl5S0haaGJIVmxLU0EvSUNjNk16QW5JRG9nSnpvd01DY3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dVbVYwZFhKdUlHaGxhV2RvZENCdlppQjBZWE5ySUdOaGNtUWdZbUZ6WldRZ2IyNGdaSFZ5WVhScGIyNGdiMllnZEdobElIUmhjMnRjY2x4dUlDQWdJQ0FxSUdSMWNtRjBhVzl1SUMwZ2FXNGdhRzkxY25OY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1oyVjBRMkZ5WkVobGFXZG9kQ2hrZFhKaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSMWNtRjBhVzl1U1c1TmFXNTFkR1Z6SUQwZ1pIVnlZWFJwYjI0Z0tpQTJNRHRjY2x4dUlDQWdJQ0FnSUNCamIyNXpkQ0JvWldsbmFIUlBaazFwYm5WMFpTQTlJQ2gwYUdsekxuTmxkSFJwYm1kekxteHBibVZJWldsbmFIUWdLeUIwYUdsekxuTmxkSFJwYm1kekxtSnZjbVJsY2xkcFpIUm9LU0FxSUhSb2FYTXVjMlYwZEdsdVozTXVjbTkzYzFCbGNraHZkWElnTHlBMk1EdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1alpXbHNLR1IxY21GMGFXOXVTVzVOYVc1MWRHVnpJQ29nYUdWcFoyaDBUMlpOYVc1MWRHVXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dVbVYwZFhKdUlIUnZjQ0J2Wm1aelpYUWdiMllnZEdGemF5QmpZWEprSUdKaGMyVmtJRzl1SUhOMFlYSjBJSFJwYldVZ2IyWWdkR2hsSUhSaGMydGNjbHh1SUNBZ0lDQXFJSE4wWVhKMFZHbHRaU0F0SUdsdUlHaHZkWEp6WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdkbGRFTmhjbVJVYjNCUWIzTnBkR2x2YmloemRHRnlkRlJwYldVcElIdGNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpkR0Z5ZEZScGJXVkpiblFnUFNCMGFHbHpMbkJoY25ObFZHbHRaU2h6ZEdGeWRGUnBiV1VwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2RHaHBjeTV6WlhSMGFXNW5jeTVzYVc1bFNHVnBaMmgwSUNzZ2RHaHBjeTV6WlhSMGFXNW5jeTVpYjNKa1pYSlhhV1IwYUNrZ0tpQW9jM1JoY25SVWFXMWxTVzUwSUNvZ2RHaHBjeTV6WlhSMGFXNW5jeTV5YjNkelVHVnlTRzkxY2lrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lCUVlYSnpaU0IwYVcxbElITjBjbWx1WnlCaGJtUWdjSEpsYzJWdWRDQnBkQ0JwYmlCb2IzVnljeUFvWlhndUlDY3hNem96TUNjZ1BUNGdNVE11TlNsY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN0tuTjBjbWx1WjMwZ2RHbHRaU0F0SUhScGJXVWdhVzRnWm05eWJXRjBJR3hwYTJVZ0p6RXpPalV3Snl3Z0p6RXhPakF3Snl3Z0p6RTBKMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0J3WVhKelpWUnBiV1VvZEdsdFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF2WEZ4a2V6SjlYRnc2WEZ4a2V6SjlMeTUwWlhOMEtIUnBiV1VwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRDhnY0dGeWMyVkpiblFvZEdsdFpTNXpjR3hwZENnbk9pY3BXekJkS1NBcklIQmhjbk5sU1c1MEtIUnBiV1V1YzNCc2FYUW9Kem9uS1ZzeFhTa2dMeUEyTUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0E2SUhCaGNuTmxTVzUwS0hScGJXVXBPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0tpQlNaVzVrWlhJZ1kyRnlaQ0IwWlcxd2JHRjBaVnh5WEc0Z0lDQWdLaTljY2x4dUlDQWdJSEpsYm1SbGNrbHVibVZ5UTJGeVpFTnZiblJsYm5Rb2RHRnpheWtnZTF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSbGJYQnNZWFJsSUQwZ2RHaHBjeTV6WlhSMGFXNW5jeTVqWVhKa1ZHVnRjR3hoZEdVN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ1kyOXRjR2xzWlZSbGJYQnNZWFJsS0hSbGJYQnNZWFJsS1NoMFlYTnJLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDUW9jbVZ6ZFd4MEtUdGNjbHh1SUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0F2S2lvZ1hISmNiaUFnSUNBZ0tpQkhaVzVsY21GMFpTQjBZWE5ySUdOaGNtUnpYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJR0Z3Y0dWdVpGUmhjMnR6S0hCc1lXTmxhRzlzWkdWeUxDQjBZWE5yY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJoYzJ0ekxtWnZja1ZoWTJnb0tIUmhjMnNwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2x1Ym1WeVEyOXVkR1Z1ZENBOUlIUm9hWE11Y21WdVpHVnlTVzV1WlhKRFlYSmtRMjl1ZEdWdWRDaDBZWE5yS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIUnZjQ0E5SUhSb2FYTXVaMlYwUTJGeVpGUnZjRkJ2YzJsMGFXOXVLSFJoYzJzdWMzUmhjblJVYVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2hsYVdkb2RDQTlJSFJvYVhNdVoyVjBRMkZ5WkVobGFXZG9kQ2gwWVhOckxtUjFjbUYwYVc5dUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCallYSmtJRDBnSkNnblBHUnBkajQ4TDJScGRqNG5LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1GMGRISW9lMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjBlV3hsT2lBbmRHOXdPaUFuSUNzZ2RHOXdJQ3NnSjNCNE95Qm9aV2xuYUhRNklDY2dLeUJvWldsbmFIUWdLeUFuY0hnbkxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhScGRHeGxPaUIwYUdsekxuUnZWR2x0WlZOMGNtbHVaeWgwWVhOckxuTjBZWEowVkdsdFpTa2dLeUFuSUMwZ0p5QXJJSFJvYVhNdWRHOVVhVzFsVTNSeWFXNW5LSFJoYzJzdWMzUmhjblJVYVcxbElDc2dkR0Z6YXk1a2RYSmhkR2x2YmlsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWEprTG05dUtDZGpiR2xqYXljc0lDaGxLU0E5UGlCN0lIUm9hWE11YzJWMGRHbHVaM011YjI1RGJHbGpheUFtSmlCMGFHbHpMbk5sZEhScGJtZHpMbTl1UTJ4cFkyc29aU3dnZEdGemF5a2dmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05oY21RdVlYQndaVzVrS0dsdWJtVnlRMjl1ZEdWdWRDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVoY0hCbGJtUlVieWh3YkdGalpXaHZiR1JsY2lrN1hISmNiaUFnSUNBZ0lDQWdmU3dnZEdocGN5azdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnWVhCd1pXNWtRWFpoYVd4aFlteGxTVzUwWlhKMllXd29jR3hoWTJWb2IyeGtaWElzSUdsdWRHVnlkbUZzY3l3Z1kyOXNkVzF1S1NCN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHbDJJRDBnSkNnblBHUnBkajQ4TDJScGRqNG5LVHRjY2x4dUlDQWdJQ0FnSUNCcGJuUmxjblpoYkhNdVptOXlSV0ZqYUNnb2FXNTBaWEoyWVd3c0lHbHVaR1Y0S1NBOVBpQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdsdWJtVnlRMjl1ZEdWdWRDQTlJR1JwZGk1amJHOXVaU2dwTG5SbGVIUW9KMDV2ZENCaGJHeHZZMkYwWldRbktUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5d0lEMGdkR2hwY3k1blpYUkRZWEprVkc5d1VHOXphWFJwYjI0b2FXNTBaWEoyWVd3dWMzUmhjblFwSUNzZ01qdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkhWeVlYUnBiMjRnUFNCMGFHbHpMbkJoY25ObFZHbHRaU2hwYm5SbGNuWmhiQzVsYm1RcElDMGdkR2hwY3k1d1lYSnpaVlJwYldVb2FXNTBaWEoyWVd3dWMzUmhjblFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm9aV2xuYUhRZ1BTQjBhR2x6TG1kbGRFTmhjbVJJWldsbmFIUW9aSFZ5WVhScGIyNHBJQzBnTlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOclNYUmxiVWhwWjJoMGJHbG5hSFJFYVhZZ1BTQmthWFl1WTJ4dmJtVW9LVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1Ga1pFTnNZWE56S0NkemFTMW9hV2RvYkdsbmFIUXRhWFJsYlNjcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVhR2xrWlNncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1kyRnlaQ0E5SUdScGRpNWpiRzl1WlNncFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVZWFIwY2loN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSNWJHVTZJQ2QwYjNBNklDY2dLeUIwYjNBZ0t5QW5jSGc3SUdobGFXZG9kRG9nSnlBcklHaGxhV2RvZENBcklDZHdlQ2RjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ5WkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0xtUmhkR0VvSjJOdmJIVnRiaWNzSUdOdmJIVnRiaWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1a1lYUmhLQ2RwZEdWdExXbHVaR1Y0Snl3Z2FXNWtaWGdwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVlYQndaVzVrS0dsdWJtVnlRMjl1ZEdWdWRDbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVoY0hCbGJtUW9jMnRKZEdWdFNHbG5hSFJzYVdkb2RFUnBkaWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aGNIQmxibVJVYnlod2JHRmpaV2h2YkdSbGNpazdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIMHNJSFJvYVhNcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJRzl1VUc5cGJuUmxjbFZ3S0dWMlpXNTBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRzl3SUQwZ2RHaHBjeTV2Y0dWeVlYUnBiMjQ3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtOXdaWEpoZEdsdmJpa2dleUJ5WlhSMWNtNDdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k0a2IzZHVaWEpFYjJOMWJXVnVkQzV2Wm1Zb0oyMXZkWE5sZFhBbktUdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxpUnZkMjVsY2tSdlkzVnRaVzUwTG05bVppZ25iVzkxYzJWdGIzWmxKeWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWIzQmxjbUYwYVc5dUlEMGdiblZzYkR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnZibEJ2YVc1MFpYSk5iM1psS0dWMlpXNTBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJRzl3SUQwZ2RHaHBjeTV2Y0dWeVlYUnBiMjQ3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtOXdaWEpoZEdsdmJpa2dleUJ5WlhSMWNtNDdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnUkdWMFpYSnRhVzVsSUhSb1pTQmtaV3gwWVNCamFHRnVaMlVnWW1WMGQyVmxiaUJ6ZEdGeWRDQmhibVFnYm1WM0lHMXZkWE5sSUhCdmMybDBhVzl1TENCaGN5QmhJSEJsY21ObGJuUmhaMlVnYjJZZ2RHaGxJSFJoWW14bElIZHBaSFJvWEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1JwWm1abGNtVnVZMlVnUFNBb1pYWmxiblF1Y0dGblpWZ2dMU0J2Y0M1emRHRnlkRmdwT3k4dklDOGdkR2hwY3k0a2MyTm9aV1IxYkdWRmJDNTNhV1IwYUNncElDb2dNVEF3TzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrYVdabVpYSmxibU5sSUQwOVBTQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCamIyeDFiVzVPZFcxaVpYSWdQU0J2Y0M1amIyeDFiVzVPZFcxaVpYSTdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElIZHBaSFJvSUQwZ2IzQXVkMmxrZEdnZ0t5QmthV1ptWlhKbGJtTmxPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWEJrWVhSbFEyOXNkVzF1VjJsa2RHZ29ZMjlzZFcxdVRuVnRZbVZ5TENCM2FXUjBhQzUwYjBacGVHVmtLRElwS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnZibEJ2YVc1MFpYSkViM2R1S0dWMlpXNTBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OGdUMjVzZVNCaGNIQnNhV1Z6SUhSdklHeGxablF0WTJ4cFkyc2daSEpoWjJkcGJtZGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pYWmxiblF1ZDJocFkyZ2dJVDA5SURFcElIc2djbVYwZFhKdU95QjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJRWxtSUdFZ2NISmxkbWx2ZFhNZ2RHaHBjeTV2Y0dWeVlYUnBiMjRnYVhNZ1pHVm1hVzVsWkN3Z2QyVWdiV2x6YzJWa0lIUm9aU0JzWVhOMElHMXZkWE5sZFhBdVhISmNiaUFnSUNBZ0lDQWdMeThnVUhKdlltRmliSGtnWjI5aVlteGxaQ0IxY0NCaWVTQjFjMlZ5SUcxdmRYTnBibWNnYjNWMElIUm9aU0IzYVc1a2IzY2dkR2hsYmlCeVpXeGxZWE5wYm1jdVhISmNiaUFnSUNBZ0lDQWdMeThnVjJVbmJHd2djMmx0ZFd4aGRHVWdZU0J3YjJsdWRHVnlkWEFnYUdWeVpTQndjbWx2Y2lCMGJ5QnBkRnh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d1pYSmhkR2x2YmlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VUc5cGJuUmxjbFZ3S0dWMlpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUd4bGRDQWtZM1Z5Y21WdWRFZHlhWEFnUFNBa0tHVjJaVzUwTG1OMWNuSmxiblJVWVhKblpYUXBPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmpiMngxYlc1T2RXMWlaWElnUFNBa1kzVnljbVZ1ZEVkeWFYQXVaR0YwWVNnblkyOXNkVzF1TFdsa0p5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JuY21sd1NXNWtaWGdnUFNBa1kzVnljbVZ1ZEVkeWFYQXVhVzVrWlhnb0tUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ0pHeGxablJEYjJ4MWJXNGdQU0IwYUdsekxpUm9aV0ZrWlhKRGIyNTBZV2x1WlhJdVptbHVaQ2duWkdsMkp5a3VaWEVvWjNKcGNFbHVaR1Y0S1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHeGxablJYYVdSMGFDQTlJQ1JzWldaMFEyOXNkVzF1V3pCZExtTnNhV1Z1ZEZkcFpIUm9PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG05d1pYSmhkR2x2YmlBOUlIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXNkVzF1VG5WdFltVnlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEZnNklHVjJaVzUwTG5CaFoyVllMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhV1IwYURvZ2JHVm1kRmRwWkhSb1hISmNiaUFnSUNBZ0lDQWdmVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k0a2IzZHVaWEpFYjJOMWJXVnVkQzV2YmlnbmJXOTFjMlZ0YjNabEp5d2dkR2hwY3k1dmJsQnZhVzUwWlhKTmIzWmxMbUpwYm1Rb2RHaHBjeWtwTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Skc5M2JtVnlSRzlqZFcxbGJuUXViMjRvSjIxdmRYTmxkWEFuTENCMGFHbHpMbTl1VUc5cGJuUmxjbFZ3TG1KcGJtUW9kR2hwY3lrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbGRtVnVkQzV3Y21WMlpXNTBSR1ZtWVhWc2RDZ3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhWd1pHRjBaVU52YkhWdGJsZHBaSFJvS0dOdmJIVnRiazUxYldKbGNpd2dkMmxrZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0IzYVdSMGFDQTlJRTFoZEdndWJXRjRLSGRwWkhSb0xDQjBhR2x6TG5ObGRIUnBibWR6TG0xcGJrTnZiSFZ0YmxkcFpIUm9LVHRjY2x4dUlDQWdJQ0FnSUNBa0tDY3VKeUFySUhSb2FYTXVjMlYwZEdsdVozTXVhR1ZoWkdWeVEyOXVkR0ZwYm1WeVEzTnpRMnhoYzNNZ0t5QW5JRDRnWkdsMk9tVnhLQ2NnS3lCamIyeDFiVzVPZFcxaVpYSWdLeUFuS1NjcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUM1amMzTW9KMlpzWlhndFltRnphWE1uTENCM2FXUjBhQ0FySUNkd2VDY3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWTI5c2RXMXVJRDBnSkNnbkxpY2dLeUIwYUdsekxuTmxkSFJwYm1kekxuTmphR1ZrZFd4bGNrTnZiblJoYVc1bGNrTnpjME5zWVhOeklDc2dKeTFpYjJSNUlENGdaR2wyT21WeEtDY2dLeUJqYjJ4MWJXNU9kVzFpWlhJZ0t5QW5LU0ErSUM0bklDc2dkR2hwY3k1elpYUjBhVzVuY3k1alpXeHNRM056UTJ4aGMzTXBPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmthV1ptSUQwZ1kyOXNkVzF1TG5kcFpIUm9LQ2tnTFNCM2FXUjBhRHRjY2x4dUlDQWdJQ0FnSUNCamIyeDFiVzR1ZDJsa2RHZ29kMmxrZEdncE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBa0tDY3VKeUFySUhSb2FYTXVjMlYwZEdsdVozTXVjbVZ6YVhwaFlteGxTR0Z1Wkd4bGNrTnpjME5zWVhOeklDc2dKeUErSUdScGRpY3BMbVZoWTJnb0tHbHVaR1Y0TENCbGJDa2dQVDRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FXNWtaWGdnUGowZ1kyOXNkVzF1VG5WdFltVnlLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdKR1ZzSUQwZ0pDaGxiQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiR1ZtZENBOUlIQmhjbk5sU1c1MEtDUmxiQzVqYzNNb0oyeGxablFuS1M1eVpYQnNZV05sS0Nkd2VDY3NJQ2NuS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWtaV3d1WTNOektDZHNaV1owSnl3Z2JHVm1kQ0F0SUdScFptWXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElGTnJaV1IxYkdWeU8xeHlYRzRpTENKamIyNXpkQ0JqYjIxd2FXeGxWR1Z0Y0d4aGRHVWdQU0FvZEdWdGNHeGhkR1VzSUdaMWJtTnpLU0E5UGlCcGRHVnRJRDArSUh0Y2NseHVJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQjBaVzF3YkdGMFpUdGNjbHh1SUNBZ0lHTnZibk4wSUhKbFowdGxlWE1nUFNBdlhGd2tYRng3S0Z4Y2R5c3BYRng5TDJjN1hISmNiaUFnSUNCamIyNXpkQ0J5WldkR2RXNWpjeUE5SUM5Y1hDUmNYSHNvWEZ4M0t5bGNYQ2hjWENsY1hIMHZaenRjY2x4dVhISmNiaUFnSUNCc1pYUWdiV0YwWTJnZ1BTQXhPMXh5WEc0Z0lDQWdkMmhwYkdVZ0tIUnlkV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQnRZWFJqYUNBOUlISmxaMHRsZVhNdVpYaGxZeWgwWlcxd2JHRjBaU2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z0WVhSamFDa2dZbkpsWVdzN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnJaWGtnUFNCdFlYUmphRnN4WFR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYVhSbGJTNW9ZWE5QZDI1UWNtOXdaWEowZVNoclpYa3BLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJSEpsYzNWc2RDNXlaWEJzWVdObEtHMWhkR05vV3pCZExDQnBkR1Z0VzJ0bGVWMHBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjNhR2xzWlNBb1puVnVZM01wSUh0Y2NseHVJQ0FnSUNBZ0lDQnRZWFJqYUNBOUlISmxaMFoxYm1OekxtVjRaV01vZEdWdGNHeGhkR1VwTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYldGMFkyZ3BJR0p5WldGck8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdhMlY1SUQwZ2JXRjBZMmhiTVYwN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0daMWJtTnpMbWhoYzA5M2JsQnliM0JsY25SNUtHdGxlU2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJRDBnY21WemRXeDBMbkpsY0d4aFkyVW9iV0YwWTJoYk1GMHNJR1oxYm1OelcydGxlVjBvYVhSbGJTa3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN0lHTnZiWEJwYkdWVVpXMXdiR0YwWlNCOU95SmRmUT09In0=

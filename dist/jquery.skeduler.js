/**
 * jquery-skeduler - This is jQuery plugin which provider you simple scheduler with some items on OX and 24-hours timeline on OY.
 * @date Wed Aug 30 2017 22:26:23 GMT+1000 (+10)
 * @version v0.2.0-beta.0
 * @link 
 * @license ISC
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

/**
 * Generate scheduler grid with task cards
 * options:
 * - headers: string[] - array of headers
 * - tasks: Task[] - array of tasks
 * - containerCssClass: string - css class of main container
 * - headerContainerCssClass: string - css class of header container
 * - schedulerContainerCssClass: string - css class of scheduler
 * - lineHeight - height of one half-hour cell in grid
 * - borderWidth - width of border of cell in grid
 */
$.fn.skeduler = function (options) {
  var $container = $(this);
  var skeduler = new _skeduler2['default']($container, options);

  return skeduler;
};

$.skeduler = _skeduler2['default'];

},{"./skeduler":5}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

var _adapter = require('./adapter');

var _adapter2 = _interopRequireDefault(_adapter);

exports['default'] = _skeduler2['default'];
module.exports = exports['default'];

},{"./adapter":1,"./skeduler":5}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _template = require('../template');

var _utils = require('../utils');

var div = function div(cssClass) {
    return $('<div></div>').addClass(cssClass);
};

var getItemDivs = function getItemDivs(settings) {
    var $div = div(settings.itemsOptions.itemCardCssClass);
    var items = settings.items;
    var template = (0, _template.compileTemplate)(settings.itemsOptions.itemCardTemplate, {
        time: function time(item) {
            return item.interval ? item.interval.start + ' to ' + item.interval.end : '';
        }
    });

    return items.map(function (item) {
        return $div.clone().data('index', item.index).html(template(item));
    });
};

var findStartTime = function findStartTime(rowIndex, rowsPerHour, interval) {
    rowIndex = Math.max(0, rowIndex);
    var hoursFromTop = rowIndex / rowsPerHour;

    return (0, _utils.toTime)(hoursFromTop + (0, _utils.parseTime)(interval.start));
};

var populateSkedulerItems = function populateSkedulerItems(settings) {
    var getItem = function getItem(index, isAssigned) {
        return isAssigned ? settings.tasks.filter(function (t) {
            return t.item.index === index;
        })[0].item : settings.items.filter(function (i) {
            return i.index === index;
        })[0];
    };

    var $skedulerItemsEl = $(settings.itemsOptions.containerSelector).empty().addClass(settings.itemsOptions.itemsCssClass);
    var $ownerDocument = $($skedulerItemsEl[0].ownerDocument);
    var $shifts = $('.' + settings.availableIntervalPlaceholderCssClass + ' > div');

    var $headerDiv = div().html('<h1 class="si-header">' + settings.itemsOptions.title + '</h1>').appendTo($skedulerItemsEl);

    var $skedulerItemsContainerEl = div('si-container');
    var $items = getItemDivs(settings);
    $items.forEach(function (el) {
        $skedulerItemsContainerEl.append(el);
    });
    $skedulerItemsContainerEl.appendTo($skedulerItemsEl);

    var operation = null;
    var conflictedTasks = [];

    var mouseUp = function mouseUp(event) {
        if (operation == null) return;

        var _operation = operation;
        var $movingCard = _operation.$movingCard;
        var $card = _operation.$card;
        var startTime = _operation.startTime;

        var $siEl = $('.' + settings.itemsOptions.highlightItemCss + ':visible'); // fixme

        var index = parseInt($movingCard.data('index'));
        var isAssigned = !!$movingCard.data('assigned');
        var item = getItem(index, isAssigned);

        if ($skedulerItemsContainerEl.data('selected') == 1) {
            // Item need to be unassigned

            if (isAssigned) {
                settings.tasks = settings.tasks.filter(function (t) {
                    return t.item.index != index;
                });
                settings.items.push(item);

                settings.itemsOptions.onItemWillBeUnassigned && settings.itemsOptions.onItemWillBeUnassigned({ item: item });
            }

            $movingCard.detach().css({ top: 'auto', left: 'auto' }).height('auto').width('auto').data('assigned', 0).removeClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($skedulerItemsContainerEl);

            $movingCard.on('mousedown', mouseDown);
            $card.remove();

            if (isAssigned) {
                settings.itemsOptions.onItemDidUnassigned && settings.itemsOptions.onItemDidUnassigned({ item: item });
            }
        } else if ($siEl.length !== 0 && $siEl.data('match') == 1) {

            // Item need to be assigned
            var rowHeight = settings.lineHeight + 1;
            var column = parseInt($siEl.parent().data('column'));
            var offsetInMinutes = (0, _utils.parseTime)(startTime) * 60;

            var interval = settings.data[column].availableIntervals[$siEl.parent().data('item-index')];

            settings.itemsOptions.onItemWillBeAssigned && settings.itemsOptions.onItemWillBeAssigned({ item: item, interval: interval, offsetInMinutes: offsetInMinutes });
            var $el = $movingCard.detach().css({ top: $siEl[0].offsetTop, left: 0 }).height($siEl[0].clientHeight).width('auto').data('assigned', 1).removeClass(settings.itemsOptions.itemCardCssClass + '-moving').addClass(settings.itemsOptions.itemCardCssClass + '-pinned').appendTo($siEl.parent());

            $movingCard.on('mousedown', mouseDown);
            $card.remove();

            if (!isAssigned) {
                settings.tasks.push({
                    $el: $el,
                    column: column,
                    start: startTime,
                    item: item
                });
            } else {
                var task = settings.tasks.find(function (t) {
                    return t.item.index === index;
                });
                task.start = startTime;
                task.column = column;
                task.$el = $el;
            }

            settings.itemsOptions.onItemDidAssigned && settings.itemsOptions.onItemDidAssigned({ item: item, interval: interval, offsetInMinutes: offsetInMinutes });
        } else {
            $movingCard.remove();
            $card.show();

            // Porcess conflictedTasks
            $('.conflicted').removeClass('conflicted');
            conflictedTasks = conflictedTasks.filter(function (p) {
                return p.f != index && p.s != index;
            });
            conflictedTasks.forEach(function (p) {
                var f = settings.tasks.find(function (t) {
                    return t.item.index == p.f;
                });
                var s = settings.tasks.find(function (t) {
                    return t.item.index == p.s;
                });

                f && f.$el.addClass('conflicted');
                s && s.$el.addClass('conflicted');

                if (p.f == index || p.s == index) {
                    $movingCard.addClass('conflicted');
                }
            });
        }

        $('.' + settings.itemsOptions.highlightItemCss).hide();
        $skedulerItemsContainerEl.removeClass('highlighted');
        $skedulerItemsContainerEl.data('selected', 0);

        operation = null;
        $ownerDocument.off('mousemove', mouseMove);
        $ownerDocument.off('mouseup', mouseUp);
    };

    var mouseMove = function mouseMove(event) {
        if (operation == null) return;

        var _operation2 = operation;
        var $movingCard = _operation2.$movingCard;
        var offsetX = _operation2.offsetX;
        var offsetY = _operation2.offsetY;

        var newOffsetX = event.pageX - offsetX,
            newOffsetY = event.pageY - offsetY;

        $movingCard.css({
            top: newOffsetY + 'px',
            left: newOffsetX + 'px'
        });

        // Higlight shifts
        var _window = $ownerDocument[0].defaultView;
        var x = event.pageX;
        var y = event.pageY - _window.scrollY;

        var rowHeight = settings.lineHeight + 1;
        var rowsPerHour = settings.rowsPerHour;

        var index = parseInt($movingCard.data('index'));
        var isAssigned = !!$movingCard.data('assigned');
        var item = getItem(index, isAssigned);
        var duration = item.duration;
        var height = duration * (rowHeight * rowsPerHour / 60);

        $skedulerItemsContainerEl.each(function () {
            var $this = $(this);
            var elementBounding = this.getBoundingClientRect();

            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {
                $this.addClass('highlighted');
                $skedulerItemsContainerEl.data('selected', 1);
            } else {
                $this.removeClass('highlighted');
                $skedulerItemsContainerEl.data('selected', 0);
            }
        });

        var column = null;
        $shifts.each(function () {
            var $shift = $(this);
            var elementBounding = this.getBoundingClientRect();
            var $matchingAreaEl = $shift.find('.' + settings.itemsOptions.highlightItemCss);

            if (x > elementBounding.left && x < elementBounding.right && y > elementBounding.top && y < elementBounding.bottom) {

                var offsetTop = y - elementBounding.top;
                var rowIndex = Math.floor(offsetTop / rowHeight) - 1;
                var _top = Math.min(Math.max(0, rowIndex * rowHeight), this.clientHeight - height);

                column = +$shift.data('column');
                var itemIndex = +$shift.data('item-index');
                var offsetInMinutes = 60 / settings.rowsPerHour * (_top / rowHeight); // <<== FIXME
                var interval = settings.data[column].availableIntervals[itemIndex];
                var matchResult = settings.itemsOptions.matchFunc(item, interval, offsetInMinutes);

                operation.startTime = findStartTime(rowIndex, rowsPerHour, interval);

                $matchingAreaEl.css({ top: _top }).css('background-color', matchResult.color).height(height).show();

                $matchingAreaEl.data('match', +matchResult.match);
            } else {
                $matchingAreaEl.data('match', 0);
                $matchingAreaEl.hide();
            }
        });

        settings.tasks.filter(function (t) {
            return t.item.index != index;
        }).forEach(function (t) {
            var taskStart = (0, _utils.parseTime)(t.start);
            var movingTaskStart = (0, _utils.parseTime)(operation.startTime);
            var $cardByIndex = t.$el;

            // if moving card are conflict with some assigned card in the current shift
            var conflictedTaskPair = conflictedTasks.find(function (p) {
                return p.f == index && p.s == t.item.index || p.s == index && p.f == t.item.index;
            });
            if (column !== null && t.column === column && !(taskStart >= movingTaskStart + item.duration / 60) && !(taskStart + t.item.duration / 60 <= movingTaskStart)) {

                if (!conflictedTaskPair) {
                    conflictedTasks.push({ f: index, s: t.item.index });
                }
            } else {
                if (conflictedTaskPair) {
                    conflictedTasks = conflictedTasks.filter(function (p) {
                        return p.f != conflictedTaskPair.f && p.s != conflictedTaskPair.s;
                    });
                }
            }
        });

        // Porcess conflictedTasks
        $('.conflicted').removeClass('conflicted');
        conflictedTasks.forEach(function (p) {
            var f = settings.tasks.find(function (t) {
                return t.item.index == p.f;
            });
            var s = settings.tasks.find(function (t) {
                return t.item.index == p.s;
            });

            f && f.$el.addClass('conflicted');
            s && s.$el.addClass('conflicted');

            if (p.f === index || p.s === index) {
                $movingCard.addClass('conflicted');
            }
        });
    };

    var mouseDown = function mouseDown(event /*: MouseEvent */) {
        if (event.which !== 1) {
            return;
        }

        var $skedulerWrapper = $('.' + settings.skedulerWrapperCssClass);
        var $card = $(event.currentTarget);

        var $movingCard = $card.clone().data('index', $card.data('index')).data('assigned', $card.data('assigned')).addClass(settings.itemsOptions.itemCardCssClass + '-moving').removeClass(settings.itemsOptions.itemCardCssClass + '-pinned').width($card.width()).appendTo($skedulerWrapper);

        //var bounce = $card[0].getBoundingClientRect();
        // fixme ^^^
        var offsetX = event.pageX - event.offsetX,
            offsetY = event.pageY - event.offsetY;

        $movingCard.css({
            top: offsetY + 'px',
            left: offsetX + 'px'
        });

        operation = {
            $card: $card,
            $movingCard: $movingCard,
            offsetX: event.offsetX,
            offsetY: event.offsetY
        };

        var index = parseInt($card.data('index'));
        var isAssigned = !!$movingCard.data('assigned');
        var item = getItem(index, isAssigned);

        $card.hide();

        $ownerDocument.on('mousemove', mouseMove);
        $ownerDocument.on('mouseup', mouseUp);

        event.preventDefault();
    };

    $('.' + settings.itemsOptions.itemCardCssClass).on('mousedown', mouseDown);
};

exports['default'] = populateSkedulerItems;
module.exports = exports['default'];

},{"../template":6,"../utils":7}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var _arguments = arguments;
var defaultSettings = {
    // Data attributes
    headers: null, // string[] - Array of column headers
    tasks: [], // Task[] - Array of tasks. Required fields:
    // id: number, startTime: number, duration: number, column: number

    items: [], // Item[] - Array of not-assingned tasks

    notAllocatedLabel: 'Not allocated',

    // Card template - Inner content of task card.
    // You're able to use ${key} inside template, where key is any property from task.
    cardTemplate: '<div>${id}</div>',

    // Css classes
    skedulerWrapperCssClass: 'skeduler-wrapper',
    containerCssClass: 'skeduler-container',
    headerContainerCssClass: 'skeduler-headers',
    schedulerContainerCssClass: 'skeduler-main',
    taskPlaceholderCssClass: 'skeduler-task-placeholder',
    availableIntervalPlaceholderCssClass: 'skeduler-interval-placeholder',
    cellCssClass: 'skeduler-cell',
    resizableHandlerCssClass: 'resizable-handler',
    resizableSliderCssClass: 'resizable-slider',

    lineHeight: 30, // height of one line in grid
    borderWidth: 1, // width of board of grid cell
    columnWidth: 200,
    minColumnWidth: 100,

    rowsPerHour: 2, // count of rows for one hour

    columnResizeEnabled: true, // is columns resizable

    debug: false,

    itemsOptions: {
        enabled: false,
        itemsCssClass: 'skeduler-items',
        highlightItemCss: 'si-highlight-item',
        containerSelector: "#skeduler-items",
        itemCardCssClass: 'si-card',
        itemCardTemplate: '<div>${duration}</div>',
        title: 'Items',
        onItemWillBeAssigned: function onItemWillBeAssigned() {
            console.log(_arguments);
        },
        onItemDidAssigned: function onItemDidAssigned() {
            console.log(_arguments);
        },
        onItemWillBeUnassigned: function onItemWillBeUnassigned() {
            console.log(_arguments);
        },
        onItemDidUnassigned: function onItemDidUnassigned() {
            console.log(_arguments);
        },
        matchFunc: function matchFunc() {
            return { match: true };
        }
    }
};

exports.defaultSettings = defaultSettings;

},{}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _settings = require('./settings');

var _items = require('./items');

var _items2 = _interopRequireDefault(_items);

var _template = require('./template');

var _utils = require('./utils');

var div = function div(cssClass) {
    return $('<div></div>').addClass(cssClass);
};

var Skeduler = (function () {
    function Skeduler($container, options) {
        _classCallCheck(this, Skeduler);

        this.settings = $.extend(true, _settings.defaultSettings, options);
        this.$container = $container;
        this.$ownerDocument = $($container[0].ownerDocument);
        this.$headerContainer = null;
        this.$scheduleEl = null;
        this.operation = null;
        this.resizeAllColumns = true;

        if (this.settings.debug) {
            console.time('skeduler');
        }

        this.refresh();

        if (this.settings.debug) {
            console.timeEnd('skeduler');
        }
    }

    _createClass(Skeduler, [{
        key: 'setRowsPerHour',
        value: function setRowsPerHour(rowsPerHour) {
            this.settings.rowsPerHour = rowsPerHour;
            this.refresh();
        }
    }, {
        key: 'setResizeAllColumns',
        value: function setResizeAllColumns(resizeAllColumns) {
            this.resizeAllColumns = resizeAllColumns;
        }
    }, {
        key: 'refresh',
        value: function refresh() {
            var _this = this;

            this.settings.items = this.settings.items && this.settings.items.map(function (item, index) {
                return Object.assign({}, { index: index }, item);
            }) || [];
            this.settings.tasks = this.settings.tasks && this.settings.tasks.map(function (task, index) {
                task.item = Object.assign({}, { index: index + _this.settings.items.length }, task.item);
                return task;
            }) || [];

            this.populate();
            if (this.settings.itemsOptions.enabled) {
                (0, _items2['default'])(this.settings);
            }
        }
    }, {
        key: 'populate',
        value: function populate() {
            var _this2 = this;

            this.$container.empty();
            this.$container.addClass(this.settings.containerCssClass);

            var headers = this.settings.headers ? this.settings.headers : this.settings.data.map(this.settings.getHeader);

            // Add headers
            this.$headerContainer = div(this.settings.headerContainerCssClass);
            headers.forEach(function (element) {
                div().text(element).appendTo(_this2.$headerContainer);
            }, this);
            this.$container.append(this.$headerContainer);

            // Add scheduler
            this.$scheduleEl = div(this.settings.schedulerContainerCssClass);
            var scheduleTimelineEl = div(this.settings.schedulerContainerCssClass + '-timeline');
            var scheduleBodyEl = div(this.settings.schedulerContainerCssClass + '-body');

            var gridColumnElement = div();

            for (var i = 0; i < 24; i++) {
                // Populate timeline
                for (var j = 0; j < this.settings.rowsPerHour; j++) {
                    var timelineCell = div().height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "");

                    if (j == 0) {
                        timelineCell = timelineCell.css("line-height", this.settings.lineHeight + 'px').text(j == 0 ? this.toTimeString(i) : "");
                    }
                    timelineCell.appendTo(scheduleTimelineEl);

                    div(this.settings.cellCssClass).height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "").appendTo(gridColumnElement);
                }
            }

            // Populate grid
            for (var j = 0; j < headers.length; j++) {
                var el = gridColumnElement.clone();

                // fixme [availableIntervals must not use index]
                var availableIntervalsPlaceholder = div(this.settings.availableIntervalPlaceholderCssClass);
                var intervals = this.settings.data[j].availableIntervals;
                this.appendAvailableInterval(availableIntervalsPlaceholder, intervals, j);

                el.prepend(availableIntervalsPlaceholder);
                el.appendTo(scheduleBodyEl);

                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            this.$scheduleEl.append(scheduleTimelineEl);
            this.$scheduleEl.append(scheduleBodyEl);

            this.$container.append(this.$scheduleEl);

            // Set default width for columns
            for (var j = 0; j < headers.length; j++) {
                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            // Configure resizing
            if (this.settings.columnResizeEnabled) {
                this.configureResizing();
            }
        }
    }, {
        key: 'tasks',
        value: function tasks() {
            return this.settings.tasks;
        }
    }, {
        key: 'configureResizing',
        value: function configureResizing() {
            var _this3 = this;

            var skedulerElResizableHandler = div(this.settings.resizableHandlerCssClass);

            this.$container.prepend(skedulerElResizableHandler);

            skedulerElResizableHandler.width(this.$container.width());

            var resizableSliderHeight = this.$scheduleEl.height() + this.$headerContainer.height();
            var index = 0;
            this.$headerContainer.find('div').each(function (_, el) {
                div(_this3.settings.resizableSliderCssClass).css('left', el.offsetLeft + el.clientWidth).height(resizableSliderHeight).data('column-id', index++).appendTo(skedulerElResizableHandler);
            });

            skedulerElResizableHandler.on('mousedown', '.' + this.settings.resizableSliderCssClass, this.onResizePointerDown.bind(this));
        }
    }, {
        key: 'appendAvailableInterval',
        value: function appendAvailableInterval(placeholder, intervals, column) {
            var _this4 = this;

            intervals.forEach(function (interval, index) {
                var innerContent = div().text(_this4.settings.notAllocatedLabel);
                var top = _this4.getCardTopPosition(interval.start) + 2;
                var duration = (0, _utils.parseTime)(interval.end) - (0, _utils.parseTime)(interval.start);
                var height = _this4.getCardHeight(duration) - 5;

                var skItemHightlightDiv = div(_this4.settings.itemsOptions.highlightItemCss).hide();

                var shiftDiv = div().attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px'
                });

                shiftDiv.data('column', column).data('item-index', index).append(innerContent).append(skItemHightlightDiv).appendTo(placeholder);

                _this4.appendTasks(shiftDiv, interval.start, _this4.settings.tasks.filter(function (t) {
                    return t.column == column;
                }));
                // TODO: ^^^ filter by shift interval too
            }, this);
        }

        /** 
         * Generate task cards
         */
    }, {
        key: 'appendTasks',
        value: function appendTasks(placeholder, intervalStart, tasks) {
            var _this5 = this;

            tasks.forEach(function (task) {
                var top = _this5.getCardTopPosition(task.start, intervalStart);
                var height = _this5.getCardHeight(task.item.duration / 60);

                task.$el = _this5.getItemDiv(task.item).attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px'
                }).addClass('' + _this5.settings.itemsOptions.itemCardCssClass).addClass(_this5.settings.itemsOptions.itemCardCssClass + '-pinned').width('auto').data('index', task.item.index).data('assigned', 1).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'onResizePointerUp',
        value: function onResizePointerUp(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            this.$ownerDocument.off('mouseup');
            this.$ownerDocument.off('mousemove');

            this.operation = null;
        }
    }, {
        key: 'onResizePointerMove',
        value: function onResizePointerMove(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            // Determine the delta change between start and new mouse position, as a percentage of the table width
            var difference = event.pageX - op.startX; // / this.$scheduleEl.width() * 100;
            if (difference === 0) {
                return;
            }

            var columnNumber = op.columnNumber;
            var width = op.width + difference;
            if (this.resizeAllColumns) {
                for (var i = 0; i < this.settings.data.length; i++) {
                    this.updateColumnWidth(i, width.toFixed(2));
                }
            } else {
                this.updateColumnWidth(columnNumber, width.toFixed(2));
            }
        }
    }, {
        key: 'onResizePointerDown',
        value: function onResizePointerDown(event) {
            // Only applies to left-click dragging
            if (event.which !== 1) {
                return;
            }

            // If a previous this.operation is defined, we missed the last mouseup.
            // Probably gobbled up by user mousing out the window then releasing.
            // We'll simulate a pointerup here prior to it
            if (this.operation) {
                this.Resize(event);
            }

            var $currentGrip = $(event.currentTarget);
            var columnNumber = $currentGrip.data('column-id');

            var gripIndex = $currentGrip.index();
            var $leftColumn = this.$headerContainer.find('div').eq(gripIndex);

            var leftWidth = $leftColumn[0].clientWidth;

            this.operation = {
                columnNumber: columnNumber,
                startX: event.pageX,
                width: leftWidth
            };

            this.$ownerDocument.on('mousemove', this.onResizePointerMove.bind(this));
            this.$ownerDocument.on('mouseup', this.Resize.bind(this));

            event.preventDefault();
        }
    }, {
        key: 'updateColumnWidth',
        value: function updateColumnWidth(columnNumber, width) {
            width = Math.max(width, this.settings.minColumnWidth);
            $('.' + this.settings.headerContainerCssClass + ' > div:eq(' + columnNumber + ')').css('flex-basis', width + 'px');

            var column = $('.' + this.settings.schedulerContainerCssClass + '-body > div:eq(' + columnNumber + ') > .' + this.settings.cellCssClass);
            var diff = column.width() - width;
            column.width(width);

            $('.' + this.settings.resizableHandlerCssClass + ' > div').each(function (index, el) {
                if (index >= columnNumber) {
                    var $el = $(el);
                    var left = parseInt($el.css('left').replace('px', ''));
                    $el.css('left', left - diff);
                }
            });
        }
    }, {
        key: 'getItemDiv',
        value: function getItemDiv(item) {
            var $div = div(this.settings.itemsOptions.itemCardCssClass);
            var template = (0, _template.compileTemplate)(this.settings.itemsOptions.itemCardTemplate, {
                time: function time(item) {
                    return item.interval ? item.interval.start + ' to ' + item.interval.end : '';
                }
            });

            return div().html(template(item));
        }

        /**
        * Convert double value of hours to zero-preposited string with 30 or 00 value of minutes
        */
    }, {
        key: 'toTimeString',
        value: function toTimeString(value) {
            return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');
        }

        /**
         * Return height of task card based on duration of the task
         * duration - in hours
         */
    }, {
        key: 'getCardHeight',
        value: function getCardHeight(duration) {
            var durationInMinutes = duration * 60;
            var heightOfMinute = (this.settings.lineHeight + this.settings.borderWidth) * this.settings.rowsPerHour / 60;
            return Math.ceil(durationInMinutes * heightOfMinute);
        }

        /**
         * Return top offset of task card based on start time of the task
         * startTime - in hours
         */
    }, {
        key: 'getCardTopPosition',
        value: function getCardTopPosition(startTime, offsetTime) {
            var startTimeInt = (0, _utils.parseTime)(startTime);
            if (offsetTime) {
                startTimeInt -= (0, _utils.parseTime)(offsetTime);
            }
            return (this.settings.lineHeight + this.settings.borderWidth) * (startTimeInt * this.settings.rowsPerHour);
        }
    }]);

    return Skeduler;
})();

exports['default'] = Skeduler;
module.exports = exports['default'];

},{"./items":3,"./settings":4,"./template":6,"./utils":7}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var compileTemplate = function compileTemplate(template, funcs) {
    return function (item) {
        var result = template;
        var regKeys = /\$\{(\w+)\}/g;
        var regFuncs = /\$\{(\w+)\(\)\}/g;

        var match = 1;
        while (true) {
            match = regKeys.exec(template);
            if (!match) break;

            var key = match[1];
            if (item.hasOwnProperty(key)) {
                result = result.replace(match[0], item[key]);
            }
        }

        while (funcs) {
            match = regFuncs.exec(template);
            if (!match) break;

            var key = match[1];
            if (funcs.hasOwnProperty(key)) {
                result = result.replace(match[0], funcs[key](item));
            }
        }

        return result;
    };
};

exports["default"] = { compileTemplate: compileTemplate };
module.exports = exports["default"];

},{}],7:[function(require,module,exports){
/**
 * Parse time string and present it in hours (ex. '13:30' => 13.5)
 * @param {*string} time - time in format like '13:50', '11:00', '14'
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.parseTime = parseTime;
exports.toTime = toTime;

function parseTime(time) {
    return (/\d{1,2}\:\d{2}/.test(time) ? parseInt(time.split(':')[0]) + parseInt(time.split(':')[1]) / 60 : parseInt(time)
    );
}

function toTime(value) {
    // TODO: vvv fix me
    return (value < 10 ? '0' : '') + Math.floor(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');
}

},{}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,

/**
 * jquery-skeduler - This is jQuery plugin which provider you simple scheduler with some items on OX and 24-hours timeline on OY.
 * @date Fri Jun 30 2017 00:55:48 GMT+1000 (+10)
 * @version v0.1.0-beta.0
 * @link 
 * @license ISC
 */
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

// export type Task = {
//     id: number;
//     startTime: number;
//     duration: number;
//     column: number
// }

// export type Options = {
//     headers: string[];
//     tasks: Task[];
//     containerCssClass: string;
//     headerContainerCssClass: string;
//     schedulerContainerCssClass: string;
//     lineHeight: number;
//     borderWidth: number;
// }

/**
* Generate scheduler grid with task cards
* options:
* - headers: string[] - array of headers
* - tasks: Task[] - array of tasks
* - containerCssClass: string - css class of main container
* - headerContainerCssClass: string - css class of header container
* - schedulerContainerCssClass: string - css class of scheduler
* - lineHeight - height of one half-hour cell in grid
* - borderWidth - width of border of cell in grid
*/
$.fn.skeduler = function (options) {
    return this.each(function () {
        var $container = $(this);

        var skeduler = new _skeduler2['default']($container, options);
    });
};

$.skeduler = _skeduler2['default'];

},{"./skeduler":4}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _skeduler = require('./skeduler');

var _skeduler2 = _interopRequireDefault(_skeduler);

var _adapter = require('./adapter');

var _adapter2 = _interopRequireDefault(_adapter);

exports['default'] = _skeduler2['default'];
module.exports = exports['default'];

},{"./adapter":1,"./skeduler":4}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});
var defaultSettings = {
    // Data attributes
    headers: null, // String[] - Array of column headers
    tasks: [], // Task[] - Array of tasks. Required fields:
    // id: number, startTime: number, duration: number, column: number

    // Card template - Inner content of task card.
    // You're able to use ${key} inside template, where key is any property from task.
    cardTemplate: '<div>${id}</div>',

    // OnClick event handler
    onClick: function onClick(e, task) {},

    // Css classes
    containerCssClass: 'skeduler-container',
    headerContainerCssClass: 'skeduler-headers',
    schedulerContainerCssClass: 'skeduler-main',
    taskPlaceholderCssClass: 'skeduler-task-placeholder',
    workingIntervalPlaceholderCssClass: 'skeduler-interval-placeholder',
    cellCssClass: 'skeduler-cell',
    resizableHandlerCssClass: 'resizable-handler',
    resizableSliderCssClass: 'resizable-slider',

    lineHeight: 30, // height of one line in grid
    borderWidth: 1, // width of board of grid cell
    columnWidth: 200,
    minColumnWidth: 100,

    rowsPerHour: 2, // count of rows for one hour

    columnResizeEnabled: true, // is columns resizable

    debug: true,

    itemsOptions: {
        enabled: false
    }
};

exports.defaultSettings = defaultSettings;

},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _settings = require('./settings');

var Skeduler = (function () {
    function Skeduler($container, options) {
        _classCallCheck(this, Skeduler);

        this.settings = $.extend(_settings.defaultSettings, options);
        this.$container = $container;
        this.$ownerDocument = $($container[0].ownerDocument);
        this.$headerContainer = null;
        this.$scheduleEl = null;
        this.operation = null;

        if (this.settings.debug) {
            console.time('skeduler');
        }

        this.populate($container, options);
        if (this.settings.itemsOptions.enabled) {
            this.populateSkedulerItems(this.settings.itemsOptions);
        }

        if (this.settings.debug) {
            console.timeEnd('skeduler');
        }
    }

    _createClass(Skeduler, [{
        key: 'populate',
        value: function populate() {
            var _this = this;

            this.$container.empty();
            this.$container.addClass(this.settings.containerCssClass);

            var headers = this.settings.headers ? this.settings.headers : this.settings.data.map(this.settings.getHeader);

            var div = $('<div></div>');

            // Add headers
            this.$headerContainer = div.clone().addClass(this.settings.headerContainerCssClass);
            console.log('this.$headerContainer', this.$headerContainer);
            headers.forEach(function (element) {
                div.clone().text(element).appendTo(_this.$headerContainer);
            }, this);
            this.$container.append(this.$headerContainer);

            // Add scheduler
            this.$scheduleEl = div.clone().addClass(this.settings.schedulerContainerCssClass);
            var scheduleTimelineEl = div.clone().addClass(this.settings.schedulerContainerCssClass + '-timeline');
            var scheduleBodyEl = div.clone().addClass(this.settings.schedulerContainerCssClass + '-body');

            var gridColumnElement = div.clone();

            for (var i = 0; i < 24; i++) {
                // Populate timeline
                for (var j = 0; j < this.settings.rowsPerHour; j++) {
                    var timelineCell = div.clone().height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "");

                    if (j == 0) {
                        timelineCell = timelineCell.css("line-height", this.settings.lineHeight + 'px').text(j == 0 ? this.toTimeString(i) : "");
                    }
                    timelineCell.appendTo(scheduleTimelineEl);

                    div.clone().addClass(this.settings.cellCssClass).height(this.settings.lineHeight).addClass(j == this.settings.rowsPerHour - 1 ? "last" : "").appendTo(gridColumnElement);
                }
            }

            // Populate grid
            for (var j = 0; j < headers.length; j++) {
                var el = gridColumnElement.clone();

                var tasksPlaceholder = div.clone().addClass(this.settings.taskPlaceholderCssClass);
                this.appendTasks(tasksPlaceholder, this.settings.tasks.filter(function (t) {
                    return t.column == j;
                }));

                // fixme
                var workingIntervalsPlaceholder = div.clone().addClass(this.settings.workingIntervalPlaceholderCssClass);
                var intervals = this.settings.data.find(function (d) {
                    return d.id === j + 1;
                }).workingTimeIntervals;
                this.appendAvailableInterval(workingIntervalsPlaceholder, intervals);

                el.prepend(tasksPlaceholder);
                el.prepend(workingIntervalsPlaceholder);
                el.appendTo(scheduleBodyEl);

                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            this.$scheduleEl.append(scheduleTimelineEl);
            this.$scheduleEl.append(scheduleBodyEl);

            this.$container.append(this.$scheduleEl);

            // Set default width for columns
            for (var j = 0; j < headers.length; j++) {
                this.updateColumnWidth(j, this.settings.columnWidth);
            }

            // Configure resizing
            if (this.settings.columnResizeEnabled) {
                this.configureResizing();
            }
        }
    }, {
        key: 'populateSkedulerItems',
        value: function populateSkedulerItems(options) {
            var _this2 = this;

            var $skedulerItemsEl = $(options.containerSelector);

            // TODO: Generate item's divs
            // $skedulerItemsEl.html(`
            //   <div></div>
            // `);
            var operation = null;

            var mouseUp = function mouseUp(event) {
                if (operation == null) return;

                var _operation = operation;
                var $card = _operation.$card;

                $card.css({ top: 0, left: 0 }).removeClass('si-card-moving');

                operation = null;
                _this2.$ownerDocument.off('mousemove', mouseMove);
                _this2.$ownerDocument.off('mouseup', mouseUp);

                $('.skeduler-cell').off('mousemove', cellMouseMove);
                $('.skeduler-cell').off('mouseout', cellMouseOut);
            };

            var mouseMove = function mouseMove(event) {
                if (operation == null) return;

                var _operation2 = operation;
                var $card = _operation2.$card;
                var oldX = _operation2.oldX;
                var oldY = _operation2.oldY;

                var diffX = oldX - event.clientX;
                var diffY = oldY - event.clientY;

                operation.offsetX -= diffX;
                operation.offsetY -= diffY;

                console.log(operation);

                $card.css({
                    top: operation.offsetY + 'px',
                    left: operation.offsetX + 'px'
                });

                operation.oldX = event.clientX;
                operation.oldY = event.clientY;
            };

            var cellMouseMove = function cellMouseMove(event) {
                var $cell = $(event.currentTarget);
                $cell.css('background-color', 'red');
            };

            var cellMouseOut = function cellMouseOut(event) {
                var $cell = $(event.currentTarget);
                $cell.css('background-color', 'white');
            };

            var mouseDownOnCard = function mouseDownOnCard(event /*: MouseEvent */) {
                if (event.which !== 1) {
                    return;
                }

                var $card = $(event.currentTarget);

                $card.addClass('si-card-moving');

                operation = {
                    oldX: event.clientX, oldY: event.clientY,
                    offsetX: 0, offsetY: 0,
                    $card: $card
                };

                _this2.$ownerDocument.on('mousemove', mouseMove);
                _this2.$ownerDocument.on('mouseup', mouseUp);

                $('.skeduler-cell').on('mousemove', cellMouseMove);
                $('.skeduler-cell').on('mouseout', cellMouseOut);

                event.preventDefault();
            };

            $skedulerItemsEl.find('.si-card').on('mousedown', mouseDownOnCard);
        }
    }, {
        key: 'configureResizing',
        value: function configureResizing() {
            var _this3 = this;

            var div = $('<div></div>');

            var skedulerElResizableHandler = div.clone().addClass(this.settings.resizableHandlerCssClass);

            this.$container.prepend(skedulerElResizableHandler);

            skedulerElResizableHandler.width(this.$container.width());

            var resizableSliderHeight = this.$scheduleEl.height() + this.$headerContainer.height();
            var index = 0;
            this.$headerContainer.find('div').each(function (_, el) {
                div.clone().addClass(_this3.settings.resizableSliderCssClass).css('left', el.offsetLeft + el.clientWidth).height(resizableSliderHeight).data('column-id', index++).appendTo(skedulerElResizableHandler);
            });

            skedulerElResizableHandler.on('mousedown', '.' + this.settings.resizableSliderCssClass, this.onPointerDown.bind(this));
        }

        /**
           * Convert double value of hours to zero-preposited string with 30 or 00 value of minutes
           */
    }, {
        key: 'toTimeString',
        value: function toTimeString(value) {
            return (value < 10 ? '0' : '') + Math.ceil(value) + (Math.ceil(value) > Math.floor(value) ? ':30' : ':00');
        }

        /**
         * Return height of task card based on duration of the task
         * duration - in hours
         */
    }, {
        key: 'getCardHeight',
        value: function getCardHeight(duration) {
            var durationInMinutes = duration * 60;
            var heightOfMinute = (this.settings.lineHeight + this.settings.borderWidth) * this.settings.rowsPerHour / 60;
            return Math.ceil(durationInMinutes * heightOfMinute);
        }

        /**
         * Return top offset of task card based on start time of the task
         * startTime - in hours
         */
    }, {
        key: 'getCardTopPosition',
        value: function getCardTopPosition(startTime) {
            var startTimeInt = this.parseTime(startTime);
            return (this.settings.lineHeight + this.settings.borderWidth) * (startTimeInt * this.settings.rowsPerHour);
        }
    }, {
        key: 'parseTime',
        value: function parseTime(time) {
            return (/\d{2}\:\d{2}/.test(time) ? parseInt(time.split(':')[0]) + parseInt(time.split(':')[1]) / 60 : parseInt(time)
            );
        }

        /**
        * Render card template
        */
    }, {
        key: 'renderInnerCardContent',
        value: function renderInnerCardContent(task) {
            var result = this.settings.cardTemplate;
            for (var key in task) {
                if (task.hasOwnProperty(key)) {
                    // TODO: replace all
                    result = result.replace('${' + key + '}', task[key]);
                }
            }

            return $(result);
        }

        /** 
         * Generate task cards
         */
    }, {
        key: 'appendTasks',
        value: function appendTasks(placeholder, tasks) {
            var _this4 = this;

            tasks.forEach(function (task) {
                var innerContent = _this4.renderInnerCardContent(task);
                var top = _this4.getCardTopPosition(task.startTime);
                var height = _this4.getCardHeight(task.duration);

                var card = $('<div></div>').attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px',
                    title: _this4.toTimeString(task.startTime) + ' - ' + _this4.toTimeString(task.startTime + task.duration)
                });
                card.on('click', function (e) {
                    _this4.settings.onClick && _this4.settings.onClick(e, task);
                });
                card.append(innerContent).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'appendAvailableInterval',
        value: function appendAvailableInterval(placeholder, intervals) {
            var _this5 = this;

            var div = $('<div></div>');
            intervals.forEach(function (interval) {
                var innerContent = div.clone().text('Not allocated');
                var top = _this5.getCardTopPosition(interval.start) + 2;
                var duration = _this5.parseTime(interval.end) - _this5.parseTime(interval.start);
                var height = _this5.getCardHeight(duration) - 5;

                var card = div.clone().attr({
                    style: 'top: ' + top + 'px; height: ' + height + 'px'
                });

                card.append(innerContent).appendTo(placeholder);
            }, this);
        }
    }, {
        key: 'onPointerUp',
        value: function onPointerUp(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            this.$ownerDocument.off('mouseup');
            this.$ownerDocument.off('mousemove');

            this.operation = null;
        }
    }, {
        key: 'onPointerMove',
        value: function onPointerMove(event) {
            var op = this.operation;
            if (!this.operation) {
                return;
            }

            // Determine the delta change between start and new mouse position, as a percentage of the table width
            var difference = event.pageX - op.startX; // / this.$scheduleEl.width() * 100;
            if (difference === 0) {
                return;
            }

            var columnNumber = op.columnNumber;
            var width = op.width + difference;
            this.updateColumnWidth(columnNumber, width.toFixed(2));
        }
    }, {
        key: 'onPointerDown',
        value: function onPointerDown(event) {
            // Only applies to left-click dragging
            if (event.which !== 1) {
                return;
            }

            // If a previous this.operation is defined, we missed the last mouseup.
            // Probably gobbled up by user mousing out the window then releasing.
            // We'll simulate a pointerup here prior to it
            if (this.operation) {
                this.onPointerUp(event);
            }

            var $currentGrip = $(event.currentTarget);
            var columnNumber = $currentGrip.data('column-id');

            console.log(this.$headerContainer);

            var gripIndex = $currentGrip.index();
            var $leftColumn = this.$headerContainer.find('div').eq(gripIndex);

            var leftWidth = $leftColumn[0].clientWidth;

            this.operation = {
                columnNumber: columnNumber,
                startX: event.pageX,
                width: leftWidth
            };

            this.$ownerDocument.on('mousemove', this.onPointerMove.bind(this));
            this.$ownerDocument.on('mouseup', this.onPointerUp.bind(this));

            event.preventDefault();
        }
    }, {
        key: 'updateColumnWidth',
        value: function updateColumnWidth(columnNumber, width) {
            width = Math.max(width, this.settings.minColumnWidth);
            $('.' + this.settings.headerContainerCssClass + ' > div:eq(' + columnNumber + ')').css('flex-basis', width + 'px');

            var column = $('.' + this.settings.schedulerContainerCssClass + '-body > div:eq(' + columnNumber + ') > .' + this.settings.cellCssClass);
            var diff = column.width() - width;
            column.width(width);

            $('.' + this.settings.resizableHandlerCssClass + ' > div').each(function (index, el) {
                if (index >= columnNumber) {
                    var $el = $(el);
                    var left = parseInt($el.css('left').replace('px', ''));
                    $el.css('left', left - diff);
                }
            });
        }
    }]);

    return Skeduler;
})();

exports['default'] = Skeduler;
module.exports = exports['default'];

},{"./settings":3}]},{},[2])

//# sourceMappingURL=data:application/json;charset=utf8;base64,
